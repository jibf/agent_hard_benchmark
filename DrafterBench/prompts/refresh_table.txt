Task background:
You're a worker using tools provided by the drafter to implement his instruction on technical drawing editing tasks.
Now, the drafter wants to update the table format on the target area boxed by rectangle markups. The possible format attributes are: arrange, font, font size, alignment, border width. The necessary information for such a task has four levels, which are file-level (providing the file path), page-level (providing page number), order-level (providing rectangle order on the page), and base-level(providing atte least one of the format attributs) from high to low. A lower level information can correspond to only one higher level information, while higher level information can correspond to multiple lower-level information. You need to find the necessary information corresponding to each task from an instruction that may contain multiple tasks. Don't assume the value of missing necessary information (only the value of mentioned format attributes can be assumed), but identify tasks lacking necessary information, record the missing details, and execute the task that all essential information is gathered. Don't repeat the operations related to the same higher-level information when dealing with lower-level operations. Avoid using loops.

Task plan:
The following is a standard process for completing a task:
0.	Inexecutable task recording: If you think a level of necessary information(file-level, page-level, order-level, base-level) for a task is missing in the instruction, don't assume the value but skip all the operations of that task and create a recorder to record the incomplete instruction, then continue on next task. Otherwise, ignore this step if all four levels of necessary information of a task can be found.
1.	Import libraries
2.	Open the file.
3.	Target position extraction: Crate an annotation extractor and extract the rectangles on the target page and order.
4.	Argument collection: Prepare parameters for updating text format by modifying the argument's value specified by the drafter's instructions into a dictionary.
5.	Table extraction: Create a table extractor instance and extract the original table.
6.	Table update: Create a table manipulator and update the original table format.
7.	Save the file.

Available tools:
Two constant defined by the user:
"pagenumber": an int refers to the page number, pagenumber=0 indicates page one;
"rectangleorder" an int refers to the order of rectangles within the page, rectangleorder=0 indicates the first rectangle;

Argument collection:
Extract the argument values from the instruction and store them as a dictionary for the table format update task. Here is an example dictionary including all possible attributes:
{“clip”: a rectangle refers to the region of text should be dealing with. “arrange”: a list of row height and column width, general form:[[row height],[column width]], if only row height is defined, it is noted as [[row height], None], and vice versa as [None,[column width]]; “font”: a string refers to the font of the text; “fontsize”: an int refers to the size of text, “borderwidth”: an int refers to the width of the table border, “align”: a string refers to the alignment of the data in the table, which can be one of “center”, “left”, “right”, "justify";}

Popular PDF editing library "PyMuPDF" and a user-tailored library "PDFbf" are provided. You can import the two libraries by:
"import fitz
import PDFbf"

File open:
You can open the file by calling the following function:
"doc = fitz.open("filepath")" Open the file with the file path.

Save the updated file:
You can save the file with an updated name by calling the following function:
"
updated_file = filepath[:-4] + "_updated.pdf" # update file path
doc.save(updated_file)
"

Target position extraction:
An annotation extractor is instantiated by providing the essential arguments document(doc):
"annoextractor = PDFbf.extractanno(doc=fitz.document)"
Get a rectangle and its reference points:
"rectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=int,rectangleorder=int)"

Table extracttion:
A table extractor can be instantiated by defining the document(doc), page number(pagenumber), clip like this:
“table_extractor = PDFbf.extract_table(doc=fitz.document, pagenumber=int, clip=rectangle)”
You can get a list of each row date of the table by calling following function:
“table_data = table_extractor.data”

Table update:
A table manipulator can be instantiated by defining the necessary arguments (document(doc), page number(pagenumber), clip, data) and optionally mentioned arguments (arrange, font, fontsize, borderwidth, align) like this:
“Table_manipulator = PDFbf.manipulate_table(doc=fitz.document, pagenumber=int, clip=rectangle, data=list, arrange=list, font=string, fontsize=int, borderwidth=int, align=string)”
You can get a doc with the table updated by calling the following functions:
“doc = Table_manipulator.addtable()”

Incomplete instruction recording:
A missing key attribute recorder can be instantiated to record the incomplete instruction by providing the essential arguments(missing_information):
"recorder = PDFbf.recorder(missing_information=str)"
Where "missing_information" is a string indicating the highest-level of missing information, a standard format is '''file-level: value or missing, page-level: value or missing, order-level: value or missing, base-level: related part in the original instruction or missing(if no related part) or related part in the original instruction following with an "incomplete" in brackets (if there is some related description but some necessary information is missing) '''.
The incomplete instruction can be recorded by calling the following function:
"recorder.recording"

Here is an example. You should respond in the same way to execute the user's instructions.
User: The file name is “2anipusdflate_table.pdf”. For the table in the third box on page two, change the align to the right. For the table on page one, change the font to "Times-Roman".
Response:
```python

import fitz
import PDFbf

#Task 1
#file 1
filepath = “2anipusdflate_table.pdf”
doc = fitz.open(filepath)

annoextractor = PDFbf.extractanno(doc=doc)

#page 2
pagenumber0=1
#rectangle 3
rectangleorder0=2
rectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0,rectangleorder=rectangleorder0)
#table 1
argument0 = dict(clip=rectangle0,align="right")
table_extractor0 = PDFbf.extract_table(doc=doc,pagenumber=pagenumber0,clip=argument0.get("clip"))
table_data0 = table_extractor0.data
Table_manipulator0 = PDFbf.manipulate_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get("clip"), data=table_data0, align=argument0.get("align"))
doc = Table_manipulator0.addtable()

#task 2 record the missing information
missing_information1 = '''file-level:2anipusdflate_table.pdf, page-level: 1, order-level: missing, base-level: change the font to "Times-Roman"'''
recorder1 = PDFbf.recorder(missing_information=missing_information1)
recorder1.recording

updatedfilepath = filepath[:-4] + "_updated.pdf"
doc.save(updatedfilepath)
```