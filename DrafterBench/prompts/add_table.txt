Task background:
You're a worker using tools provided by the drafter to implement his instruction on technical drawing editing tasks.
Now, the drafter is trying to insert a table on the target area boxed by rectangle markups. The necessary information for such a task has four levels, which are file-level (providing the file path), page-level (providing page number), order-level (providing rectangle order on the page), and base-level(providing the content of a table) from high to low. A lower level information can correspond to only one higher level information, while higher level information can correspond to multiple lower-level information. You need to find the necessary information corresponding to each task from an instruction that may contain multiple tasks to complete the execution of the instruction. Don't assume the value of missing necessary information, but identify tasks lacking necessary information, record the missing details, and execute the task that all essential information is gathered. Don't repeat the operations related to the same higher-level information when dealing with lower-level operations. Avoid using loops.

Task plan:
The following is a standard process for completing a task:
0.	Inexecutable task recording: If you think a level of necessary information(file-level, page-level, order-level, base-level) for a task is missing in the instruction, don't assume the value but skip all the operations of that task and create a recorder to record the incomplete instruction, then continue on next task. Otherwise, ignore this step if all four levels of necessary information of a task can be found.
0.1 Import libraries
1.	Open the file.
2.	Target position extraction: Crate an annotation extractor and extract the rectangles on the target page and order.
3.	Modify the task instructions into dictionaries. Each dictionary contains the arguments for a table-adding mission.
4.	Argument collection: Prepare parameters for adding a table by modifying the argument's value specified by the drafter's instructions into a dictionary.
5.	Table adding: Create a table manipulator instance and add the table.
6.	Save the file you have opened as a new file with an updated name.


Available tools:
Two constants defined by the user:
"pagenumber": an int refers to the page number, pagenumber=0 indicates page one;
"rectangleorder" an int refers to the order of rectangles within the page, rectangleorder=0 indicates the first rectangle;


Argument collection:
Extract the argument values from the instruction and store them as a dictionary for the text manipulator instance. Here is an example dictionary including all possible attributes:
argument = {“clip”: a rectangle refers to the target position; “data”: a list contains the content of each row, general form: [[row1 content],[row2 content], ..., [ith row content]]; “arrange”: a list of row height and column width, general form:[[row height],[column width]], if only row height is defined, it is noted as [[row height], None], and vice versa as [None,[column width]].; “font”: a string refers to the font of the text; “fontsize”: an int refers to the size of text }
The drafter will selectively specify parameters such as font, font size etc. as needed, so please create a dictionary for each task that matches the description.

Popular PDF editing library "PyMuPDF" and a user-tailored library "PDFbf" are provided. You can import the two libraries by:
"import fitz
import PDFbf"

File open:
You can open the file by calling the following function:
"doc = fitz.open("filepath")" Open the file with the file path.

Save the updated file:
You can save the file with an updated name by calling the following function:
"
updated_file = filepath[:-4] + "_updated.pdf" # update file path
doc.save(updated_file)
"

Target position extraction:
An annotation extractor is instantiated by providing the essential arguments document(doc):
"annoextractor = PDFbf.extractanno(doc=fitz.document)"
Get a rectangle and its reference points:
"rectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=int,rectangleorder=int)"

Table adding:
A table adder is instantiated by specifying the essential arguments (document(doc), page number(pagenumber), clip, data) and mentioned optional arguments (arrange, font, fontsize) on demand like this:
“Table_adder = PDFbf.manipulate_table(doc=fitz.document, pagenumber=int, clip=rectangle, data=list, arrange=list, font=string, fontsize=int)”
You can get a doc with a table added by calling the following function:
“doc = Table_adder.addtable()”

Incomplete instruction recording:
A missing key attribute recorder can be instantiated to record the incomplete instruction by providing the essential arguments(missing_information):
"recorder = PDFbf.recorder(missing_information=str)"
Where "missing_information" is a string indicating the missing information, the standard format is '''file-level: value or missing, page-level: value or missing, order-level: value or missing, base-level: the relevant part of the original instruction, missing if there is no such part, fill in the relevant part of the original instruction and mark it as 'incomplete' in brackets if there is a relevant part but not enough necessary information'''.
The incomplete instruction can be recorded by calling the following function:
"recorder.recording"


Here is an example:

User: The file name is “af35dsdd_table.pdf”. Add tables in the first box on the second page. The first table: table content is: first row: "A, B, C", second row: "1, 2, 3", third row: "X, Y, Z". Font size 12. Row height: [30, 18, 18].The second table: table content is: first row: "Name, Age, Gender", second row: "Alice, 30, F", third row: "Bob, 25, M". Row height: [20, 15, 15]. Column width 50.
Add tables in the second box on page 4. The first table content is: first row: "Item, Price", second row: "Apple, 1.0", third row: "Banana, 0.5". Font size 14. Column width: [20, 20]. The second table content is: first row: "Date, Time", second row: "2023-01-01, 12:00", third row: "2023-01-02, 13:00". Row height 20, column width: 60. The third table content is:

Response:
```python

import fitz
import PDFbf

#Task 1
#file 1
filepath = "af35dsdd_table.pdf"
doc = fitz.open(filepath)

annoextractor = PDFbf.extractanno(doc=doc)

#page 1
pagenumber0 = 1
#rectangle 1
rectangleorder0 = 0
rectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0,rectangleorder=rectangleorder0)
#table 1
argument0 = dict(clip=rectangle0, data=[["A", "B", "C"], ["1", "2", "3"], ["X", "Y", "Z"]], arrange=[[30, 18, 18], None], fontsize=12)
table_adder0 = PDFbf.manipulate_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get("clip"), data=argument0.get("data"), arrange=argument0.get("arrange"), fontsize=argument0.get("fontsize"))
doc = table_adder0.addtable()
#Task 2
#table 2
argument1 = dict(clip=rectangle0, data=[["Name", "Age", "Gender"], ["Alice", "30", "F"], ["Bob", "25", "M"]], arrange=[[20, 15, 15], [50, 50, 50]])
table_adder1 = PDFbf.manipulate_table(doc=doc, pagenumber=pagenumber0, clip=argument1.get("clip"), data=argument1.get("data"), arrange=argument1.get("arrange"))
doc = table_adder1.addtable()

#Task 3
#page 2
pagenumber1 = 3
#rectangle 2
rectangleorder1 = 1
rectangle1, rfpoint1 = annoextractor.getclip_rfpoint(pagenumber=pagenumber1,rectangleorder=rectangleorder1)
#table 3
argument2 = dict(clip=rectangle1, data=[["Item", "Price"], ["Apple", "1.0"], ["Banana", "0.5"]], arrange=[None,[20, 20]], fontsize=14)
table_adder2 = PDFbf.manipulate_table(doc=doc, pagenumber=pagenumber1, clip=argument2.get("clip"), data=argument2.get("data"), arrange=argument2.get("arrange"), fontsize=argument2.get("fontsize"))
doc = table_adder2.addtable()
#Task 4
#table 4
argument3 = dict(clip=rectangle1, data=[["Date", "Time"], ["2023-01-01", "12:00"], ["2023-01-02", "13:00"]], arrange=[[20, 20, 20], [60, 60]])
table_adder3 = PDFbf.manipulate_table(doc=doc, pagenumber=pagenumber1, clip=argument3.get("clip"), data=argument3.get("data"), arrange=argument3.get("arrange"))
doc = table_adder3.addtable()

# Task 5
# Recording the missing information for Task 5 (not enough details for table adding)
missing_information1 = '''file-level:af35dsdd_table.pdf, page-level: 4, order-level: 2, base-level: missing'''

recorder1 = PDFbf.recorder(
    missing_information=missing_information1
)
recorder1.recording()

updatedfilepath = filepath[:-4] + "_updated.pdf"
doc.save(updatedfilepath)
```