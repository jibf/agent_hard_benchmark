[
    {
        "Tasktype": "add_table",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "In the file \"EF34GH.pdf\", on page 8, within the fourth rectangle, add a table with the following content: first row \"Column, Height\"; second row \"C1, 3m\"; third row \"C2, 4.5m\"; adjust the row heights to [25, 20, 20].\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# File-level information\nfilepath = \"EF34GH.pdf\"\ndoc = fitz.open(filepath)\n\n# Annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level and order-level information\npagenumber = 7  # Page 8 (0-based index)\nrectangleorder = 3  # Fourth rectangle (0-based index)\n\n# Extracting target rectangle\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Table content\nargument = dict(\n    clip=rectangle,\n    data=[[\"Column\", \"Height\"], [\"C1\", \"3m\"], [\"C2\", \"4.5m\"]],\n    arrange=[[25, 20, 20], None]\n)\n\n# Adding the table\ntable_adder = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    data=argument.get(\"data\"),\n    arrange=argument.get(\"arrange\")\n)\ndoc = table_adder.addtable()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"EF34GH.pdf\"\ndoc = fitz.open(filepath)\n\n# Page-level (page 8, zero-indexed as 7)\npagenumber = 7\n# Order-level (fourth rectangle, zero-indexed as 3)\nrectangleorder = 3\n\n# Target position extraction\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Base-level: Table content and row heights\ndata = [[\"Column\", \"Height\"], [\"C1\", \"3m\"], [\"C2\", \"4.5m\"]]\narrange = [[25, 20, 20], None]  # Row heights specified, column widths not defined\n\n# Table adding\ntable_adder = PDFbf.manipulate_table(doc=doc, pagenumber=pagenumber, clip=rectangle, data=data, arrange=arrange)\ndoc = table_adder.addtable()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "add_table",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " In the file \"IJ56KL.pdf\", on page 15, within the first rectangle, add a table with the following content: first row \"Load, Type, Value\"; second row \"Dead, Uniform, 10kN/m\"; third row \"Live, Point, 5kN\".\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# File-level information\nfilepath = \"IJ56KL.pdf\"\ndoc = fitz.open(filepath)\n\n# Annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level and order-level information\npagenumber = 14  # Page 15 (0-based index)\nrectangleorder = 0  # First rectangle (0-based index)\n\n# Extracting target rectangle\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Table content\nargument = dict(\n    clip=rectangle,\n    data=[[\"Load\", \"Type\", \"Value\"], [\"Dead\", \"Uniform\", \"10kN/m\"], [\"Live\", \"Point\", \"5kN\"]]\n)\n\n# Adding the table\ntable_adder = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    data=argument.get(\"data\")\n)\ndoc = table_adder.addtable()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level information\nfilepath = \"IJ56KL.pdf\"\ndoc = fitz.open(filepath)\n\n# Page-level information (page 15, converted to zero-based index)\npagenumber = 14\n\n# Order-level information (first rectangle, zero-based index)\nrectangleorder = 0\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Base-level information (table content)\ndata = [\n    [\"Load\", \"Type\", \"Value\"],\n    [\"Dead\", \"Uniform\", \"10kN/m\"],\n    [\"Live\", \"Point\", \"5kN\"]\n]\n\n# Create argument dictionary (only required parameters provided)\nargument = {\"clip\": rectangle, \"data\": data}\n\n# Table adding\ntable_adder = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument[\"clip\"],\n    data=argument[\"data\"]\n)\ndoc = table_adder.addtable()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "add_table",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "In the file \"MN78OP.pdf\", on page 6, within the fifth rectangle, add a table with the following content: first row \"Slab, Thickness, Reinforcement\"; second row \"S1, 150mm, T10@200mm\"; third row \"S2, 200mm, T12@150mm\"; specify the column widths as [60, 60, 80], set the row heights to [30, 25, 25], and use the font \"Times New Roman\" at size 11.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# File-level information\nfilepath = \"MN78OP.pdf\"\ndoc = fitz.open(filepath)\n\n# Annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level and order-level information\npagenumber = 5  # Page 6 (0-based index)\nrectangleorder = 4  # Fifth rectangle (0-based index)\n\n# Extracting target rectangle\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Table content\nargument = dict(\n    clip=rectangle,\n    data=[\n        [\"Slab\", \"Thickness\", \"Reinforcement\"],\n        [\"S1\", \"150mm\", \"T10@200mm\"],\n        [\"S2\", \"200mm\", \"T12@150mm\"]\n    ],\n    arrange=[[30, 25, 25], [60, 60, 80]],\n    font=\"Times New Roman\",\n    fontsize=11\n)\n\n# Adding the table\ntable_adder = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    data=argument.get(\"data\"),\n    arrange=argument.get(\"arrange\"),\n    font=argument.get(\"font\"),\n    fontsize=argument.get(\"fontsize\")\n)\ndoc = table_adder.addtable()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"MN78OP.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 6 (zero-indexed pagenumber=5)\npagenumber = 5\n# Fifth rectangle (zero-indexed rectangleorder=4)\nrectangleorder = 4\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Table arguments\nargument = {\n    \"clip\": rectangle,\n    \"data\": [\n        [\"Slab\", \"Thickness\", \"Reinforcement\"],\n        [\"S1\", \"150mm\", \"T10@200mm\"],\n        [\"S2\", \"200mm\", \"T12@150mm\"]\n    ],\n    \"arrange\": [[30, 25, 25], [60, 60, 80]],\n    \"font\": \"Times New Roman\",\n    \"fontsize\": 11\n}\n\n# Add table\ntable_adder = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument[\"clip\"],\n    data=argument[\"data\"],\n    arrange=argument[\"arrange\"],\n    font=argument[\"font\"],\n    fontsize=argument[\"fontsize\"]\n)\ndoc = table_adder.addtable()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "revise_table",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " In the file \"QW8RT6.pdf,\" on page 8, within the second rectangle, clear all cells in the range starting from the 3rd row and 2nd column, ending at the 6th row and 4th column. Set the font size to 12 and align the content to \"left.\"\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File 1\nfilepath = \"QW8RT6.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1\npagenumber0 = 7\n# Rectangle 1\nrectangleorder0 = 1\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0, fontsize=12, align=\"left\")\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\ntable_data0 = table_extractor0.data\ntable_manipulator0 = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0.get(\"clip\"),\n    data=table_data0,\n    fontsize=argument0.get(\"fontsize\"),\n    align=argument0.get(\"align\")\n)\n\n# Clear specified range\ntable_manipulator0.data = table_manipulator0.emptytable(startcell=[3, 2], endcell=[6, 4])\n\n# Add the updated table to the document\ndoc = table_manipulator0.addtable()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"QW8RT6.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level (page 8 -> pagenumber=7)\npagenumber = 7\n# Order-level (second rectangle -> rectangleorder=1)\nrectangleorder = 1\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Base-level operation\nargument = {\"clip\": rectangle, \"fontsize\": 12, \"align\": \"left\"}\ntable_extractor = PDFbf.extract_table(doc=doc, pagenumber=pagenumber, clip=argument[\"clip\"])\ntable_data = table_extractor.data\ntable_manipulator = PDFbf.manipulate_table(\n    doc=doc, \n    pagenumber=pagenumber, \n    clip=argument[\"clip\"], \n    data=table_data, \n    fontsize=argument[\"fontsize\"], \n    align=argument[\"align\"]\n)\n# Clear cells from 3rd row/2nd column to 6th row/4th column\ntable_manipulator.data = table_manipulator.emptytable(startcell=[3, 2], endcell=[6, 4])\ndoc = table_manipulator.addtable()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "revise_table",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " In the file \"ZT56PQ.pdf,\" on page 12, within the third rectangle, delete the entire table.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 2\n# File 2\nfilepath = \"ZT56PQ.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1\npagenumber0 = 11\n# Rectangle 1\nrectangleorder0 = 2\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0)\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\ntable_data0 = table_extractor0.data\ntable_manipulator0 = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0.get(\"clip\"),\n    data=table_data0\n)\n\n# Delete the entire table\ntable_manipulator0.data = table_manipulator0.cuttable()\n\n# Add the updated table to the document\ndoc = table_manipulator0.addtable()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"ZT56PQ.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level\npagenumber = 11  # page 12 (0-based index)\n\n# Order-level\nrectangleorder = 2  # third rectangle (0-based index)\n\n# Target position extraction\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Argument collection\nargument = {\"clip\": rectangle}\n\n# Extract original table\ntable_extractor = PDFbf.extract_table(doc=doc, pagenumber=pagenumber, clip=argument[\"clip\"])\ntable_data = table_extractor.data\n\n# Update table (delete entire table)\ntable_manipulator = PDFbf.manipulate_table(doc=doc, pagenumber=pagenumber, clip=argument[\"clip\"], data=table_data)\ntable_manipulator.data = table_manipulator.cuttable()  # Delete entire table\n\n# Save file\ndoc = table_manipulator.addtable()\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "map_table",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nScale the table in file D5G8L.pdf on page 5, rectangle1, by a factor of 1.2 uniformly and translate it to the right by 15 units.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File\nfilepath = \"D5G8L.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 5\npagenumber0 = 4\n# Rectangle 1\nrectangleorder0 = 0\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Mapping\nargument0 = dict(clip=rectangle0, move=[15, 0, rfpoint0], scal=['sc', [1.2, 1.2], rfpoint0])\ntable_project0 = PDFbf.Projector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), move=argument0.get(\"move\"), scal=argument0.get(\"scal\"))\ndoc = table_project0.project()\n\n# Save updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"D5G8L.pdf\"\ndoc = fitz.open(filepath)\n\n# Page-level (page 5)\npagenumber0 = 4  # 0-based index\n# Order-level (rectangle1)\nrectangleorder0 = 0\n\n# Target position extraction\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Base-level operations: scale uniformly by 1.2 and move right 15 units\nargument0 = {\n    \"clip\": rectangle0,\n    \"scal\": ['sc', [1.2, 1.2], rfpoint0],  # Uniform scaling in both directions\n    \"move\": [15, 0, rfpoint0]  # Move right (positive X) by 15 units\n}\n\n# Changing position with both scaling and translation\ntable_projector = PDFbf.Projector(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0[\"clip\"],\n    scal=argument0[\"scal\"],\n    move=argument0[\"move\"]\n)\ndoc = table_projector.project()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "revise_table",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " In the file \"LM92AC.pdf,\" on page 16, within the fourth rectangle, replace the data in cells starting from the 2nd row and 3rd column, ending at the 4th row and 5th column, with the following: second row: \"P, Q, R,\" third row: \"X, Y, Z,\" and fourth row: \"L, M, N.\" Set the font to \"Calibri\" and font size to 10.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 3\n# File 3\nfilepath = \"LM92AC.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1\npagenumber0 = 15\n# Rectangle 1\nrectangleorder0 = 3\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0, font=\"Calibri\", fontsize=10)\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\ntable_data0 = table_extractor0.data\ntable_manipulator0 = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0.get(\"clip\"),\n    data=table_data0,\n    font=argument0.get(\"font\"),\n    fontsize=argument0.get(\"fontsize\")\n)\n\n# Replace the specified range with new data\nrepdata0 = [[\"P\", \"Q\", \"R\"], [\"X\", \"Y\", \"Z\"], [\"L\", \"M\", \"N\"]]\ntable_manipulator0.data = table_manipulator0.modifytable(repdata=repdata0, startcell=[2, 3], endcell=[4, 5])\n\n# Add the updated table to the document\ndoc = table_manipulator0.addtable()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"LM92AC.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level (page 16 = pagenumber=15)\npagenumber0 = 15\n# Order-level (fourth rectangle = rectangleorder=3)\nrectangleorder0 = 3\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Base-level operation\nargument0 = {\n    \"clip\": rectangle0,\n    \"font\": \"Calibri\",\n    \"fontsize\": 10\n}\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0[\"clip\"])\ntable_data0 = table_extractor0.data\ntable_manipulator0 = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0[\"clip\"],\n    data=table_data0,\n    font=argument0[\"font\"],\n    fontsize=argument0[\"fontsize\"]\n)\n\n# Replace cells from 2nd row/3rd column to 4th row/5th column\nrepdata0 = [[\"P\", \"Q\", \"R\"], [\"X\", \"Y\", \"Z\"], [\"L\", \"M\", \"N\"]]\ntable_manipulator0.data = table_manipulator0.modifytable(\n    repdata=repdata0,\n    startcell=[2, 3],\n    endcell=[4, 5]\n)\n\n# Add modified table and save\ndoc = table_manipulator0.addtable()\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "map_table",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nRotate the table in file D5G8L.pdf on page 7, rectangle3, by 45 degrees counterclockwise and scale it by a factor of 0.9 uniformly.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File\nfilepath = \"D5G8L.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 7\npagenumber0 = 6\n# Rectangle 3\nrectangleorder0 = 2\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Mapping\nargument0 = dict(clip=rectangle0, rotation=['r', -45, rfpoint0], scal=['sc', [0.9, 0.9], rfpoint0])\ntable_project0 = PDFbf.Projector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), rotation=argument0.get(\"rotation\"), scal=argument0.get(\"scal\"))\ndoc = table_project0.project()\n\n# Save updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"D5G8L.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 7 (zero-indexed pagenumber=6)\npagenumber = 6\n# Rectangle 3 (zero-indexed rectangleorder=2)\nrectangleorder = 2\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Rotation and scaling arguments\n# Counterclockwise rotation uses negative degrees\nrotation_args = ['r', -45, rfpoint]\n# Uniform scaling factor 0.9\nscale_args = ['sc', [0.9, 0.9], rfpoint]\n\n# Create argument dictionary\narguments = {\n    \"clip\": rectangle,\n    \"rotation\": rotation_args,\n    \"scal\": scale_args\n}\n\n# Apply transformations\ntable_projector = PDFbf.Projector(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=arguments[\"clip\"],\n    rotation=arguments[\"rotation\"],\n    scal=arguments[\"scal\"]\n)\ndoc = table_projector.project()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "map_table",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nTranslate the table in file D5G8L.pdf on page 10, rectangle2, downward by 8 units and rotate it by 30 degrees clockwise.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File\nfilepath = \"D5G8L.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 10\npagenumber0 = 9\n# Rectangle 2\nrectangleorder0 = 1\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Mapping\nargument0 = dict(clip=rectangle0, move=[0, -8, rfpoint0], rotation=['r', 30, rfpoint0])\ntable_project0 = PDFbf.Projector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), move=argument0.get(\"move\"), rotation=argument0.get(\"rotation\"))\ndoc = table_project0.project()\n\n# Save updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"D5G8L.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 10 (zero-indexed pagenumber=9)\npagenumber = 9\n# Rectangle 2 (zero-indexed rectangleorder=1)\nrectangleorder = 1\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Prepare arguments for translation and rotation\narguments = dict(\n    clip=rectangle,\n    move=[0, -8, rfpoint],  # [right_direction, up_direction, reference_point]\n    rotation=['r', 30, rfpoint]  # [direction, degrees, reference_point]\n)\n\n# Apply transformations\ntable_projector = PDFbf.Projector(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=arguments.get(\"clip\"),\n    move=arguments.get(\"move\"),\n    rotation=arguments.get(\"rotation\")\n)\ndoc = table_projector.project()\n\n# Save updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "refresh_table",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Modify the table in QD93V.pdf, on page 8, in the 7th rectangle. Set the column widths to [40, 40, 30] and arrange row heights uniformly to 18. Use the font style Arial and set the border width to 2px.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 2\n# File\nfilepath = \"QD93V.pdf\"\ndoc = fitz.open(filepath)\n\n# Page 8\npagenumber = 7  # Page 8 corresponds to 7 in zero-based indexing\n# Rectangle 7\nrectangleorder = 6  # Seventh rectangle corresponds to 6 in zero-based indexing\n\n# Extract the target rectangle\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Arguments for table update\nargument = dict(\n    clip=rectangle,\n    arrange=[[18], [40, 40, 30]],  # Uniform row heights and specified column widths\n    font=\"Arial\",\n    borderwidth=2\n)\n\n# Extract the original table\ntable_extractor = PDFbf.extract_table(doc=doc, pagenumber=pagenumber, clip=argument.get(\"clip\"))\ntable_data = table_extractor.data\n\n# Update the table\nTable_manipulator = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    data=table_data,\n    arrange=argument.get(\"arrange\"),\n    font=argument.get(\"font\"),\n    borderwidth=argument.get(\"borderwidth\")\n)\ndoc = Table_manipulator.addtable()\n\n# Save the updated file\nupdated_filepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_filepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# File-level information\nfilepath = \"QD93V.pdf\"\ndoc = fitz.open(filepath)\n\n# Page-level and order-level information\npagenumber = 7  # 0-based index for page 8\nrectangleorder = 6  # 0-based index for 7th rectangle\n\n# Target position extraction\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Argument collection\narguments = {\n    \"clip\": rectangle,\n    \"arrange\": [[18], [40, 40, 30]],  # Uniform row heights of 18, column widths [40,40,30]\n    \"font\": \"Arial\",\n    \"borderwidth\": 2\n}\n\n# Table extraction and update\ntable_extractor = PDFbf.extract_table(doc=doc, pagenumber=pagenumber, clip=arguments[\"clip\"])\ntable_data = table_extractor.data\n\nTable_manipulator = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=arguments[\"clip\"],\n    data=table_data,\n    arrange=arguments[\"arrange\"],\n    font=arguments[\"font\"],\n    borderwidth=arguments[\"borderwidth\"]\n)\ndoc = Table_manipulator.addtable()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "refresh_table",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Update the table in YT72R.pdf, on page 10, in the 4th rectangle. Set the column widths to [50, 40], the row heights to [15, 20, 25], and align the text justify. Use the font Times New Roman.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 4\n# File\nfilepath = \"YT72R.pdf\"\ndoc = fitz.open(filepath)\n\n# Page 10\npagenumber = 9  # Page 10 corresponds to 9 in zero-based indexing\n# Rectangle 4\nrectangleorder = 3  # Fourth rectangle corresponds to 3 in zero-based indexing\n\n# Extract the target rectangle\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Arguments for table update\nargument = dict(\n    clip=rectangle,\n    arrange=[[15, 20, 25], [50, 40]],  # Specified row heights and column widths\n    font=\"Times New Roman\",\n    align=\"justify\"  # Align vertically\n)\n\n# Extract the original table\ntable_extractor = PDFbf.extract_table(doc=doc, pagenumber=pagenumber, clip=argument.get(\"clip\"))\ntable_data = table_extractor.data\n\n# Update the table\nTable_manipulator = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    data=table_data,\n    arrange=argument.get(\"arrange\"),\n    font=argument.get(\"font\"),\n    align=argument.get(\"align\")\n)\ndoc = Table_manipulator.addtable()\n\n# Save the updated file\nupdated_filepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_filepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task execution\nfilepath = \"YT72R.pdf\"\ndoc = fitz.open(filepath)\n\n# Target position extraction\nannoextractor = PDFbf.extractanno(doc=doc)\npagenumber0 = 9  # Page 10 (0-indexed)\nrectangleorder0 = 3  # 4th rectangle (0-indexed)\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Argument collection\nargument0 = {\n    \"clip\": rectangle0,\n    \"arrange\": [[15, 20, 25], [50, 40]],  # [row heights], [column widths]\n    \"font\": \"Times New Roman\",\n    \"align\": \"justify\"\n}\n\n# Table extraction and update\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0[\"clip\"])\ntable_data0 = table_extractor0.data\n\nTable_manipulator0 = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0[\"clip\"],\n    data=table_data0,\n    arrange=argument0.get(\"arrange\"),\n    font=argument0.get(\"font\"),\n    align=argument0.get(\"align\")\n)\ndoc = Table_manipulator0.addtable()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "add_text",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Add the text string \"Foundation Details\" to the file JK76C.pdf on page 5, in the second rectangle. Rotate the text by 90 degrees and set the text color to blue.\n\n",
        "Groundtruth": " \nimport fitz\nimport PDFbf\n\n# File path\nfilepath = \"JK76C.pdf\"\ndoc = fitz.open(filepath)\n\n# Instantiate the annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 5\npagenumber = 4  # Page 5 corresponds to index 4\n\n# Second rectangle on page 5\nrectangleorder = 1\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Prepare the argument for text addition\nargument = dict(\n    clip=rectangle,\n    text=\"Foundation Details\",\n    textcolor=\"blue\",\n    rotate=90\n)\n\n# Add the text\nText_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    text=argument.get(\"text\"),\n    textcolor=argument.get(\"textcolor\"),\n    rotate=argument.get(\"rotate\")\n)\ndoc = Text_manipulator.addtext()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# File-level\nfilepath = \"JK76C.pdf\"\ndoc = fitz.open(filepath)\n\n# Page-level (page 5 = index 4)\npagenumber = 4\n\n# Order-level (second rectangle = index 1)\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangleorder = 1\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Base-level with parameters\nargument = {\n    \"clip\": rectangle,\n    \"text\": \"Foundation Details\",\n    \"rotate\": 90,\n    \"textcolor\": \"blue\"\n}\n\n# Text manipulation\ntext_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument[\"clip\"],\n    text=argument[\"text\"],\n    rotate=argument[\"rotate\"],\n    textcolor=argument[\"textcolor\"]\n)\ndoc = text_manipulator.addtext()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "add_text",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Add the text string \"Elevation Section\" to the file TR89Q.pdf on page 8, in the third rectangle. Specify font size as 12 and rotate the text by 180 degrees.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# File path\nfilepath = \"TR89Q.pdf\"\ndoc = fitz.open(filepath)\n\n# Instantiate the annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 8\npagenumber = 7  # Page 8 corresponds to index 7\n\n# Third rectangle on page 8\nrectangleorder = 2\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Prepare the argument for text addition\nargument = dict(\n    clip=rectangle,\n    text=\"Elevation Section\",\n    fontsize=12,\n    rotate=180\n)\n\n# Add the text\nText_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    text=argument.get(\"text\"),\n    fontsize=argument.get(\"fontsize\"),\n    rotate=argument.get(\"rotate\")\n)\ndoc = Text_manipulator.addtext()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\nfilepath = \"TR89Q.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\npagenumber = 7  # Page 8 (zero-indexed)\nrectangleorder = 2  # Third rectangle (zero-indexed)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Prepare arguments for text insertion\nargument = {\n    \"clip\": rectangle,\n    \"text\": \"Elevation Section\",\n    \"fontsize\": 12,\n    \"rotate\": 180\n}\n\n# Create text manipulator and add text\nText_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument[\"clip\"],\n    text=argument[\"text\"],\n    fontsize=argument[\"fontsize\"],\n    rotate=argument[\"rotate\"]\n)\ndoc = Text_manipulator.addtext()\n\n# Save updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "add_text",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Add the text string \"Structural Layout\" to the file MP32Z.pdf on page 10, in the fourth rectangle. Set the font to Times New Roman and specify text alignment as justify.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# File path\nfilepath = \"MP32Z.pdf\"\ndoc = fitz.open(filepath)\n\n# Instantiate the annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 10\npagenumber = 9  # Page 10 corresponds to index 9\n\n# Fourth rectangle on page 10\nrectangleorder = 3\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Prepare the argument for text addition\nargument = dict(\n    clip=rectangle,\n    text=\"Structural Layout\",\n    font=\"Times New Roman\",\n    align=fitz.TEXT_ALIGN_JUSTIFY\n)\n\n# Add the text\nText_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    text=argument.get(\"text\"),\n    font=argument.get(\"font\"),\n    align=argument.get(\"align\")\n)\ndoc = Text_manipulator.addtext()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# File-level\nfilepath = \"MP32Z.pdf\"\ndoc = fitz.open(filepath)\n\n# Page-level (page 10)\npagenumber = 9\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Order-level (fourth rectangle)\nrectangleorder = 3\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Base-level arguments\nargument = {\n    \"clip\": rectangle,\n    \"text\": \"Structural Layout\",\n    \"font\": \"times-roman\",  # PyMuPDF uses \"times-roman\" for Times New Roman\n    \"align\": fitz.TEXT_ALIGN_JUSTIFY\n}\n\n# Text manipulation\ntext_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument[\"clip\"],\n    text=argument[\"text\"],\n    font=argument[\"font\"],\n    align=argument[\"align\"]\n)\ndoc = text_manipulator.addtext()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "refresh_table",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Edit the table in LPX14.pdf, on page 2, in the 1st rectangle. Adjust the row heights to [20, 25] and the column widths uniformly to 25. Set the font size to 14.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 3\n# File\nfilepath = \"LPX14.pdf\"\ndoc = fitz.open(filepath)\n\n# Page 2\npagenumber = 1  # Page 2 corresponds to 1 in zero-based indexing\n# Rectangle 1\nrectangleorder = 0  # First rectangle corresponds to 0 in zero-based indexing\n\n# Extract the target rectangle\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Arguments for table update\nargument = dict(\n    clip=rectangle,\n    arrange=[[20, 25], [25]],  # Specified row heights and uniform column widths\n    fontsize=14  # Font size specified\n)\n\n# Extract the original table\ntable_extractor = PDFbf.extract_table(doc=doc, pagenumber=pagenumber, clip=argument.get(\"clip\"))\ntable_data = table_extractor.data\n\n# Update the table\nTable_manipulator = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    data=table_data,\n    arrange=argument.get(\"arrange\"),\n    fontsize=argument.get(\"fontsize\")\n)\ndoc = Table_manipulator.addtable()\n\n# Save the updated file\nupdated_filepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_filepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task execution\nfilepath = \"LPX14.pdf\"\ndoc = fitz.open(filepath)\n\n# Target position extraction\nannoextractor = PDFbf.extractanno(doc=doc)\npagenumber = 1  # Page 2 (0-indexed)\nrectangleorder = 0  # 1st rectangle (0-indexed)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Argument collection\narguments = {\n    \"clip\": rectangle,\n    \"arrange\": [[20, 25], [25, 25]],  # Row heights [20,25], column widths [25,25]\n    \"fontsize\": 14\n}\n\n# Table extraction and update\ntable_extractor = PDFbf.extract_table(doc=doc, pagenumber=pagenumber, clip=arguments[\"clip\"])\ntable_data = table_extractor.data\n\ntable_manipulator = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=arguments[\"clip\"],\n    data=table_data,\n    arrange=arguments[\"arrange\"],\n    fontsize=arguments[\"fontsize\"]\n)\ndoc = table_manipulator.addtable()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "revise_text",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nFor the file X987Y654.pdf, on page 7, in the second rectangle, delete the strings \"Draft Copy\" and \"Preliminary Version\" from the horizontal text. Align any remaining text to the left.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File 1\nfilepath = \"X987Y654.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1\npagenumber0 = 6\n\n# Rectangle 1\nrectangleorder0 = 1\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0, align=fitz.TEXT_ALIGN_LEFT)\nText_manipulator0 = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0.get(\"clip\"),\n    align=argument0.get(\"align\"),\n)\nText_manipulator0.text = Text_manipulator0.gethortext()\nText_manipulator0.text = Text_manipulator0.deletetext(deltex=\"Draft Copy\")\nText_manipulator0.text = Text_manipulator0.deletetext(deltex=\"Preliminary Version\")\ndoc = Text_manipulator0.addtext()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"X987Y654.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level (page 7 -> pagenumber=6)\npagenumber0 = 6\n\n# Order-level (second rectangle -> rectangleorder=1)\nrectangleorder0 = 1\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Base-level operations\nargument0 = dict(clip=rectangle0, align=fitz.TEXT_ALIGN_LEFT)\nText_manipulator0 = PDFbf.manipulate_text(\n    doc=doc, \n    pagenumber=pagenumber0, \n    clip=argument0.get(\"clip\"), \n    align=argument0.get(\"align\")\n)\n\n# Extract horizontal text\nText_manipulator0.text = Text_manipulator0.gethortext()\n\n# Delete specified strings\nText_manipulator0.text = Text_manipulator0.deletetext(deltex=\"Draft Copy\")\nText_manipulator0.text = Text_manipulator0.deletetext(deltex=\"Preliminary Version\")\n\n# Add modified text\ndoc = Text_manipulator0.addtext()\n\n# Save updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "revise_text",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nFor the file T567U89.pdf, on page 10, in the third rectangle, replace the string \"Initial Plan\" in the horizontal text with \"Final Layout\". Use font Times New Roman and align the text to the right.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 2\n# File 2\nfilepath = \"T567U89.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1\npagenumber0 = 9\n\n# Rectangle 1\nrectangleorder0 = 2\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0, font=\"Times New Roman\", align=fitz.TEXT_ALIGN_RIGHT)\nText_manipulator0 = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0.get(\"clip\"),\n    font=argument0.get(\"font\"),\n    align=argument0.get(\"align\"),\n)\nText_manipulator0.text = Text_manipulator0.gethortext()\nText_manipulator0.text = Text_manipulator0.replacetext(retext=\"Initial Plan\", totext=\"Final Layout\")\ndoc = Text_manipulator0.addtext()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"T567U89.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level (page 10, zero-indexed)\npagenumber0 = 9\n\n# Order-level (third rectangle, zero-indexed)\nrectangleorder0 = 2\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Base-level operations\nargument0 = dict(\n    clip=rectangle0,\n    font=\"Times New Roman\",\n    align=fitz.TEXT_ALIGN_RIGHT\n)\ntext_manipulator0 = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0[\"clip\"],\n    font=argument0[\"font\"],\n    align=argument0[\"align\"]\n)\n\n# Extract horizontal text, perform replacement, and update\ntext_manipulator0.text = text_manipulator0.gethortext()\ntext_manipulator0.text = text_manipulator0.replacetext(retext=\"Initial Plan\", totext=\"Final Layout\")\ndoc = text_manipulator0.addtext()\n\n# Save updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "map_text",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Rotate the text in rectangle 12 on page 7 of file AB12CD.pdf by 15 degrees clockwise.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# file 1\nfilepath = \"AB12CD.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# page 7\npagenumber0 = 6\n\n# rectangle 12\nrectangleorder0 = 11\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\nargument0 = dict(clip=rectangle0, rotation=['r', 15, rfpoint0])\ntext_project0 = PDFbf.Projector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), rotation=argument0.get(\"rotation\"))\ndoc = text_project0.project()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# file 1\nfilepath0 = \"AB12CD.pdf\"\ndoc = fitz.open(filepath0)\n\nannoextractor0 = PDFbf.extractanno(doc=doc)\n\n# page 1 (page 7 in 1-based index)\npagenumber0 = 6\n\n# rectangle 12 (0-based index)\nrectangleorder0 = 11\nrectangle0, rfpoint0 = annoextractor0.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Argument collection for rotation\nargument0 = dict(clip=rectangle0, rotation=['r', 15, rfpoint0])\n\n# Changing position\ntext_project0 = PDFbf.Projector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), rotation=argument0.get(\"rotation\"))\ndoc = text_project0.project()\n\n# Save the updated file\nupdatedfilepath0 = filepath0[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath0)\n"
    },
    {
        "Tasktype": "map_text",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Scale the text in rectangle 8 on page 15 of file EF34GH.pdf to 150% of its original size.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# file 1\nfilepath = \"EF34GH.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# page 15\npagenumber0 = 14\n\n# rectangle 8\nrectangleorder0 = 7\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\nargument0 = dict(clip=rectangle0, scal=['sc', [1.5, 1.5], rfpoint0])\ntext_project0 = PDFbf.Projector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), scal=argument0.get(\"scal\"))\ndoc = text_project0.project()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"EF34GH.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\npagenumber = 14  # Page 15 (0-based index)\nrectangleorder = 7  # Rectangle 8 (0-based index)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Scale to 150% (1.5x) uniformly\nargument = dict(clip=rectangle, scal=['sc', [1.5, 1.5], rfpoint])\ntext_projector = PDFbf.Projector(doc=doc, pagenumber=pagenumber, clip=argument.get(\"clip\"), scal=argument.get(\"scal\"))\ndoc = text_projector.project()\n\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "map_text",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Shift the text in rectangle 2 on page 10 of file IJ56KL.pdf left by 5 units and rotate it 30 degrees counterclockwise.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# file 1\nfilepath = \"IJ56KL.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# page 10\npagenumber0 = 9\n\n# rectangle 2\nrectangleorder0 = 1\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\nargument0 = dict(clip=rectangle0, move=[-5, 0, rfpoint0], rotation=['r', -30, rfpoint0])\ntext_project0 = PDFbf.Projector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), move=argument0.get(\"move\"), rotation=argument0.get(\"rotation\"))\ndoc = text_project0.project()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"IJ56KL.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\npagenumber = 9  # page 10 in zero-based index\nrectangleorder = 1  # second rectangle in zero-based index\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Translation: left by 5 units (negative X direction)\n# Rotation: 30 degrees counterclockwise (negative value)\nargument = dict(\n    clip=rectangle,\n    move=[-5, 0, rfpoint],  # [X shift, Y shift, reference_point]\n    rotation=['r', -30, rfpoint]  # Negative degrees for counterclockwise\n)\n\ntext_projector = PDFbf.Projector(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    move=argument.get(\"move\"),\n    rotation=argument.get(\"rotation\")\n)\n\ndoc = text_projector.project()\n\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "refresh_text",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nModify the text in rectangle 11 on page 3 of Design_8H2K.pdf in horizontal orientation, changing the font to Arial and text color to blue.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"Design_8H2K.pdf\"\ndoc = fitz.open(filepath)\n\n# Annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page number\npagenumber = 2  # Page 3 in 0-indexed format\n\n# Rectangle order\nrectangleorder = 10  # Rectangle 11 in 0-indexed format\n\n# Extract rectangle and reference point\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Argument collection for horizontal text with specified font and color\nargument = dict(clip=rectangle, font=\"Arial\", textcolor=\"blue\")\n\n# Manipulate text\nText_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    font=argument.get(\"font\"),\n    textcolor=argument.get(\"textcolor\")\n)\nText_manipulator.text = Text_manipulator.gethortext()\ndoc = Text_manipulator.addtext()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task execution\nfilepath = \"Design_8H2K.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level: page 3 (0-indexed pagenumber=2)\npagenumber = 2\n# Order-level: rectangle 11 (0-indexed rectangleorder=10)\nrectangleorder = 10\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Base-level arguments\narguments = {\n    \"clip\": rectangle,\n    \"font\": \"Arial\",\n    \"textcolor\": \"blue\",\n    \"rotate\": 0  # Explicit horizontal orientation\n}\n\ntext_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=arguments[\"clip\"],\n    font=arguments[\"font\"],\n    textcolor=arguments[\"textcolor\"],\n    rotate=arguments[\"rotate\"]\n)\n\n# Extract and update horizontal text\ntext_manipulator.text = text_manipulator.gethortext()\ndoc = text_manipulator.addtext()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "refresh_text",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nUpdate the text in rectangle 2 on page 15 of Design_8H2K.pdf in vertical orientation, setting the font to Times New Roman, font size to 14pt, and alignment to center.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"Design_8H2K.pdf\"\ndoc = fitz.open(filepath)\n\n# Annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page number\npagenumber = 14  # Page 15 in 0-indexed format\n\n# Rectangle order\nrectangleorder = 1  # Rectangle 2 in 0-indexed format\n\n# Extract rectangle and reference point\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Argument collection for vertical text with specified font, font size, and alignment\nargument = dict(clip=rectangle, rotate=90, font=\"Times New Roman\", fontsize=14, align=fitz.TEXT_ALIGN_CENTER)\n\n# Manipulate text\nText_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    rotate=argument.get(\"rotate\"),\n    font=argument.get(\"font\"),\n    fontsize=argument.get(\"fontsize\"),\n    align=argument.get(\"align\")\n)\nText_manipulator.text = Text_manipulator.getvertext()\ndoc = Text_manipulator.addtext()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task execution\nfilepath = \"Design_8H2K.pdf\"\ndoc = fitz.open(filepath)\n\n# Page-level: 15 (zero-based index 14)\npagenumber = 14\n# Order-level: rectangle 2 (zero-based index 1)\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=1)\n\n# Base-level parameters\narguments = {\n    \"clip\": rectangle,\n    \"rotate\": 90,  # Vertical orientation\n    \"font\": \"times-roman\",  # Times New Roman\n    \"fontsize\": 14,\n    \"align\": fitz.TEXT_ALIGN_CENTER\n}\n\n# Create text manipulator and process text\ntext_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=arguments[\"clip\"],\n    rotate=arguments[\"rotate\"],\n    font=arguments[\"font\"],\n    fontsize=arguments[\"fontsize\"],\n    align=arguments[\"align\"]\n)\n\n# Extract vertical text and update format\ntext_manipulator.text = text_manipulator.getvertext()\ndoc = text_manipulator.addtext()\n\n# Save updated document\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "refresh_text",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nModify the text in rectangle 7 on page 10 of Design_8H2K.pdf, changing the font to Calibri.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"Design_8H2K.pdf\"\ndoc = fitz.open(filepath)\n\n# Annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page number\npagenumber = 9  # Page 10 in 0-indexed format\n\n# Rectangle order\nrectangleorder = 6  # Rectangle 7 in 0-indexed format\n\n# Extract rectangle and reference point\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Argument collection for changing font to Calibri\nargument = dict(clip=rectangle, font=\"Calibri\")\n\n# Manipulate text\nText_manipulator = PDFbf.manipulate_text(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    font=argument.get(\"font\")\n)\nText_manipulator.text = Text_manipulator.gethortext()\ndoc = Text_manipulator.addtext()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# File-level information\nfilepath = \"Design_8H2K.pdf\"\ndoc = fitz.open(filepath)\n\n# Page-level information (page 10, zero-based index 9)\npagenumber = 9\n# Order-level information (rectangle 7, zero-based index 6)\nrectangleorder = 6\n\n# Target position extraction\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Argument collection (only font specified)\narguments = dict(clip=rectangle, font=\"Calibri\")\n\n# Update format\ntext_manipulator = PDFbf.manipulate_text(doc=doc, pagenumber=pagenumber, clip=arguments[\"clip\"], font=arguments[\"font\"])\ntext_manipulator.text = text_manipulator.gethortext()  # Default to horizontal text\ndoc = text_manipulator.addtext()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "add_vector",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Edit the file \"JKL5678.pdf\" on page 12 by adding rebars marked by blue annotation.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File 1\nfilepath = \"JKL5678.pdf\"\ndoc = fitz.open(filepath)\n\n# Page 12\npagenumber11 = 11  # Page 12 corresponds to pagenumber=11\n\n# Target class\nargument0 = dict(annocolor=\"blue\")\nannoextractor0 = PDFbf.extractanno(doc=doc, pagenumber=pagenumber11, annocolor=argument0.get(\"annocolor\"))\nblue_11_drawings = annoextractor0.anno()\nblue_11_son_classes_selector = PDFbf.select_from_drawings(doc=doc, pagenumber=pagenumber11, cdrawings=blue_11_drawings)\nblue_11_rebars = blue_11_son_classes_selector.mode2_rebars_Cross_Touch_Intersect()\ndrawings_manipulator0 = PDFbf.manipulate_draw(doc=doc, pagenumber=pagenumber11, sel_drawings=blue_11_rebars)\ndoc = drawings_manipulator0.add_standrawing()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"JKL5678.pdf\"\ndoc = fitz.open(filepath)\n# Page-level (page 12 -> pagenumber=11)\npagenumber = 11\n# Order-level and base-level\nannocolor = \"blue\"\n# Extract parent class \"drawings\"\nanno_extractor = PDFbf.extractanno(doc=doc, pagenumber=pagenumber, annocolor=annocolor)\nblue_drawings = anno_extractor.anno()\n# Select son class \"rebar\"\nrebar_selector = PDFbf.select_from_drawings(doc=doc, pagenumber=pagenumber, cdrawings=blue_drawings)\nrebars = rebar_selector.mode2_rebars_Cross_Touch_Intersect()\n# Add strokes without specifying drwcolor/width (use defaults)\ndrawings_manipulator = PDFbf.manipulate_draw(doc=doc, pagenumber=pagenumber, sel_drawings=rebars)\ndoc = drawings_manipulator.add_standrawing()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "add_vector",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Update the file \"MNO9876.pdf\" on page 7 by adding lines marked by green annotation with stroke color set to black.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File 1\nfilepath = \"MNO9876.pdf\"\ndoc = fitz.open(filepath)\n\n# Page 7\npagenumber6 = 6  # Page 7 corresponds to pagenumber=6\n\n# Target class\nargument0 = dict(annocolor=\"green\", drwcolor=\"black\")\nannoextractor0 = PDFbf.extractanno(doc=doc, pagenumber=pagenumber6, annocolor=argument0.get(\"annocolor\"))\ngreen_6_drawings = annoextractor0.anno()\ngreen_6_son_classes_selector = PDFbf.select_from_drawings(doc=doc, pagenumber=pagenumber6, cdrawings=green_6_drawings)\ngreen_6_lines = green_6_son_classes_selector.mode2_lines_Cross_Touch_Intersect()\ndrawings_manipulator0 = PDFbf.manipulate_draw(doc=doc, pagenumber=pagenumber6, sel_drawings=green_6_lines, drwcolor=argument0.get(\"drwcolor\"))\ndoc = drawings_manipulator0.add_standrawing()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"MNO9876.pdf\"\ndoc = fitz.open(filepath)\n# Page-level (page 7 corresponds to pagenumber=6)\npagenumber6 = 6\n# Order-level and base-level\nargument0 = dict(annocolor=\"green\", drwcolor=\"black\")\n# Parent class extraction\nanno_extractor = PDFbf.extractanno(doc=doc, pagenumber=pagenumber6, annocolor=argument0.get(\"annocolor\"))\ngreen_6_drawings = anno_extractor.anno()\n# Son class selection\ngreen_6_son_selector = PDFbf.select_from_drawings(doc=doc, pagenumber=pagenumber6, cdrawings=green_6_drawings)\ngreen_6_lines = green_6_son_selector.mode2_lines_Cross_Touch_Intersect()\n# Strokes adding\ndrawings_manipulator = PDFbf.manipulate_draw(doc=doc, pagenumber=pagenumber6, sel_drawings=green_6_lines, drwcolor=argument0.get(\"drwcolor\"))\ndoc = drawings_manipulator.add_standrawing()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "add_vector",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " Alter the file \"XYZ5432.pdf\" on page 9 by adding drawings marked by yellow annotation with a stroke width of 1.0 unit.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File 1\nfilepath = \"XYZ5432.pdf\"\ndoc = fitz.open(filepath)\n\n# Page 9\npagenumber8 = 8  # Page 9 corresponds to pagenumber=8\n\n# Target class\nargument0 = dict(annocolor=\"yellow\", width=1.0)\nannoextractor0 = PDFbf.extractanno(doc=doc, pagenumber=pagenumber8, annocolor=argument0.get(\"annocolor\"))\nyellow_8_drawings = annoextractor0.anno()\ndrawings_manipulator0 = PDFbf.manipulate_draw(doc=doc, pagenumber=pagenumber8, sel_drawings=yellow_8_drawings, width=argument0.get(\"width\"))\ndoc = drawings_manipulator0.add_standrawing()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File-level\nfilepath = \"XYZ5432.pdf\"\ndoc = fitz.open(filepath)\n# Page-level: page 9 corresponds to pagenumber=8 (zero-indexed)\npagenumber = 8\n# Order-level and base-level arguments\narguments = {\"annocolor\": \"yellow\", \"width\": 1}  # Converted 1.0 to integer\n\n# Parent class extraction\nanno_extractor = PDFbf.extractanno(doc=doc, pagenumber=pagenumber, annocolor=arguments[\"annocolor\"])\nyellow_drawings = anno_extractor.anno()\n\n# Strokes adding\ndrawings_manipulator = PDFbf.manipulate_draw(\n    doc=doc, \n    pagenumber=pagenumber, \n    sel_drawings=yellow_drawings, \n    width=arguments[\"width\"]\n)\ndoc = drawings_manipulator.add_standrawing()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "delete_vector",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nDelete the class \"column\" using Intersection mode in the file \"JRT57KL.pdf,\" page 5, rectangle order 2.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\nfilepath = \"JRT57KL.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\npagenumber = 4  # Page 5 (zero-indexed)\nrectangleorder = 1  # Rectangle order 2 (zero-indexed)\n\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\nargument = dict(clip=rectangle)\n\nselector = PDFbf.selector(doc=doc, pagenumber=pagenumber, clip=argument.get(\"clip\"))\nintersected_columns = selector.mode2_columns_Cross_Touch_Intersect()\n\ndrawing_manipulator = PDFbf.draw_drawer(doc=doc, pagenumber=pagenumber, listofcdraw=intersected_columns)\ndoc = drawing_manipulator.delete_draw()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\nfilepath = \"JRT57KL.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Mission 1\npagenumber0 = 4\nrectangleorder0 = 1\n\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\nargument0 = dict(clip=rectangle0)\nselector0 = PDFbf.selector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\nintersected_columns0 = selector0.mode2_columns_Cross_Touch_Intersect()\ndrawing_manipulator0 = PDFbf.draw_drawer(doc=doc, pagenumber=pagenumber0, listofcdraw=intersected_columns0)\ndoc = drawing_manipulator0.delete_draw()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "delete_vector",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nDelete the class \"line\" using Cover mode in the file \"BQZL40W.pdf,\" page 8, rectangle order 3. Repair the target position after deletion.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\nfilepath = \"BQZL40W.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\npagenumber = 7  # Page 8 (zero-indexed)\nrectangleorder = 2  # Rectangle order 3 (zero-indexed)\n\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\nargument = dict(clip=rectangle)\n\nselector = PDFbf.selector(doc=doc, pagenumber=pagenumber, clip=argument.get(\"clip\"))\ncovered_lines = selector.mode1_lines_Window_Cover_Enclosure()\n\ndrawing_manipulator = PDFbf.draw_drawer(doc=doc, pagenumber=pagenumber, listofcdraw=covered_lines)\ndoc = drawing_manipulator.delete_draw()\n\nrepairer = PDFbf.repairer(doc=doc, pagenumber=pagenumber, clip=argument.get(\"clip\"), cdrawings=selector.selected_lines, sel_drawings=covered_lines)\ndoc = repairer.del_repair()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\nfilepath = \"BQZL40W.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Mission 1\npagenumber0 = 7  # Page 8 (0-indexed)\nrectangleorder0 = 3  # Rectangle order 3 (0-indexed)\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\nargument0 = dict(clip=rectangle0)\n\n# Select lines with Cover mode (mode1)\nselector0 = PDFbf.selector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\ncovered_lines0 = selector0.mode1_lines_Window_Cover_Enclosure()\n\n# Delete selected lines\ndrawing_manipulator0 = PDFbf.draw_drawer(doc=doc, pagenumber=pagenumber0, listofcdraw=covered_lines0)\ndoc = drawing_manipulator0.delete_draw()\n\n# Repair target position\nrepairer0 = PDFbf.repairer(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), cdrawings=selector0.selected_lines, sel_drawings=covered_lines0)\ndoc = repairer0.del_repair()\n\n# Save updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "delete_vector",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nDelete the class \"rebar\" using Intersection mode in the file \"VY84NXB.pdf,\" page 10, rectangle order 4.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\nfilepath = \"VY84NXB.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\npagenumber = 9  # Page 10 (zero-indexed)\nrectangleorder = 3  # Rectangle order 4 (zero-indexed)\n\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\nargument = dict(clip=rectangle)\n\nselector = PDFbf.selector(doc=doc, pagenumber=pagenumber, clip=argument.get(\"clip\"))\nintersected_rebars = selector.mode2_rebars_Cross_Touch_Intersect()\n\ndrawing_manipulator = PDFbf.draw_drawer(doc=doc, pagenumber=pagenumber, listofcdraw=intersected_rebars)\ndoc = drawing_manipulator.delete_draw()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\nfilepath = \"VY84NXB.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Mission 1\npagenumber0 = 9  # Page 10 (0-indexed)\nrectangleorder0 = 3  # 4th rectangle (0-indexed)\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\nargument0 = {\"clip\": rectangle0}\nselector0 = PDFbf.selector(doc=doc, pagenumber=pagenumber0, clip=argument0[\"clip\"])\nintersected_rebars0 = selector0.mode2_rebars_Cross_Touch_Intersect()\ndrawing_manipulator0 = PDFbf.draw_drawer(doc=doc, pagenumber=pagenumber0, listofcdraw=intersected_rebars0)\ndoc = drawing_manipulator0.delete_draw()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    }
]