[
    {
        "Tasktype": "add_table",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "In the file \"EF34GH.pdf\", on page 8, within the fourth rectangle, add a table with the following content: first row \"Column, Height\"; second row \"C1, 3m\"; third row \"C2, 4.5m\"; adjust the row heights to [25, 20, 20].\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# File-level information\nfilepath = \"EF34GH.pdf\"\ndoc = fitz.open(filepath)\n\n# Annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level and order-level information\npagenumber = 7  # Page 8 (0-based index)\nrectangleorder = 3  # Fourth rectangle (0-based index)\n\n# Extracting target rectangle\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Table content\nargument = dict(\n    clip=rectangle,\n    data=[[\"Column\", \"Height\"], [\"C1\", \"3m\"], [\"C2\", \"4.5m\"]],\n    arrange=[[25, 20, 20], None]\n)\n\n# Adding the table\ntable_adder = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    data=argument.get(\"data\"),\n    arrange=argument.get(\"arrange\")\n)\ndoc = table_adder.addtable()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# file 1\nfilepath = \"EF34GH.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# page 1 (page 8 in document = index 7 since 0-indexed)\npagenumber0 = 7\n# rectangle 1 (fourth rectangle = index 3)\nrectangleorder0 = 3\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n# table 1\nargument0 = dict(clip=rectangle0, data=[[\"Column\", \"Height\"], [\"C1\", \"3m\"], [\"C2\", \"4.5m\"]], arrange=[[25, 20, 20], None])\ntable_adder0 = PDFbf.manipulate_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), data=argument0.get(\"data\"), arrange=argument0.get(\"arrange\"))\ndoc = table_adder0.addtable()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "add_table",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "In the file \"MN78OP.pdf\", on page 6, within the fifth rectangle, add a table with the following content: first row \"Slab, Thickness, Reinforcement\"; second row \"S1, 150mm, T10@200mm\"; third row \"S2, 200mm, T12@150mm\"; specify the column widths as [60, 60, 80], set the row heights to [30, 25, 25], and use the font \"Times New Roman\" at size 11.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# File-level information\nfilepath = \"MN78OP.pdf\"\ndoc = fitz.open(filepath)\n\n# Annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level and order-level information\npagenumber = 5  # Page 6 (0-based index)\nrectangleorder = 4  # Fifth rectangle (0-based index)\n\n# Extracting target rectangle\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Table content\nargument = dict(\n    clip=rectangle,\n    data=[\n        [\"Slab\", \"Thickness\", \"Reinforcement\"],\n        [\"S1\", \"150mm\", \"T10@200mm\"],\n        [\"S2\", \"200mm\", \"T12@150mm\"]\n    ],\n    arrange=[[30, 25, 25], [60, 60, 80]],\n    font=\"Times New Roman\",\n    fontsize=11\n)\n\n# Adding the table\ntable_adder = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    data=argument.get(\"data\"),\n    arrange=argument.get(\"arrange\"),\n    font=argument.get(\"font\"),\n    fontsize=argument.get(\"fontsize\")\n)\ndoc = table_adder.addtable()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# file-level\nfilepath = \"MN78OP.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# page-level: page 6 -> pagenumber=5 (0-indexed)\npagenumber0 = 5\n# order-level: fifth rectangle -> rectangleorder=4 (0-indexed)\nrectangleorder0 = 4\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# base-level: table content and formatting\ndata0 = [\n    [\"Slab\", \"Thickness\", \"Reinforcement\"],\n    [\"S1\", \"150mm\", \"T10@200mm\"],\n    [\"S2\", \"200mm\", \"T12@150mm\"]\n]\narrange0 = [[30, 25, 25], [60, 60, 80]]  # [row_heights, column_widths]\n\nargument0 = {\n    \"clip\": rectangle0,\n    \"data\": data0,\n    \"arrange\": arrange0,\n    \"font\": \"Times New Roman\",\n    \"fontsize\": 11\n}\n\ntable_adder0 = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0[\"clip\"],\n    data=argument0[\"data\"],\n    arrange=argument0[\"arrange\"],\n    font=argument0[\"font\"],\n    fontsize=argument0[\"fontsize\"]\n)\ndoc = table_adder0.addtable()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "revise_table",
        "Id": 2,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " In the file \"QW8RT6.pdf,\" on page 8, within the second rectangle, clear all cells in the range starting from the 3rd row and 2nd column, ending at the 6th row and 4th column. Set the font size to 12 and align the content to \"left.\"\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File 1\nfilepath = \"QW8RT6.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1\npagenumber0 = 7\n# Rectangle 1\nrectangleorder0 = 1\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0, fontsize=12, align=\"left\")\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\ntable_data0 = table_extractor0.data\ntable_manipulator0 = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0.get(\"clip\"),\n    data=table_data0,\n    fontsize=argument0.get(\"fontsize\"),\n    align=argument0.get(\"align\")\n)\n\n# Clear specified range\ntable_manipulator0.data = table_manipulator0.emptytable(startcell=[3, 2], endcell=[6, 4])\n\n# Add the updated table to the document\ndoc = table_manipulator0.addtable()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File 1\nfilepath = \"QW8RT6.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1 (page 8 in the document, pagenumber=7 because pagenumber=0 indicates page one)\npagenumber0 = 7\n# Rectangle 1 (second rectangle, rectangleorder=1 because rectangleorder=0 indicates the first rectangle)\nrectangleorder0 = 1\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0, fontsize=12, align=\"left\")\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\ntable_data0 = table_extractor0.data\ntable_manipulator0 = PDFbf.manipulate_table(\n    doc=doc, \n    pagenumber=pagenumber0, \n    clip=argument0.get(\"clip\"), \n    data=table_data0,\n    fontsize=argument0.get(\"fontsize\"),\n    align=argument0.get(\"align\")\n)\ntable_manipulator0.data = table_manipulator0.emptytable(startcell=[3, 2], endcell=[6, 4])\ndoc = table_manipulator0.addtable()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "revise_table",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " In the file \"ZT56PQ.pdf,\" on page 12, within the third rectangle, delete the entire table.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 2\n# File 2\nfilepath = \"ZT56PQ.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1\npagenumber0 = 11\n# Rectangle 1\nrectangleorder0 = 2\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0)\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\ntable_data0 = table_extractor0.data\ntable_manipulator0 = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0.get(\"clip\"),\n    data=table_data0\n)\n\n# Delete the entire table\ntable_manipulator0.data = table_manipulator0.cuttable()\n\n# Add the updated table to the document\ndoc = table_manipulator0.addtable()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\n# File 1\nfilepath = \"ZT56PQ.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1 (page 12 in the document, which is index 11 since pagenumber=0 indicates page one)\npagenumber0 = 11\n# Rectangle 1 (third rectangle, which is index 2 since rectangleorder=0 indicates the first rectangle)\nrectangleorder0 = 2\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0)\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\ntable_data0 = table_extractor0.data\ntable_manipulator0 = PDFbf.manipulate_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), data=table_data0)\n# Delete the entire table\ntable_manipulator0.data = table_manipulator0.cuttable()\ndoc = table_manipulator0.addtable()\n\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n"
    },
    {
        "Tasktype": "add_table",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " In the file \"IJ56KL.pdf\", on page 15, within the first rectangle, add a table with the following content: first row \"Load, Type, Value\"; second row \"Dead, Uniform, 10kN/m\"; third row \"Live, Point, 5kN\".\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# File-level information\nfilepath = \"IJ56KL.pdf\"\ndoc = fitz.open(filepath)\n\n# Annotation extractor\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level and order-level information\npagenumber = 14  # Page 15 (0-based index)\nrectangleorder = 0  # First rectangle (0-based index)\n\n# Extracting target rectangle\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Table content\nargument = dict(\n    clip=rectangle,\n    data=[[\"Load\", \"Type\", \"Value\"], [\"Dead\", \"Uniform\", \"10kN/m\"], [\"Live\", \"Point\", \"5kN\"]]\n)\n\n# Adding the table\ntable_adder = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument.get(\"clip\"),\n    data=argument.get(\"data\")\n)\ndoc = table_adder.addtable()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"IJ56KL.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page-level: page 15 (0-indexed: 14)\npagenumber = 14\n# Order-level: first rectangle (0-indexed: 0)\nrectangleorder = 0\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Base-level: table content provided\ndata = [\n    [\"Load\", \"Type\", \"Value\"],\n    [\"Dead\", \"Uniform\", \"10kN/m\"],\n    [\"Live\", \"Point\", \"5kN\"]\n]\nargument = dict(clip=rectangle, data=data)\n\n# Table adding with only essential parameters (arrange/font/fontsize not specified)\ntable_adder = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber,\n    clip=argument[\"clip\"],\n    data=argument[\"data\"]\n)\ndoc = table_adder.addtable()\n\n# Save updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "revise_table",
        "Id": 4,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": " In the file \"LM92AC.pdf,\" on page 16, within the fourth rectangle, replace the data in cells starting from the 2nd row and 3rd column, ending at the 4th row and 5th column, with the following: second row: \"P, Q, R,\" third row: \"X, Y, Z,\" and fourth row: \"L, M, N.\" Set the font to \"Calibri\" and font size to 10.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 3\n# File 3\nfilepath = \"LM92AC.pdf\"\ndoc = fitz.open(filepath)\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 1\npagenumber0 = 15\n# Rectangle 1\nrectangleorder0 = 3\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Operation 1\nargument0 = dict(clip=rectangle0, font=\"Calibri\", fontsize=10)\ntable_extractor0 = PDFbf.extract_table(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"))\ntable_data0 = table_extractor0.data\ntable_manipulator0 = PDFbf.manipulate_table(\n    doc=doc,\n    pagenumber=pagenumber0,\n    clip=argument0.get(\"clip\"),\n    data=table_data0,\n    font=argument0.get(\"font\"),\n    fontsize=argument0.get(\"fontsize\")\n)\n\n# Replace the specified range with new data\nrepdata0 = [[\"P\", \"Q\", \"R\"], [\"X\", \"Y\", \"Z\"], [\"L\", \"M\", \"N\"]]\ntable_manipulator0.data = table_manipulator0.modifytable(repdata=repdata0, startcell=[2, 3], endcell=[4, 5])\n\n# Add the updated table to the document\ndoc = table_manipulator0.addtable()\n\n# Save the updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# File-level information\nfilepath = \"LM92AC.pdf\"\ndoc = fitz.open(filepath)\n\n# Page-level information (page 16, which is pagenumber=15)\npagenumber = 15\n\n# Order-level information (fourth rectangle, which is rectangleorder=3)\nrectangleorder = 3\nannoextractor = PDFbf.extractanno(doc=doc)\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Base-level information\n# Extract original table\ntable_extractor = PDFbf.extract_table(doc=doc, pagenumber=pagenumber, clip=rectangle)\ntable_data = table_extractor.data\n\n# Prepare replacement data\nrepdata = [[\"P\", \"Q\", \"R\"], [\"X\", \"Y\", \"Z\"], [\"L\", \"M\", \"N\"]]\n\n# Create table manipulator and apply changes\ntable_manipulator = PDFbf.manipulate_table(\n    doc=doc, \n    pagenumber=pagenumber, \n    clip=rectangle, \n    data=table_data,\n    font=\"Calibri\",\n    fontsize=10\n)\n\n# Replace the specified cells\ntable_manipulator.data = table_manipulator.modifytable(\n    repdata=repdata, \n    startcell=[2, 3], \n    endcell=[4, 5]\n)\n\n# Add the revised table back to the document\ndoc = table_manipulator.addtable()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    },
    {
        "Tasktype": "map_table",
        "Id": 3,
        "Precise|Vague": "Precise",
        "Complete|Incomplete": "Complete",
        "Single|Multiple_objects": "Single_Object",
        "Single|Multiple_operations": "Single_Operation",
        "Structured/Unstructured": "Structured",
        "Instruction": "\nRotate the table in file D5G8L.pdf on page 7, rectangle3, by 45 degrees counterclockwise and scale it by a factor of 0.9 uniformly.\n\n",
        "Groundtruth": "\nimport fitz\nimport PDFbf\n\n# Task 1\n# File\nfilepath = \"D5G8L.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# Page 7\npagenumber0 = 6\n# Rectangle 3\nrectangleorder0 = 2\nrectangle0, rfpoint0 = annoextractor.getclip_rfpoint(pagenumber=pagenumber0, rectangleorder=rectangleorder0)\n\n# Mapping\nargument0 = dict(clip=rectangle0, rotation=['r', -45, rfpoint0], scal=['sc', [0.9, 0.9], rfpoint0])\ntable_project0 = PDFbf.Projector(doc=doc, pagenumber=pagenumber0, clip=argument0.get(\"clip\"), rotation=argument0.get(\"rotation\"), scal=argument0.get(\"scal\"))\ndoc = table_project0.project()\n\n# Save updated file\nupdatedfilepath = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updatedfilepath)\n\n\n\n",
        "Response_code": "import fitz\nimport PDFbf\n\n# Task 1\nfilepath = \"D5G8L.pdf\"\ndoc = fitz.open(filepath)\n\nannoextractor = PDFbf.extractanno(doc=doc)\n\n# page 7 -> index 6\npagenumber = 6\n# rectangle3 -> index 2\nrectangleorder = 2\nrectangle, rfpoint = annoextractor.getclip_rfpoint(pagenumber=pagenumber, rectangleorder=rectangleorder)\n\n# Prepare arguments for rotation and scaling\nrotation_arg = ['r', -45, rfpoint]  # counterclockwise 45 degrees\nscal_arg = ['sc', [0.9, 0.9], rfpoint]  # uniform scaling by 0.9\n\n# Create projector with both operations\ntable_projector = PDFbf.Projector(doc=doc, pagenumber=pagenumber, clip=rectangle, rotation=rotation_arg, scal=scal_arg)\ndoc = table_projector.project()\n\n# Save the updated file\nupdated_file = filepath[:-4] + \"_updated.pdf\"\ndoc.save(updated_file)\n"
    }
]