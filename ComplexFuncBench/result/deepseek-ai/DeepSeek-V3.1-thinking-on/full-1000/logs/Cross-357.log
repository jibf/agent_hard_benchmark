2025-08-25 12:30:13,533 - evaluation_logger_Cross-357 - INFO - Test Example Cross-357
2025-08-25 12:30:13,533 - evaluation_logger_Cross-357 - INFO - Query: I want to know which day in early November 2024 (from November 1st to 10th) has the cheapest room at the Four Seasons Hotel London. Book a flight from Beijing to London for that day. If there are multiple days with the lowest price, choose the earliest date.
2025-08-25 12:30:21,188 - evaluation_logger_Cross-357 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Four Seasons Hotel London"
        }
    }
]

2025-08-25 12:30:21,189 - evaluation_logger_Cross-357 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Four Seasons Hotel London"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "London, UK"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Beijing"
        }
    },
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 447430,
            "search_type": "hotel",
            "arrival_date": "2024-11-01",
            "departure_date": "2024-11-10"
        }
    }
]

2025-08-25 12:30:21,189 - evaluation_logger_Cross-357 - INFO - Start compare_single_call: 
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Four Seasons Hotel London'}}
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Four Seasons Hotel London'}}
2025-08-25 12:30:21,189 - evaluation_logger_Cross-357 - INFO - Rule-based compare success.
2025-08-25 12:30:21,189 - evaluation_logger_Cross-357 - INFO - Success matched: [{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Four Seasons Hotel London'}}]
2025-08-25 12:30:21,189 - evaluation_logger_Cross-357 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "dest_id": "447430",
                "search_type": "hotel",
                "roundtrip": "GgEwIAAoATICZW46GUZvdXIgU2Vhc29ucyBIb3RlbCBMb25kb25AAEoAUAA=",
                "region": "Greater London",
                "type": "ho",
                "lc": "en",
                "name": "Four Seasons Hotel London at Park Lane",
                "dest_type": "hotel",
                "latitude": 51.504227,
                "longitude": -0.15005618,
                "label": "Four Seasons Hotel London at Park Lane, London, Greater London, United Kingdom",
                "hotels": 1,
                "city_name": "London",
                "cc1": "gb",
                "city_ufi": -2601889,
                "country": "United Kingdom",
                "nr_hotels": 1
            }
        ]
    }
]

2025-08-25 12:30:32,104 - evaluation_logger_Cross-357 - INFO - Function Calls: 
[
    {
        "name": "Get_Room_Availability",
        "arguments": {
            "hotel_id": "447430",
            "min_date": "2024-11-01",
            "max_date": "2024-11-10"
        }
    }
]

2025-08-25 12:30:32,104 - evaluation_logger_Cross-357 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "London, UK"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Beijing"
        }
    },
    {
        "name": "Search_Hotels",
        "arguments": {
            "arrival_date": "2024-11-01",
            "departure_date": "2024-11-10",
            "dest_id": 447430,
            "search_type": "hotel"
        }
    },
    {
        "name": "Get_Room_Availability",
        "arguments": {
            "hotel_id": "447430",
            "min_date": "2024-11-01",
            "max_date": "2024-11-10"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "PEK.AIRPORT",
            "toId": "LHR.AIRPORT",
            "departDate": "2024-11-01"
        }
    }
]

2025-08-25 12:30:32,105 - evaluation_logger_Cross-357 - INFO - Start compare_single_call: 
{'name': 'Get_Room_Availability', 'arguments': {'hotel_id': '447430', 'max_date': '2024-11-10', 'min_date': '2024-11-01'}}
{'name': 'Get_Room_Availability', 'arguments': {'hotel_id': '447430', 'max_date': '2024-11-10', 'min_date': '2024-11-01'}}
2025-08-25 12:30:32,105 - evaluation_logger_Cross-357 - INFO - Rule-based compare success.
2025-08-25 12:30:32,105 - evaluation_logger_Cross-357 - INFO - Success matched: [{'name': 'Get_Room_Availability', 'arguments': {'hotel_id': '447430', 'max_date': '2024-11-10', 'min_date': '2024-11-01'}}]
2025-08-25 12:30:32,105 - evaluation_logger_Cross-357 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "currency": "USD",
            "lengthsOfStay": [
                {
                    "2024-11-01": 1
                },
                {
                    "2024-11-02": 1
                },
                {
                    "2024-11-03": 1
                },
                {
                    "2024-11-06": 1
                },
                {
                    "2024-11-07": 1
                }
            ],
            "avDates": [
                {
                    "2024-11-01": 1365.47250391969
                },
                {
                    "2024-11-02": 1365.47250391969
                },
                {
                    "2024-11-03": 1365.47250391969
                },
                {
                    "2024-11-06": 1365.47250391969
                },
                {
                    "2024-11-07": 1371.97475393836
                }
            ]
        }
    }
]

2025-08-25 12:30:40,803 - evaluation_logger_Cross-357 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Beijing"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "London"
        }
    }
]

2025-08-25 12:30:40,803 - evaluation_logger_Cross-357 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "London, UK"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Beijing"
        }
    },
    {
        "name": "Search_Hotels",
        "arguments": {
            "arrival_date": "2024-11-01",
            "departure_date": "2024-11-10",
            "dest_id": 447430,
            "search_type": "hotel"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "departDate": "2024-11-01",
            "fromId": "PEK.AIRPORT",
            "toId": "LHR.AIRPORT"
        }
    }
]

2025-08-25 12:30:41,980 - evaluation_logger_Cross-357 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Beijing'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Beijing'}}
2025-08-25 12:30:41,981 - evaluation_logger_Cross-357 - INFO - Rule-based compare success.
2025-08-25 12:30:41,981 - evaluation_logger_Cross-357 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'London'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'London, UK'}}
2025-08-25 12:30:49,504 - evaluation_logger_Cross-357 - DEBUG - LLM-based comparison output: {'is_equal': True, 'reason': "The parameter 'query' in both function calls refers to the same location, 'London'. The addition of 'UK' in Function call 2 is a country suffix, which does not change the meaning of the location. Therefore, both function calls are equivalent."}
2025-08-25 12:30:49,504 - evaluation_logger_Cross-357 - INFO - LLM-based compare success.
2025-08-25 12:30:49,504 - evaluation_logger_Cross-357 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Beijing'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'London, UK'}}]
2025-08-25 12:30:49,504 - evaluation_logger_Cross-357 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "PEK.AIRPORT",
                "type": "AIRPORT",
                "name": "Beijing Capital International Airport",
                "code": "PEK",
                "city": "BJS",
                "cityName": "Beijing",
                "regionName": "Beijing Area",
                "country": "CN",
                "countryName": "China",
                "countryNameShort": "China",
                "distanceToCity": {
                    "value": 24.602654623740822,
                    "unit": "km"
                },
                "parent": "BJS"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "LHR.AIRPORT",
                "type": "AIRPORT",
                "name": "London Heathrow Airport",
                "code": "LHR",
                "city": "LON",
                "cityName": "London",
                "regionName": "Greater London",
                "country": "GB",
                "countryName": "United Kingdom",
                "countryNameShort": "G.B.",
                "distanceToCity": {
                    "value": 22.860934511152355,
                    "unit": "km"
                },
                "parent": "LON"
            }
        ]
    }
]

2025-08-25 12:31:01,258 - evaluation_logger_Cross-357 - INFO - Function Calls: 
[
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "PEK.AIRPORT",
            "toId": "LHR.AIRPORT",
            "departDate": "2024-11-01",
            "sort": "CHEAPEST"
        }
    }
]

2025-08-25 12:31:01,258 - evaluation_logger_Cross-357 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "arrival_date": "2024-11-01",
            "departure_date": "2024-11-10",
            "dest_id": 447430,
            "search_type": "hotel"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "departDate": "2024-11-01",
            "fromId": "PEK.AIRPORT",
            "toId": "LHR.AIRPORT"
        }
    }
]

2025-08-25 12:31:02,001 - evaluation_logger_Cross-357 - INFO - Start compare_single_call: 
{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-01', 'fromId': 'PEK.AIRPORT', 'sort': 'CHEAPEST', 'toId': 'LHR.AIRPORT'}}
{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-01', 'fromId': 'PEK.AIRPORT', 'toId': 'LHR.AIRPORT'}}
2025-08-25 12:31:11,092 - evaluation_logger_Cross-357 - DEBUG - LLM-based comparison output: {'is_equal': True, 'reason': "The only difference between the two function calls is the 'sort' parameter. In Function call 1, 'sort' is set to 'CHEAPEST', which is consistent with the user's request to book the cheapest flight. However, since the 'sort' parameter is not a required parameter and does not affect the equivalence of the function calls in terms of required parameters, both function calls are considered equivalent."}
2025-08-25 12:31:11,092 - evaluation_logger_Cross-357 - INFO - LLM-based compare success.
2025-08-25 12:31:11,092 - evaluation_logger_Cross-357 - INFO - Success matched: [{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-01', 'fromId': 'PEK.AIRPORT', 'toId': 'LHR.AIRPORT'}}]
2025-08-25 12:31:11,093 - evaluation_logger_Cross-357 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "flightOffers": [
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2Q3W6CMBiGr0bPKJQfAZNmYejUSf0Xx1GDpQLqrKF1Ile_DpY27_s8X9KmaSHlXQx1_XQt80IK7SFAziXPU8kA5d_6qVJx5PxS3nI9LSt9NZ5H040BF8tYh7qmFh0mb6yWmqgo6pdHBlKk-b7foaDI-6cKDYA9mbr-OsTtiHKJbOBYvjmZmZFjdMMKTeL3ZBu0liE8Es9lE7h4J-DiLCBuLq-NcXltz8V62YzhrkkE3sWrRVl_LcZPETcbHI3GcD9K3Gj38RmFRoPDp8RNIKI9t5XX7dWMUgQBsF0fts5TgayOqESwew3PJNpid3qIO5XIG3jQbaVG0LI8py_YlVFZ8tucvVAY-Jarqe_hP6atHXpmmDLpWZmCnhWonRNDZdFmSpYTVUfizVTRrjKSDWzmKWJEMx2fKToRW2VJIDDA38EzmR1UNSQr7seH9wtZbSDcxQEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "PEK",
                                "name": "Beijing Capital International Airport",
                                "city": "BJS",
                                "cityName": "Beijing",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Hebei"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LHR",
                                "name": "London Heathrow Airport",
                                "city": "LON",
                                "cityName": "London",
                                "country": "GB",
                                "countryName": "United Kingdom",
                                "province": "Greater London"
                            },
                            "departureTime": "2024-11-01T14:40:00",
                            "arrivalTime": "2024-11-01T17:50:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-01T14:40:00",
                                    "arrivalTime": "2024-11-01T17:50:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "PEK",
                                        "name": "Beijing Capital International Airport",
                                        "city": "BJS",
                                        "cityName": "Beijing",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Hebei"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LHR",
                                        "name": "London Heathrow Airport",
                                        "city": "LON",
                                        "cityName": "London",
                                        "country": "GB",
                                        "countryName": "United Kingdom",
                                        "province": "Greater London"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 937,
                                        "planeType": "773",
                                        "carrierInfo": {
                                            "operatingCarrier": "CA",
                                            "marketingCarrier": "CA"
                                        }
                                    },
                                    "carriers": [
                                        "CA",
                                        "CA"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Air China",
                                            "code": "CA"
                                        },
                                        {
                                            "name": "Air China",
                                            "code": "CA"
                                        }
                                    ],
                                    "totalTime": 40200,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "777"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet"
                                            ]
                                        }
                                    ],
                                    "departureTerminal": "3",
                                    "arrivalTerminal": "2"
                                }
                            ],
                            "totalTime": 40200,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QW2_CIBiGf812V1p6sMWELKa66iz1XPWKVKQHdbIU5qG_ftgukPd9no_ABaVSP7JvmvmlKkoljV8JCqFEkSkOmPg281rHQYhzdS3MrKrN-Wgaj5cWTGapCU1DL9bff_CHMmTN8Ht14CDDBkKoQ8lw8E817gE3GvtoEZJ2xITCLvAcZEcTO_bsbljjKA1QNGztiMlQ3mfNwCdrCZOThKQ5P5fW-bk6lYtZM4LrZi_JOp0n1WOXjO4ybZYkHo7gZrj34_XnVxxaDQnvijQDGW_gTvujfZozhiEAro9g6yKT2OmIKQytDo8Kr4g_3qadvg5sK_Bae2DoOJolv3CmKnGd8icOB4HnGfp_xM12jfTNDjPeqy1fw5sz0Lugls6yzYzGSNeBBhNdrKsjzQ_cDzRxatgZ62nKqauzohBY4HXxRCdbXQ0tkLBv7A_mnzG0xgEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "PEK",
                                "name": "Beijing Capital International Airport",
                                "city": "BJS",
                                "cityName": "Beijing",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Hebei"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LHR",
                                "name": "London Heathrow Airport",
                                "city": "LON",
                                "cityName": "London",
                                "country": "GB",
                                "countryName": "United Kingdom",
                                "province": "Greater London"
                            },
                            "departureTime": "2024-11-01T12:45:00",
                            "arrivalTime": "2024-11-01T15:55:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-01T12:45:00",
                                    "arrivalTime": "2024-11-01T15:55:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "PEK",
                                        "name": "Beijing Capital International Airport",
                                        "city": "BJS",
                                        "cityName": "Beijing",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Hebei"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LHR",
                                        "name": "London Heathrow Airport",
                                        "city": "LON",
                                        "cityName": "London",
                                        "country": "GB",
                                        "countryName": "United Kingdom",
                                        "province": "Greater London"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 855,
                                        "planeType": "359",
                                        "carrierInfo": {
                                            "operatingCarrier": "CA",
                                            "marketingCarrier": "CA"
                                        }
                                    },
                                    "carriers": [
                                        "CA",
                                        "CA"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Air China",
                                            "code": "CA"
                                        },
                                        {
                                            "name": "Air China",
                                            "code": "CA"
                                        }
                                    ],
                                    "totalTime": 40200,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A350"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "free"
                                        }
                                    ],
                                    "departureTerminal": "3",
                                    "arrivalTerminal": "2"
                                }
                            ],
                            "totalTime": 40200,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_z2Qb2-rIBTGP832ThTEoUvIsqtd_0nXe2vb9L4hllrr3MYibLV--p1pswDn-T0POUA4Wfth7l33-FqVJ2ucT4NKbXWZ2wIp_eYeGyh7revqvXTzqnGXo3k6-efhxfPGxa4DQ93vHorWOqZR_LbaFyjnThRFAxrF8Wg-vpqG3yE6nrDobyz6SGnLKQr8iIynJI38IWz4eDnP_s96d-AiPp-fu0cjMuOniWLiRRlYTHSgtWGLTASiPsxErek6M-1iHZI0GeGs20HPn624nFvxtOt-snWyY2n2NEtjr4NzL2KzNsKDvdhr--sKBS9GiLII917nhrOQDKwsx9f4YPlKsMl2M1jLme-HrDctx8DBrSleC2Ur_T4vLnwV07sgdODj9BehzkrOEurjX7-4ITEOuvwcYqAb_xFmKT3kgZ6umstJgpY_tJfhFEQNcpA5oYQAFRJ7RaiAjpJCrSRGQ--LnG5BOqnqi1Vf38lZgZz3AQAA",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "PEK",
                                "name": "Beijing Capital International Airport",
                                "city": "BJS",
                                "cityName": "Beijing",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Hebei"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LHR",
                                "name": "London Heathrow Airport",
                                "city": "LON",
                                "cityName": "London",
                                "country": "GB",
                                "countryName": "United Kingdom",
                                "province": "Greater London"
                            },
                            "departureTime": "2024-11-01T10:25:00",
                            "arrivalTime": "2024-11-01T19:00:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-01T10:25:00",
                                    "arrivalTime": "2024-11-01T12:00:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "PEK",
                                        "name": "Beijing Capital International Airport",
                                        "city": "BJS",
                                        "cityName": "Beijing",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Hebei"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "TAO",
                                        "name": "Qingdao Jiaodong International Airport",
                                        "city": "TAO",
                                        "cityName": "Qingdao",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Shandong"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 4658,
                                        "carrierInfo": {
                                            "operatingCarrier": "SC",
                                            "marketingCarrier": "SC"
                                        }
                                    },
                                    "carriers": [
                                        "SC",
                                        "SC"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Shandong Airlines",
                                            "code": "SC"
                                        },
                                        {
                                            "name": "Shandong Airlines",
                                            "code": "SC"
                                        }
                                    ],
                                    "totalTime": 5700,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "737"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "light_meal"
                                        }
                                    ],
                                    "vi": {
                                        "protected": true,
                                        "baggageCollection": true
                                    }
                                },
                                {
                                    "departureTime": "2024-11-01T15:00:00",
                                    "arrivalTime": "2024-11-01T19:00:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "TAO",
                                        "name": "Qingdao Jiaodong International Airport",
                                        "city": "TAO",
                                        "cityName": "Qingdao",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Shandong"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LHR",
                                        "name": "London Heathrow Airport",
                                        "city": "LON",
                                        "cityName": "London",
                                        "country": "GB",
                                        "countryName": "United Kingdom",
                                        "province": "Greater London"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 431,
                                        "carrierInfo": {
                                            "operatingCarrier": "JD",
                                            "marketingCarrier": "JD"
                                        }
                                    },
                                    "carriers": [
                                        "JD",
                                        "JD"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Beijing Capital Airlines",
                                            "code": "JD"
                                        },
                                        {
                                            "name": "Beijing Capital Airlines",
                                            "code": "JD"
                                        }
                                    ],
                                    "totalTime": 43200,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A330"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 59700,
                            "isAtolProtected": false,
                            "isVirtualInterlining": true,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_z2Q0U7CMBSGnwbu1rXdYJ1JY3AgQ9Yhbg71phmljIlas1Y3eXorI6Yn5_v-k7RNezDmU1-57v6trg5GO18aVMqoqjQSCPXu7hvbtkod64_KLevGvZ8tk_gBonRVuMh17BJXz9eyM45uBB3WWwlK6oRh2KsWlFysoWPgz-MgXEfsPBLKUB-MvBDPFzhBuB82dJ7d3C7zc9pRFrXt6jTRbKotZ0H6ug7SnI3YcXfHjsrPc92ljwQn0xnKT8-6OD2w5FbAPGq7tJjg1Q_ssqw1zJ6R5KxNIhRv_vJ64E1tna-RQlAEgB-E6JxVqanXmzAUwV53hmYsiDdFHw0dE4j7d3YUeR4ZDbV8k8LU6mMpf2gWhTAkjv0r9Y19J-cvMSHBfy4GOELjz-8DhNYG3sRWxSGAlocLSx4tAHuytuVkYSF67HhJPCGsSe5gPC6t7blve80R6Pe-8sXG4sRl1Qqv-wVXZ7uI6gEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "PEK",
                                "name": "Beijing Capital International Airport",
                                "city": "BJS",
                                "cityName": "Beijing",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Hebei"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LHR",
                                "name": "London Heathrow Airport",
                                "city": "LON",
                                "cityName": "London",
                                "country": "GB",
                                "countryName": "United Kingdom",
                                "province": "Greater London"
                            },
                            "departureTime": "2024-11-01T07:30:00",
                            "arrivalTime": "2024-11-01T19:10:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-01T07:30:00",
                                    "arrivalTime": "2024-11-01T11:00:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "PEK",
                                        "name": "Beijing Capital International Airport",
                                        "city": "BJS",
                                        "cityName": "Beijing",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Hebei"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "SZX",
                                        "name": "Shenzhen Bao'an International Airport",
                                        "city": "SZX",
                                        "cityName": "Shenzhen",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Guangdong"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 9098,
                                        "planeType": "321",
                                        "carrierInfo": {
                                            "operatingCarrier": "ZH",
                                            "marketingCarrier": "SC",
                                            "operatingCarrierDisclosureText": "Shenzhen  Airlines"
                                        }
                                    },
                                    "carriers": [
                                        "SC",
                                        "ZH"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Shandong Airlines",
                                            "code": "SC"
                                        },
                                        {
                                            "name": "Shenzhen  Airlines",
                                            "code": "ZH"
                                        }
                                    ],
                                    "totalTime": 12600,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A321"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "usb_port"
                                            ]
                                        }
                                    ],
                                    "departureTerminal": "3"
                                },
                                {
                                    "departureTime": "2024-11-01T13:45:00",
                                    "arrivalTime": "2024-11-01T19:10:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "SZX",
                                        "name": "Shenzhen Bao'an International Airport",
                                        "city": "SZX",
                                        "cityName": "Shenzhen",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Guangdong"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LHR",
                                        "name": "London Heathrow Airport",
                                        "city": "LON",
                                        "cityName": "London",
                                        "country": "GB",
                                        "countryName": "United Kingdom",
                                        "province": "Greater London"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 887,
                                        "planeType": "330",
                                        "carrierInfo": {
                                            "operatingCarrier": "ZH",
                                            "marketingCarrier": "ZH"
                                        }
                                    },
                                    "carriers": [
                                        "ZH",
                                        "ZH"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Shenzhen  Airlines",
                                            "code": "ZH"
                                        },
                                        {
                                            "name": "Shenzhen  Airlines",
                                            "code": "ZH"
                                        }
                                    ],
                                    "totalTime": 48300,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A330"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        }
                                    ],
                                    "arrivalTerminal": "2"
                                }
                            ],
                            "totalTime": 70800,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_z1Q3VKrMBB-Gr0jEAgn4EzmjNJKK6S2ltrTqwwESrHaOCRaytO7QudMNvv9JLubycGYT31n2_v3pj4YbX1pVCuj6txUSKoPe99CKpQ6NqfazpvWXk6TdPbi4MXzq41tC5a82_2tOmPpVrLbpqhQzqwwDEeqJcPTJL6Klv1BJJ7RcBXxwZLKMIJ8L3TjuZuGZDRbFi8f_r3QQZWMR-fzc3-veWaSdCIpf5MaNuXZEZDTRcZ9fiyf-FGRTaa7xSZw08kUZ_0Oah62_HLu-OOu__U2kx1Ns8enNHJ66HtZbaCHA2eR0w3jKgkvRojQEA9a5ZrRwB25NAxf7dKwNaez7esoDQswocEgOoY9L_BvdfVeSdOoU1Jd2DryPeJZ8HHq2yXWWsRrGgb0v7G8cSMcNJc6p8BuvHuIWjjIATxcMReJg1YZsEIEcwA5QikKnzi_NyqBcV5IYHtBIDcCo7H2Tcy3AL0oG31q8x-MI2n3-AEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "PEK",
                                "name": "Beijing Capital International Airport",
                                "city": "BJS",
                                "cityName": "Beijing",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Hebei"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LHR",
                                "name": "London Heathrow Airport",
                                "city": "LON",
                                "cityName": "London",
                                "country": "GB",
                                "countryName": "United Kingdom",
                                "province": "Greater London"
                            },
                            "departureTime": "2024-11-01T12:00:00",
                            "arrivalTime": "2024-11-01T19:40:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-01T12:00:00",
                                    "arrivalTime": "2024-11-01T14:20:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "PEK",
                                        "name": "Beijing Capital International Airport",
                                        "city": "BJS",
                                        "cityName": "Beijing",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Hebei"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "XIY",
                                        "name": "Xi'an Xianyang International Airport",
                                        "city": "SIA",
                                        "cityName": "Xi'an",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Shaanxi"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 5343,
                                        "carrierInfo": {
                                            "operatingCarrier": "CA",
                                            "marketingCarrier": "SC"
                                        }
                                    },
                                    "carriers": [
                                        "SC",
                                        "CA"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Shandong Airlines",
                                            "code": "SC"
                                        },
                                        {
                                            "name": "Air China",
                                            "code": "CA"
                                        }
                                    ],
                                    "totalTime": 8400,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "737"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        }
                                    ],
                                    "vi": {
                                        "protected": true,
                                        "baggageCollection": true
                                    }
                                },
                                {
                                    "departureTime": "2024-11-01T16:05:00",
                                    "arrivalTime": "2024-11-01T19:40:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "XIY",
                                        "name": "Xi'an Xianyang International Airport",
                                        "city": "SIA",
                                        "cityName": "Xi'an",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Shaanxi"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LHR",
                                        "name": "London Heathrow Airport",
                                        "city": "LON",
                                        "cityName": "London",
                                        "country": "GB",
                                        "countryName": "United Kingdom",
                                        "province": "Greater London"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 7987,
                                        "carrierInfo": {
                                            "operatingCarrier": "GS",
                                            "marketingCarrier": "GS"
                                        }
                                    },
                                    "carriers": [
                                        "GS",
                                        "GS"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Tianjin Airlines",
                                            "code": "GS"
                                        },
                                        {
                                            "name": "Tianjin Airlines",
                                            "code": "GS"
                                        }
                                    ],
                                    "totalTime": 41700,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A330"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 56400,
                            "isAtolProtected": false,
                            "isVirtualInterlining": true,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                }
            ],
            "flightDeals": [
                {
                    "key": "CHEAPEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_02QbXOiMBSFf439RiC8KHQms2OVIpWggtrxUwaRd9vskGwRfv3eirPbuZmc85wkN5mUUv4Wz6qaX6uilEL5I1DBJS8SmaGUf6h5C9OZ86b6LNSkatWtuw5WkYbDzVHFqgKVPp9-ZTepiDYlT9U5QwlRHMcZrUgJdtfeA1oyRaa3mjm7Bb1HKZfERJbh6J6vB852DFvihQfPX97pQuii64LlXNClGDXubhutEXEt-rDv-nAQPQWlg8B0aPpIa_q4LqPN4OL9cBJ0f9yGVXejr6chWLrdsabf2S6shaSHRgR7Cn1fD9GiGyJYC_buxBgvz1J4P0LmzMF35okgM1sffSoJfsQXSWI6W70fR5RkapnWuO1GsGHY1pPIrlkqK_65znpCDxbGtgLfyL90U3lhEJjGP47Y3DccYH3kGBi6_OeJvihq_SMvwUyMOYyCaehe4MsfPmG7DcLGC1rFKHyH4MxsHyRl9hvIhdl5gqfgMoY1PdHB5cyEuWL40aJm_vfBgV2s65fQ_gIo0M2uMwIAAA..",
                    "price": {
                        "currencyCode": "USD",
                        "units": 654,
                        "nanos": 520000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 654,
                                    "nanos": 520000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 311,
                                    "nanos": 660000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 342,
                                    "nanos": 860000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 655
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 654,
                                    "nanos": 520000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 655
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "FASTEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2Q3W6CMBiGr0bPKJQfAZNmYejUSf0Xx1GDpQLqrKF1Ile_DpY27_s8X9KmaSHlXQx1_XQt80IK7SFAziXPU8kA5d_6qVJx5PxS3nI9LSt9NZ5H040BF8tYh7qmFh0mb6yWmqgo6pdHBlKk-b7foaDI-6cKDYA9mbr-OsTtiHKJbOBYvjmZmZFjdMMKTeL3ZBu0liE8Es9lE7h4J-DiLCBuLq-NcXltz8V62YzhrkkE3sWrRVl_LcZPETcbHI3GcD9K3Gj38RmFRoPDp8RNIKI9t5XX7dWMUgQBsF0fts5TgayOqESwew3PJNpid3qIO5XIG3jQbaVG0LI8py_YlVFZ8tucvVAY-Jarqe_hP6atHXpmmDLpWZmCnhWonRNDZdFmSpYTVUfizVTRrjKSDWzmKWJEMx2fKToRW2VJIDDA38EzmR1UNSQr7seH9wtZbSDcxQEAAA..",
                    "price": {
                        "currencyCode": "USD",
                        "units": 868,
                        "nanos": 170000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 868,
                                    "nanos": 170000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 687,
                                    "nanos": 370000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 180,
                                    "nanos": 800000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 869
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 868,
                                    "nanos": 170000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 869
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "BEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2Q3W6CMBiGr0bPKJQfAZNmYejUSf0Xx1GDpQLqrKF1Ile_DpY27_s8X9KmaSHlXQx1_XQt80IK7SFAziXPU8kA5d_6qVJx5PxS3nI9LSt9NZ5H040BF8tYh7qmFh0mb6yWmqgo6pdHBlKk-b7foaDI-6cKDYA9mbr-OsTtiHKJbOBYvjmZmZFjdMMKTeL3ZBu0liE8Es9lE7h4J-DiLCBuLq-NcXltz8V62YzhrkkE3sWrRVl_LcZPETcbHI3GcD9K3Gj38RmFRoPDp8RNIKI9t5XX7dWMUgQBsF0fts5TgayOqESwew3PJNpid3qIO5XIG3jQbaVG0LI8py_YlVFZ8tucvVAY-Jarqe_hP6atHXpmmDLpWZmCnhWonRNDZdFmSpYTVUfizVTRrjKSDWzmKWJEMx2fKToRW2VJIDDA38EzmR1UNSQr7seH9wtZbSDcxQEAAA..",
                    "price": {
                        "currencyCode": "USD",
                        "units": 868,
                        "nanos": 170000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 868,
                                    "nanos": 170000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 687,
                                    "nanos": 370000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 180,
                                    "nanos": 800000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 869
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 868,
                                    "nanos": 170000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 869
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                }
            ],
            "atolProtectedStatus": "NONE",
            "searchId": "7065D9A1DC0A1D32575F8B3D97BDC13F",
            "displayOptions": {
                "brandedFaresShownByDefault": false,
                "directFlightsOnlyFilterIgnored": false,
                "hideFlexiblePricesBanner": false
            },
            "isOffersCabinClassExtended": false,
            "searchCriteria": {
                "cabinClass": "ECONOMY"
            }
        }
    }
]

2025-08-25 12:34:22,339 - evaluation_logger_Cross-357 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

> 友情提示：本文，基于 Spring Boot 2.1.4 版本。

在 Spring Boot 应用中，我们经常会使用在 `application.yml` 或 `application.properties` 配置文件中，添加应用相关的自定义配置。例如说，RocketMQ 的配置。此时，我们会在配置文件中，添加如下自定义配置：

```yml
rocketmq:
  name-server: 127.0.0.1:9876
  producer:
    group: demo-producer-group
```

然后，在应用中，我们可以通过 `@Value` 注解，来获取对应的配置值。例如说：

```java
@Value("${rocketmq.name-server}")
private String nameServer;
```

但是，如此配置的情况下，IDEA 会提示 `Cannot resolve configuration property 'rocketmq.name-server'` 的警告。警告归警告，本身应用是可以正常启动的。

不过，有没有方法可以解决呢？答案是有的。通过 Spring Boot 提供的 `@ConfigurationProperties` 注解，可以解决这个问题。并且，它可以将配置映射成一个配置类，使用起来会更加方便。

下面，我们开始示例。

# 2. 快速入门

> 示例代码对应仓库：[lab-47-demo](https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-47/lab-47-demo) 。

在本小节，我们会编写一个非常简单的示例，演示如何使用 `@ConfigurationProperties` 注解。

## 2.1 引入依赖

在 [`pom.xml`](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo/pom.xml) 文件中，主要引入 Spring Boot 相关依赖。代码如下：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>lab-47-demo</artifactId>

    <dependencies>
        <!-- 实现对 Spring MVC 的自动化配置 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- 方便等会写单元测试 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

</project>
```

## 2.2 应用配置文件

在 [`application.yml`](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo/src/main/resources/application.yml) 中，添加自定义配置，如下：

```yml
order:
  pay-timeout-seconds: 120 # 订单支付超时时长，单位：秒。
  create-frequency-seconds: 10 # 订单创建频率，单位：秒
```

## 2.3 OrderProperties

创建 [OrderProperties](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo/src/main/java/cn/iocoder/springboot/lab47/demo/config/OrderProperties.java) 配置类，读取 `order` 配置项。代码如下：

```java
@Component
@ConfigurationProperties(prefix = "order")
public class OrderProperties {

    /**
     * 订单支付超时时长，单位：秒。
     */
    private Integer payTimeoutSeconds;

    /**
     * 订单创建频率，单位：秒
     */
    private Integer createFrequencySeconds;

    // ... 省略 set/get 方法

}
```

- 在类上，添加 `@ConfigurationProperties` 注解，并设置 `prefix` 属性为 `order`。
- 在类上，添加 `@Component` 注解，保证可以被 Spring 扫描到。因为 `@ConfigurationProperties` 注解不会生成 Bean，需要额外添加 `@Component` 注解。当然，我们也可以在配置类上，添加 `@EnableConfigurationProperties` 注解，稍后我们会看到。
- 添加 `payTimeoutSeconds` 和 `createFrequencySeconds` 属性，并添加 set/get 方法。

## 2.4 DemoController

创建 [DemoController](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo/src/main/java/cn/iocoder/springboot/lab47/demo/controller/DemoController.java) 类，提供测试 `@ConfigurationProperties` 注解的 HTTP 接口。代码如下：

```java
@RestController
@RequestMapping("/demo")
public class DemoController {

    @Autowired
    private OrderProperties orderProperties;

    @GetMapping("/test")
    public OrderProperties test() {
        return orderProperties;
    }

}
```

## 2.5 DemoApplication

创建 [DemoApplication](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo/src/main/java/cn/iocoder/springboot/lab47/demo/DemoApplication.java) 类，配置 `@SpringBootApplication` 注解即可。代码如下：

```java
@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

}
```

## 2.6 简单测试

执行 `DemoApplication#main(String[] args)` 方法，启动 Spring Boot 应用。

使用浏览器，访问 http://127.0.0.1:8080/demo/test 接口，返回结果如下。符合预期！

```json
{
    "payTimeoutSeconds": 120,
    "createFrequencySeconds": 10
}
```

## 2.7 进阶测试

在 [OrderProperties](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo/src/main/java/cn/iocoder/springboot/lab47/demo/config/OrderProperties.java) 配置类上，我们并没有添加 `@Component` 注解，而是采用 `@EnableConfigurationProperties` 注解的方式，也是可以work的。

① 修改 OrderProperties 类，**去掉** `@Component` 注解。代码如下：

```java
@ConfigurationProperties(prefix = "order")
public class OrderProperties {

    // ... 省略代码

}
```

② 修改 DemoApplication 类，**添加** `@EnableConfigurationProperties` 注解，并设置 `value` 属性为 OrderProperties 类。代码如下：

```java
@SpringBootApplication
@EnableConfigurationProperties(OrderProperties.class)
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

}
```

执行 `DemoApplication#main(String[] args)` 方法，启动 Spring Boot 应用。

使用浏览器，访问 http://127.0.0.1:8080/demo/test 接口，返回结果如下。符合预期！

```json
{
    "payTimeoutSeconds": 120,
    "createFrequencySeconds": 10
}
```

# 3. 更多功能

> 示例代码对应仓库：[lab-47-demo2](https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-47/lab-47-demo2) 。

在[「2. 快速入门」](https://www.iocoder.cn/Spring-Boot/ConfigurationProperties/?self#)小节中，我们实现了 `@ConfigurationProperties` 注解的快速入门。在本小节，我们来学习 `@ConfigurationProperties` 注解的更多功能。

## 3.1 激活 @ConfigurationProperties

在[「2. 快速入门」](https://www.iocoder.cn/Spring-Boot/ConfigurationProperties/?self#)小节中，我们介绍了两种激活 `@ConfigurationProperties` 的方式：

- 方式一：在配置类上，添加 `@Component` 注解。
- 方式二：在配置类上，添加 `@EnableConfigurationProperties` 注解。

实际上，还有第三种方式，在配置类上，添加 `@Configuration` 注解。例如说，我们修改 [OrderProperties](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo2/src/main/java/cn/iocoder/springboot/lab47/demo/config/OrderProperties.java) 类，代码如下：

```java
@Configuration
@ConfigurationProperties(prefix = "order")
public class OrderProperties {

    // ... 省略代码

}
```

执行 `DemoApplication#main(String[] args)` 方法，启动 Spring Boot 应用。

使用浏览器，访问 http://127.0.0.1:8080/demo/test 接口，返回结果如下。符合预期！

```json
{
    "payTimeoutSeconds": 120,
    "createFrequencySeconds": 10
}
```

## 3.2 复杂类型属性

在[「2. 快速入门」](https://www.iocoder.cn/Spring-Boot/ConfigurationProperties/?self#)小节中，我们配置的属性都是基本类型。实际上，`@ConfigurationProperties` 注解也支持复杂类型，例如说 List、Map 等等。

我们来创建一个 [OrderProperties](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo2/src/main/java/cn/iocoder/springboot/lab47/demo/config/OrderProperties.java) 类，代码如下：

```java
@Component
@ConfigurationProperties(prefix = "order")
public class OrderProperties {

    /**
     * 订单支付超时时长，单位：秒。
     */
    private Integer payTimeoutSeconds;
    /**
     * 订单创建频率，单位：秒
     */
    private Integer createFrequencySeconds;

    // 新增
    /**
     * 配送配置
     */
    private Delivery delivery = new Delivery();

    public static class Delivery {

        /**
         * 配送员
         */
        private String username;
        /**
         * 手机号
         */
        private String mobile;

        // ... 省略 set/get 方法

    }

    // ... 省略 set/get 方法

}
```

- 在 OrderProperties 类中，我们新增了 `delivery` 属性，类型是 Delivery 类。

在 [`application.yml`](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo2/src/main/resources/application.yml) 中，添加 `order.delivery` 配置项，如下：

```yml
order:
  pay-timeout-seconds: 120 # 订单支付超时时长，单位：秒。
  create-frequency-seconds: 10 # 订单创建频率，单位：秒
  delivery:
    username: yudaoyuanma
    mobile: 1234567890
```

执行 `DemoApplication#main(String[] args)` 方法，启动 Spring Boot 应用。

使用浏览器，访问 http://127.0.0.1:8080/demo/test 接口，返回结果如下。符合预期！

```json
{
    "payTimeoutSeconds": 120,
    "createFrequencySeconds": 10,
    "delivery": {
        "username": "yudaoyuanma",
        "mobile": "1234567890"
    }
}
```

## 3.3 属性校验

`@ConfigurationProperties` 注解，支持使用 `javax.validation` 注解，对配置的属性进行校验。

我们来修改 [OrderProperties](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo2/src/main/java/cn/iocoder/springboot/lab47/demo/config/OrderProperties.java) 类，增加 `@Validated` 和 `@NotNull` 注解，代码如下：

```java
@Component
@Validated // 增加
@ConfigurationProperties(prefix = "order")
public class OrderProperties {

    /**
     * 订单支付超时时长，单位：秒。
     */
    @NotNull // 增加
    private Integer payTimeoutSeconds;

    // ... 省略代码

}
```

- 在类上，添加 `@Validated` 注解，表示开启校验。
- 在 `payTimeoutSeconds` 属性上，添加 `@NotNull` 注解，表示不能为空。

此时，因为我们在配置文件中，已经配置了 `order.pay-timeout-seconds` 配置项，所以应用可以正常启动。

如果我们把 `order.pay-timeout-seconds` 配置项**删除**，此时应用会启动失败，报错如下：

```
***************************
APPLICATION FAILED TO START
***************************

Description:

Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'order' to cn.iocoder.springboot.lab47.demo.config.OrderProperties failed:

    Property: order.payTimeoutSeconds
    Value: null
    Reason: 不能为null


Action:

Update your application's configuration
```

## 3.4 自定义转换器

`@ConfigurationProperties` 注解，支持自定义转换器，实现 String 类型到指定类型的转换。

我们来创建一个 [OrderProperties](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo2/src/main/java/cn/iocoder/springboot/lab47/demo/config/OrderProperties.java) 类，增加 `demo` 属性，类型为 Demo 类。代码如下：

```java
@Component
@Validated
@ConfigurationProperties(prefix = "order")
public class OrderProperties {

    // ... 省略已有的属性

    /**
     * 示例属性
     */
    private Demo demo;

    public static class Demo {

        private String value;

        // ... 省略 set/get 方法

    }

    // ... 省略 set/get 方法

}
```

- 在 OrderProperties 类中，我们新增了 `demo` 属性，类型是 Demo 类。

在 [`application.yml`](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo2/src/main/resources/application.yml) 中，添加 `order.demo` 配置项，如下：

```yml
order:
  demo: hahaha
```

此时，我们希望将 `hahaha` 字符串，转换成 Demo 对象，其中 `value` 属性为 `hahaha`。

那么，我们需要创建一个自定义转换器 [DemoConverter](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo2/src/main/java/cn/iocoder/springboot/lab47/demo/core/DemoConverter.java) 类，实现 Converter 接口。代码如下：

```java
public class DemoConverter implements Converter<String, OrderProperties.Demo> {

    @Override
    public OrderProperties.Demo convert(String source) {
        OrderProperties.Demo demo = new OrderProperties.Demo();
        demo.setValue(source);
        return demo;
    }

}
```

- 实现 `org.springframework.core.convert.converter.Converter` 接口，实现 `#convert(String source)` 方法，将 String 转换成 Demo 对象。

然后，我们需要在 [DemoApplication](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-47/lab-47-demo2/src/main/java/cn/iocoder/springboot/lab47/demo/DemoApplication.java) 类中，添加 `@ConfigurationPropertiesScan` 注解，并配置 `conversionService` 属性。代码如下：

```java
@SpringBootApplication
@ConfigurationPropertiesScan(
        basePackages = "cn.iocoder.springboot.lab47.demo.config",
        conversionService = CustomConversionService.class
)
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

    @Component
    public static class CustomConversionService implements ConversionService {

        private final ConversionService conversionService;

        public CustomConversionService() {
            // 创建 Converters 集合
            Set<Converter<?, ?>> converters = new HashSet<>();
            converters.add(new DemoConverter());
            // 创建 ConversionService
            this.conversionService = new DefaultConversionService();
            ((DefaultConversionService) this.conversionService).addConverters(converters);
        }

        @Override
        public boolean canConvert(Class<?> sourceType, Class<?> targetType) {
            return conversionService.canConvert(sourceType, targetType);
        }

        @Override
        public boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {
            return conversionService.canConvert(sourceType, targetType);
        }

        @Override
        public <T> T convert(Object source, Class<T> targetType) {
            return conversionService.convert(source, targetType);
        }

        @Override
        public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {
            return conversionService.convert(source, sourceType, targetType);
        }

    }

}
```

- 在类上，添加 `@ConfigurationPropertiesScan` 注解，并设置 `basePackages` 属性为 `cn.iocoder.springboot.lab47.demo.config` 包，`conversionService` 属性为 CustomConversionService 类。
- 创建 CustomConversionService 类，实现 `org.springframework.core.convert.ConversionService` 接口，并添加 `@Component` 注解。
  - 在构造方法中，创建 DefaultConversionService 对象，并添加 DemoConverter 转换器。
  - 实现 ConversionService 接口的所有方法，委托给 `conversionService` 属性。

执行 `DemoApplication#main(String[] args)` 方法，启动 Spring Boot 应用。

使用浏览器，访问 http://127.0.0.1:8080/demo/test 接口，返回结果如下。符合预期！

```json
{
    "payTimeoutSeconds": 120,
    "createFrequencySeconds": 10,
    "delivery": {
        "username": "yudaoyuanma",
        "mobile": "1234567890"
    },
    "demo": {
        "value": "hahaha"
    }
}
```

## 3.5 JSR-303 配置提示

在[「2. 快速入门」](https://www.iocoder.cn/Spring-Boot/ConfigurationProperties/?self#)小节中，我们提到 IDEA 会有 `Cannot resolve configuration property 'rocketmq.name-server'` 的警告。我们可以通过 `@ConfigurationProperties` 注解，解决这个问题。

但是，如果我们想要 IDEA

2025-08-25 12:34:27,758 - evaluation_logger_Cross-357 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any of the requested information in the user's query."}
2025-08-25 12:34:33,669 - evaluation_logger_Cross-357 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:34:33,669 - evaluation_logger_Cross-357 - INFO - Message: Success.
2025-08-25 12:34:33,669 - evaluation_logger_Cross-357 - INFO - Success turn num = 4
2025-08-25 12:34:33,669 - evaluation_logger_Cross-357 - INFO - ----------------------------------------------------------------------------------------------------
