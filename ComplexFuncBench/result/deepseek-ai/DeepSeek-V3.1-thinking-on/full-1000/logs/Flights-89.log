2025-08-25 13:36:40,864 - evaluation_logger_Flights-89 - INFO - Test Example Flights-89
2025-08-25 13:36:40,864 - evaluation_logger_Flights-89 - INFO - Query: We need to go to Washington for a meeting. We're planning to fly from Wuhan to Washington around November 10, 2024. Check the cheapest economy class ticket price from Wuhan to Washington around that time. If it’s more than $400, check if it’s cheaper to transfer at Philadelphia International Airport. Overnight transfer flights are not accepted.
2025-08-25 13:36:49,945 - evaluation_logger_Flights-89 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Wuhan"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Washington"
        }
    }
]

2025-08-25 13:36:49,945 - evaluation_logger_Flights-89 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Wuhan"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Washington"
        }
    },
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "ECONOMY",
            "fromId": "WUH.AIRPORT",
            "toId": "WAS.CITY",
            "departDate": "2024-11-10"
        }
    }
]

2025-08-25 13:36:49,945 - evaluation_logger_Flights-89 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Wuhan'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Wuhan'}}
2025-08-25 13:36:49,945 - evaluation_logger_Flights-89 - INFO - Rule-based compare success.
2025-08-25 13:36:49,945 - evaluation_logger_Flights-89 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Washington'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Washington'}}
2025-08-25 13:36:49,945 - evaluation_logger_Flights-89 - INFO - Rule-based compare success.
2025-08-25 13:36:49,945 - evaluation_logger_Flights-89 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Wuhan'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Washington'}}]
2025-08-25 13:36:49,945 - evaluation_logger_Flights-89 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "WUH.AIRPORT",
                "type": "AIRPORT",
                "name": "Wuhan Tianhe International Airport",
                "code": "WUH",
                "city": "WUH",
                "cityName": "Wuhan",
                "regionName": "Hubei",
                "country": "CN",
                "countryName": "China",
                "countryNameShort": "China",
                "distanceToCity": {
                    "value": 21.846946583477738,
                    "unit": "km"
                },
                "parent": "WUH"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "WAS.CITY",
                "type": "CITY",
                "name": "Washington",
                "code": "WAS",
                "regionName": "District of Columbia",
                "country": "US",
                "countryName": "United States"
            }
        ]
    }
]

2025-08-25 13:36:59,856 - evaluation_logger_Flights-89 - INFO - Function Calls: 
[
    {
        "name": "Get_Min_Price",
        "arguments": {
            "fromId": "WUH.AIRPORT",
            "toId": "WAS.CITY",
            "departDate": "2024-11-10",
            "cabinClass": "ECONOMY"
        }
    }
]

2025-08-25 13:36:59,856 - evaluation_logger_Flights-89 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "ECONOMY",
            "departDate": "2024-11-10",
            "fromId": "WUH.AIRPORT",
            "toId": "WAS.CITY"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Philadelphia International Airport"
        }
    }
]

2025-08-25 13:36:59,856 - evaluation_logger_Flights-89 - INFO - Start compare_single_call: 
{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'ECONOMY', 'departDate': '2024-11-10', 'fromId': 'WUH.AIRPORT', 'toId': 'WAS.CITY'}}
{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'ECONOMY', 'departDate': '2024-11-10', 'fromId': 'WUH.AIRPORT', 'toId': 'WAS.CITY'}}
2025-08-25 13:36:59,856 - evaluation_logger_Flights-89 - INFO - Rule-based compare success.
2025-08-25 13:36:59,856 - evaluation_logger_Flights-89 - INFO - Success matched: [{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'ECONOMY', 'departDate': '2024-11-10', 'fromId': 'WUH.AIRPORT', 'toId': 'WAS.CITY'}}]
2025-08-25 13:36:59,856 - evaluation_logger_Flights-89 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "timestamp": 1729565062150,
        "data": [
            {
                "departureDate": "2024-11-05",
                "searchDates": [
                    "2024-11-05"
                ],
                "offsetDays": -5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 509,
                    "nanos": 180000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 510,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-06",
                "searchDates": [
                    "2024-11-06"
                ],
                "offsetDays": -4,
                "isCheapest": true,
                "price": {
                    "currencyCode": "USD",
                    "units": 480,
                    "nanos": 50000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 481,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-07",
                "searchDates": [
                    "2024-11-07"
                ],
                "offsetDays": -3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 764,
                    "nanos": 450000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 765,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-08",
                "searchDates": [
                    "2024-11-08"
                ],
                "offsetDays": -2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 485,
                    "nanos": 620000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 486,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-09",
                "searchDates": [
                    "2024-11-09"
                ],
                "offsetDays": -1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 670,
                    "nanos": 590000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 671,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-10",
                "searchDates": [
                    "2024-11-10"
                ],
                "offsetDays": 0,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 632,
                    "nanos": 450000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 633,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-11",
                "searchDates": [
                    "2024-11-11"
                ],
                "offsetDays": 1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 541,
                    "nanos": 440000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 542,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-12",
                "searchDates": [
                    "2024-11-12"
                ],
                "offsetDays": 2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 578,
                    "nanos": 300000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 579,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-13",
                "searchDates": [
                    "2024-11-13"
                ],
                "offsetDays": 3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 769,
                    "nanos": 510000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 770,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-14",
                "searchDates": [
                    "2024-11-14"
                ],
                "offsetDays": 4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 604,
                    "nanos": 70000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 605,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-15",
                "searchDates": [
                    "2024-11-15"
                ],
                "offsetDays": 5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 765,
                    "nanos": 690000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 766,
                    "nanos": 0
                }
            }
        ]
    }
]

2025-08-25 13:37:08,088 - evaluation_logger_Flights-89 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Philadelphia International Airport"
        }
    }
]

2025-08-25 13:37:08,088 - evaluation_logger_Flights-89 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Philadelphia International Airport"
        }
    },
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "ECONOMY",
            "legs": [
                {
                    "fromId": "WUH.AIRPORT",
                    "toId": "PHL.AIRPORT",
                    "date": "2024-11-10"
                },
                {
                    "fromId": "PHL.AIRPORT",
                    "toId": "WAS.CITY",
                    "date": "2024-11-10"
                }
            ]
        }
    }
]

2025-08-25 13:37:08,088 - evaluation_logger_Flights-89 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Philadelphia International Airport'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Philadelphia International Airport'}}
2025-08-25 13:37:08,088 - evaluation_logger_Flights-89 - INFO - Rule-based compare success.
2025-08-25 13:37:08,088 - evaluation_logger_Flights-89 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Philadelphia International Airport'}}]
2025-08-25 13:37:08,088 - evaluation_logger_Flights-89 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "PHL.AIRPORT",
                "type": "AIRPORT",
                "name": "Philadelphia International Airport",
                "code": "PHL",
                "city": "PHL",
                "cityName": "Philadelphia",
                "regionName": "Pennsylvania",
                "country": "US",
                "countryName": "United States",
                "countryNameShort": "US",
                "distanceToCity": {
                    "value": 10.728897978011878,
                    "unit": "km"
                },
                "parent": "PHL"
            }
        ]
    }
]

2025-08-25 13:37:20,407 - evaluation_logger_Flights-89 - INFO - Function Calls: 
[
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "ECONOMY",
            "legs": [
                {
                    "fromId": "WUH.AIRPORT",
                    "toId": "PHL.AIRPORT",
                    "date": "2024-11-10"
                },
                {
                    "fromId": "PHL.AIRPORT",
                    "toId": "WAS.CITY",
                    "date": "2024-11-10"
                }
            ]
        }
    }
]

2025-08-25 13:37:20,407 - evaluation_logger_Flights-89 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "ECONOMY",
            "legs": [
                {
                    "fromId": "WUH.AIRPORT",
                    "toId": "PHL.AIRPORT",
                    "date": "2024-11-10"
                },
                {
                    "fromId": "PHL.AIRPORT",
                    "toId": "WAS.CITY",
                    "date": "2024-11-10"
                }
            ]
        }
    }
]

2025-08-25 13:37:20,407 - evaluation_logger_Flights-89 - INFO - Start compare_single_call: 
{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'ECONOMY', 'legs': [{'fromId': 'WUH.AIRPORT', 'toId': 'PHL.AIRPORT', 'date': '2024-11-10'}, {'fromId': 'PHL.AIRPORT', 'toId': 'WAS.CITY', 'date': '2024-11-10'}]}}
{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'ECONOMY', 'legs': [{'fromId': 'WUH.AIRPORT', 'toId': 'PHL.AIRPORT', 'date': '2024-11-10'}, {'fromId': 'PHL.AIRPORT', 'toId': 'WAS.CITY', 'date': '2024-11-10'}]}}
2025-08-25 13:37:20,407 - evaluation_logger_Flights-89 - INFO - Rule-based compare success.
2025-08-25 13:37:20,407 - evaluation_logger_Flights-89 - INFO - Success matched: [{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'ECONOMY', 'legs': [{'fromId': 'WUH.AIRPORT', 'toId': 'PHL.AIRPORT', 'date': '2024-11-10'}, {'fromId': 'PHL.AIRPORT', 'toId': 'WAS.CITY', 'date': '2024-11-10'}]}}]
2025-08-25 13:37:20,407 - evaluation_logger_Flights-89 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "departureDate": "2024-11-06",
                "returnDate": "2024-11-06",
                "searchDates": [
                    "2024-11-06",
                    "2024-11-06"
                ],
                "offsetDays": -4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1023,
                    "nanos": 660000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1024,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-13",
                "returnDate": "2024-11-13",
                "searchDates": [
                    "2024-11-13",
                    "2024-11-13"
                ],
                "offsetDays": 3,
                "isCheapest": true,
                "price": {
                    "currencyCode": "USD",
                    "units": 857,
                    "nanos": 360000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 858,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-15",
                "returnDate": "2024-11-15",
                "searchDates": [
                    "2024-11-15",
                    "2024-11-15"
                ],
                "offsetDays": 5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1051,
                    "nanos": 660000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1052,
                    "nanos": 0
                }
            }
        ]
    }
]

2025-08-25 13:38:45,864 - evaluation_logger_Flights-89 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 前言

在上一篇文章中，我们实现了`axios`的请求和响应配置化，即用户可以配置`url`、`method`、`params`、`data`、`headers`、`timeout`、`responseType`等等。但是在实际使用过程中，我们使用`axios`发送请求的时候，只需要把要请求的`url`和配置项`config`(可选) 作为参数传给`axios`函数就可以了，如：

```javascript
axios({
  url: "/api/addParameters",
  method: "post",
  data: {
    a: 1,
    b: 2,
  },
});
```

而我们在上篇文章中封装的`axios`函数，它却只能接受一个参数`config`，如：

```javascript
axios({
  url: "/api/addParameters",
  method: "post",
  data: {
    a: 1,
    b: 2,
  },
});
```

虽然这样也可以发送请求，但是官方的`axios`还支持以下两种请求方式：

第一种：

```javascript
axios(url[, config])
```

第二种：

```javascript
// 发送 POST 请求
axios({
  method: "post",
  url: "/user/12345",
  data: {
    firstName: "Fred",
    lastName: "Flintstone",
  },
});

// 发送 GET 请求（默认的方法）
axios("/user/12345");
```

所以，接下来，我们也要为我们的`axios`函数增加上述请求方式的功能。

# 2. 需求分析

从上面的三种请求方式可以看出，`axios`函数支持两种形式的参数：

- 第一种：只接受一个参数`config`，该参数里面包含`url`属性以及其他配置项；
- 第二种：接受两个参数`url`和`config`，`url`是请求地址，`config`是其他配置项；

所以，我们要把现在的`axios`函数修改为支持两种参数形式。

# 3. 修改 axios 函数类型

由于我们之前已经在`src/types/index.ts`中的`Axios`接口中定义了`axios`函数的类型，如下：

```typescript
export interface Axios {
  request(config: AxiosRequestConfig): AxiosPromise;

  get(url: string, config?: AxiosRequestConfig): AxiosPromise;

  delete(url: string, config?: AxiosRequestConfig): AxiosPromise;

  head(url: string, config?: AxiosRequestConfig): AxiosPromise;

  options(url: string, config?: AxiosRequestConfig): AxiosPromise;

  post(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;

  put(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;

  patch(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;
}

export interface AxiosInstance extends Axios {
  (config: AxiosRequestConfig): AxiosPromise;
}
```

我们之前只定义了`axios`函数支持一种参数形式，即`(config: AxiosRequestConfig): AxiosPromise`，现在我们要再增加一种参数形式，即`(url: string, config?: AxiosRequestConfig): AxiosPromise`，如下：

```typescript
export interface AxiosInstance extends Axios {
  (config: AxiosRequestConfig): AxiosPromise;
  (url: string, config?: AxiosRequestConfig): AxiosPromise;
}
```

这样，`axios`函数就有两种函数重载。

# 4. 修改 axios 函数实现

之前我们的`axios`函数的实现是直接调用`request`函数，并传入`config`参数，如下：

```typescript
function axios(config: AxiosRequestConfig): AxiosPromise {
  processConfig(config);
  return xhr(config).then(
    (res) => {
      return transformResponseData(res);
    },
    (e) => {
      return transformResponseData(e);
    }
  );
}
```

现在，我们需要修改`axios`函数的实现，让它能够支持两种参数形式。我们首先判断第一个参数`configOrUrl`是不是字符串类型，如果是的话，那说明用户使用的是第二种参数形式，即传入了`url`和`config`两个参数，那么我们就把`configOrUrl`赋值给`config.url`，然后再把第二个参数`config`合并到`config`中。如果`configOrUrl`不是字符串类型，那么说明用户使用的就是第一种参数形式，即只传入了一个`config`对象，那就直接使用这个`config`对象。具体代码如下：

```typescript
function axios(configOrUrl: any, config?: any): AxiosPromise {
  // 如果configOrUrl 是字符串类型，则说明用户传入的是 url 和 config 两个参数
  if (typeof configOrUrl === "string") {
    // 如果第二个参数没传，则config为空对象
    if (!config) {
      config = {};
    }
    // 将url放置到config对象中
    config.url = configOrUrl;
  } else {
    // 如果configOrUrl不是字符串类型，则说明用户传入的是单个config参数
    config = configOrUrl;
  }

  processConfig(config);
  return xhr(config).then(
    (res) => {
      return transformResponseData(res);
    },
    (e) => {
      return transformResponseData(e);
    }
  );
}
```

OK，这样我们就实现了`axios`函数支持两种参数形式。

# 5. 编写 demo

接下来，我们编写 `demo` 来测试下效果如何。

在 `examples/more` 目录下创建 `index.html`:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>More example</title>
  </head>
  <body>
    <script src="/__build__/more.js"></script>
  </body>
</html>
```

再创建 `app.ts` 作为入口文件：

```typescript
import axios from "../../src/axios";

// 第一种调用方式
axios({
  url: "/api/more",
  method: "post",
  data: {
    a: 1,
    b: 2,
  },
});

// 第二种调用方式
axios("/api/more", {
  method: "post",
  data: {
    a: 1,
    b: 2,
  },
});
```

接着在 `server/more.js` 添加路由：

```javascript
router.post("/api/more", function(req, res) {
  res.end("more");
});
```

最后在根目录下的`index.html`中加上启动该`demo`的入口：

```html
<li><a href="examples/more">more</a></li>
```

# 6. 运行 demo

接着我们在命令行中执行：

```bash
# 同时开启客户端和服务端
npm run server | npm start
```

接着我们打开 `chrome` 浏览器，访问 <http://localhost:8000/> 即可访问我们的 `demo` 了，我们点击 `more`，通过`F12`的 `network` 部分我们可以看到发送了两个请求，并且请求的`url`都是`/api/more`，并且请求方法都是`post`，并且请求体都是`{"a":1,"b":2}`，这证明两种请求方式都生效了。

![](~@/axios/08/01.png)

OK，以上就是为 `axios` 函数添加重载。


2025-08-25 13:38:51,459 - evaluation_logger_Flights-89 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any of the requested information in the user's query about flight prices and transfer options."}
2025-08-25 13:38:57,336 - evaluation_logger_Flights-89 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 13:38:57,336 - evaluation_logger_Flights-89 - INFO - Message: Success.
2025-08-25 13:38:57,336 - evaluation_logger_Flights-89 - INFO - Success turn num = 4
2025-08-25 13:38:57,336 - evaluation_logger_Flights-89 - INFO - ----------------------------------------------------------------------------------------------------
