2025-08-25 12:29:58,532 - evaluation_logger_Cross-353 - INFO - Test Example Cross-353
2025-08-25 12:29:58,532 - evaluation_logger_Cross-353 - INFO - Query: I want to know which day in early November 2024 (from November 1st to 10th) has the cheapest room at the Oakwood Premier Tokyo. Book a flight from Guangzhou to Tokyo for that day. If there are multiple days with the lowest price, choose the earliest date.
2025-08-25 12:30:07,820 - evaluation_logger_Cross-353 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Guangzhou"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Tokyo"
        }
    },
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Oakwood Premier Tokyo"
        }
    }
]

2025-08-25 12:30:07,820 - evaluation_logger_Cross-353 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Oakwood Premier Tokyo"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Guangzhou"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Tokyo"
        }
    },
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 1637834,
            "search_type": "hotel",
            "arrival_date": "2024-11-01",
            "departure_date": "2024-11-10"
        }
    }
]

2025-08-25 12:30:07,820 - evaluation_logger_Cross-353 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Guangzhou'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Guangzhou'}}
2025-08-25 12:30:07,820 - evaluation_logger_Cross-353 - INFO - Rule-based compare success.
2025-08-25 12:30:07,820 - evaluation_logger_Cross-353 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Tokyo'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Tokyo'}}
2025-08-25 12:30:07,820 - evaluation_logger_Cross-353 - INFO - Rule-based compare success.
2025-08-25 12:30:07,820 - evaluation_logger_Cross-353 - INFO - Start compare_single_call: 
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Oakwood Premier Tokyo'}}
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Oakwood Premier Tokyo'}}
2025-08-25 12:30:07,820 - evaluation_logger_Cross-353 - INFO - Rule-based compare success.
2025-08-25 12:30:07,820 - evaluation_logger_Cross-353 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Guangzhou'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Tokyo'}}, {'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Oakwood Premier Tokyo'}}]
2025-08-25 12:30:07,821 - evaluation_logger_Cross-353 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "CAN.AIRPORT",
                "type": "AIRPORT",
                "name": "Guangzhou Baiyun International Airport",
                "code": "CAN",
                "city": "CAN",
                "cityName": "Guangzhou",
                "regionName": "Guangdong",
                "country": "CN",
                "countryName": "China",
                "countryNameShort": "China",
                "distanceToCity": {
                    "value": 26.896540374880622,
                    "unit": "km"
                },
                "parent": "CAN"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "NRT.AIRPORT",
                "type": "AIRPORT",
                "name": "Narita International Airport",
                "code": "NRT",
                "city": "TYO",
                "cityName": "Tokyo",
                "regionName": "Tokyo-to",
                "country": "JP",
                "countryName": "Japan",
                "countryNameShort": "Japan",
                "distanceToCity": {
                    "value": 60.02726252337603,
                    "unit": "km"
                },
                "parent": "TYO"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "dest_id": "1637834",
                "search_type": "hotel",
                "label": "Oakwood Premier Tokyo, Tokyo, Tokyo-to, Japan",
                "dest_type": "hotel",
                "region": "Tokyo-to",
                "cc1": "jp",
                "nr_hotels": 1,
                "type": "ho",
                "hotels": 1,
                "latitude": 35.682022,
                "roundtrip": "GgEwIAAoATICZW46FU9ha3dvb2QgUHJlbWllciBUb2t5b0AASgBQAA==",
                "city_ufi": -246227,
                "city_name": "Tokyo",
                "longitude": 139.76936,
                "country": "Japan",
                "name": "Oakwood Premier Tokyo",
                "lc": "en"
            }
        ]
    }
]

2025-08-25 12:30:16,748 - evaluation_logger_Cross-353 - INFO - Function Calls: 
[
    {
        "name": "Get_Room_Availability",
        "arguments": {
            "hotel_id": "1637834",
            "min_date": "2024-11-01",
            "max_date": "2024-11-10"
        }
    }
]

2025-08-25 12:30:16,748 - evaluation_logger_Cross-353 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "arrival_date": "2024-11-01",
            "departure_date": "2024-11-10",
            "dest_id": 1637834,
            "search_type": "hotel"
        }
    },
    {
        "name": "Get_Room_Availability",
        "arguments": {
            "hotel_id": "1637834",
            "min_date": "2024-11-01",
            "max_date": "2024-11-10"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "CAN.AIRPORT",
            "toId": "NRT.AIRPORT",
            "departDate": "2024-11-04"
        }
    }
]

2025-08-25 12:30:16,748 - evaluation_logger_Cross-353 - INFO - Start compare_single_call: 
{'name': 'Get_Room_Availability', 'arguments': {'hotel_id': '1637834', 'max_date': '2024-11-10', 'min_date': '2024-11-01'}}
{'name': 'Get_Room_Availability', 'arguments': {'hotel_id': '1637834', 'max_date': '2024-11-10', 'min_date': '2024-11-01'}}
2025-08-25 12:30:16,748 - evaluation_logger_Cross-353 - INFO - Rule-based compare success.
2025-08-25 12:30:16,748 - evaluation_logger_Cross-353 - INFO - Success matched: [{'name': 'Get_Room_Availability', 'arguments': {'hotel_id': '1637834', 'max_date': '2024-11-10', 'min_date': '2024-11-01'}}]
2025-08-25 12:30:16,748 - evaluation_logger_Cross-353 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "avDates": [
                {
                    "2024-11-01": 979.481897480898
                },
                {
                    "2024-11-02": 999.966635064496
                },
                {
                    "2024-11-03": 695.594969600819
                },
                {
                    "2024-11-04": 675.103716515444
                },
                {
                    "2024-11-05": 675.103716515444
                }
            ],
            "lengthsOfStay": [
                {
                    "2024-11-01": 1
                },
                {
                    "2024-11-02": 1
                },
                {
                    "2024-11-03": 1
                },
                {
                    "2024-11-04": 1
                },
                {
                    "2024-11-05": 1
                }
            ],
            "currency": "USD"
        }
    }
]

2025-08-25 12:30:26,192 - evaluation_logger_Cross-353 - INFO - Function Calls: 
[
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "CAN.AIRPORT",
            "toId": "NRT.AIRPORT",
            "departDate": "2024-11-04"
        }
    }
]

2025-08-25 12:30:26,192 - evaluation_logger_Cross-353 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "arrival_date": "2024-11-01",
            "departure_date": "2024-11-10",
            "dest_id": 1637834,
            "search_type": "hotel"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "departDate": "2024-11-04",
            "fromId": "CAN.AIRPORT",
            "toId": "NRT.AIRPORT"
        }
    }
]

2025-08-25 12:30:26,192 - evaluation_logger_Cross-353 - INFO - Start compare_single_call: 
{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-04', 'fromId': 'CAN.AIRPORT', 'toId': 'NRT.AIRPORT'}}
{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-04', 'fromId': 'CAN.AIRPORT', 'toId': 'NRT.AIRPORT'}}
2025-08-25 12:30:26,192 - evaluation_logger_Cross-353 - INFO - Rule-based compare success.
2025-08-25 12:30:26,192 - evaluation_logger_Cross-353 - INFO - Success matched: [{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-04', 'fromId': 'CAN.AIRPORT', 'toId': 'NRT.AIRPORT'}}]
2025-08-25 12:30:26,193 - evaluation_logger_Cross-353 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "flightOffers": [
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2Qa2-CMBSGf41-o1AuAibNgoKXSGtU8LIvDRZEHLML7abj168D0-a8z3NOTj_0KuWXGOv6pa7KqxTatwAll7zMZAEY_9QvjSpnzj-qe6lnVaNPA0K2iWGT9V6HuqYOG5_eiqfURMPQsDoXIEOa7_s9Coa8FzVoBOz5YhLGE6drMS6RDRzLt1dH19vO-maD5slhN4s7yxGePh7rNhA4FCojl9w2LkmwQyJ5InV-PNzkkUQPsW-3OA4jmIYngZP9htyExGovTmeLeGo847COuicLxhAEwHZ92DnPBLJ6YhJBo8dcoh12l5ugVzWAlm928kTQsjxnKIq6YLLi91Xxi3DquyNPU__Cf0xbm1Ccuq6jGU7v7wNzCketnddXRQMrULekBjBUXl-ZUWguQIgVnqkXq2DU-7ecQmYyT1FBNaeDC7VVrSgE_e6NLg8qWpqdy7JlfxUq76HWAQAA",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CAN",
                                "name": "Guangzhou Baiyun International Airport",
                                "city": "CAN",
                                "cityName": "Guangzhou",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Guangdong"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "NRT",
                                "name": "Narita International Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan",
                                "province": "Tokyo To"
                            },
                            "departureTime": "2024-11-04T23:05:00",
                            "arrivalTime": "2024-11-05T12:00:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-04T23:05:00",
                                    "arrivalTime": "2024-11-05T01:30:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CAN",
                                        "name": "Guangzhou Baiyun International Airport",
                                        "city": "CAN",
                                        "cityName": "Guangzhou",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Guangdong"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "NKG",
                                        "name": "Nanjing Lukou International Airport",
                                        "city": "NKG",
                                        "cityName": "Nanjing",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Jiangsu"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 9768,
                                        "planeType": "320",
                                        "carrierInfo": {
                                            "operatingCarrier": "MU",
                                            "marketingCarrier": "MU"
                                        }
                                    },
                                    "carriers": [
                                        "MU",
                                        "MU"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "China Eastern Airlines",
                                            "code": "MU"
                                        },
                                        {
                                            "name": "China Eastern Airlines",
                                            "code": "MU"
                                        }
                                    ],
                                    "totalTime": 8700,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A320"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        }
                                    ],
                                    "departureTerminal": "1",
                                    "arrivalTerminal": "2"
                                },
                                {
                                    "departureTime": "2024-11-05T08:10:00",
                                    "arrivalTime": "2024-11-05T12:00:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "NKG",
                                        "name": "Nanjing Lukou International Airport",
                                        "city": "NKG",
                                        "cityName": "Nanjing",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Jiangsu"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "NRT",
                                        "name": "Narita International Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan",
                                        "province": "Tokyo To"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 775,
                                        "planeType": "321",
                                        "carrierInfo": {
                                            "operatingCarrier": "MU",
                                            "marketingCarrier": "MU"
                                        }
                                    },
                                    "carriers": [
                                        "MU",
                                        "MU"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "China Eastern Airlines",
                                            "code": "MU"
                                        },
                                        {
                                            "name": "China Eastern Airlines",
                                            "code": "MU"
                                        }
                                    ],
                                    "totalTime": 10200,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A321"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        }
                                    ],
                                    "departureTerminal": "2",
                                    "arrivalTerminal": "2"
                                }
                            ],
                            "totalTime": 42900,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_0WQa2-CMBiFf838RqHlbtIsCMw5Lkanc3xqsBQEnV1oN5Vfv0ZMlrbvc87J20t6kPJbTHW9PrXNQQrtR4CGS96UkgHKv_S6V2XP-bE9N3rZ9noY5Pl6Y1j58kOHuqYGnRbP7Co10VM8afcMlFjzfX-UgmIYJ_OH6bEDrPnrLEpn9j2iXGIL2KZvJZ-ut4Nj2OP52onWo6twFl4uyyEQ2UbANNq6WUeFWoqZyIbYzTeZnceyyE9VkQ2yXG252B1fkjSK4TYqVN_qmsbFJQ2N6_1IRtWrALBcf7yClwK7Hho1lRg-4kri98xdrILRSoyQh8y7uWJomp49EezEqGz5OWE37IeO45ia-hz-iyxtTRZv0ED__gmF0Ea3ukZKPZmBmg0xgKF4eLAkwRYkiVJ74qUKdERFUL33mFKMuHXtKVETS9WWQDBu7chipzCQquvosf8DxtSq8doBAAA.",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CAN",
                                "name": "Guangzhou Baiyun International Airport",
                                "city": "CAN",
                                "cityName": "Guangzhou",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Guangdong"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "NRT",
                                "name": "Narita International Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan",
                                "province": "Tokyo To"
                            },
                            "departureTime": "2024-11-04T06:30:00",
                            "arrivalTime": "2024-11-04T16:20:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-04T06:30:00",
                                    "arrivalTime": "2024-11-04T08:30:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CAN",
                                        "name": "Guangzhou Baiyun International Airport",
                                        "city": "CAN",
                                        "cityName": "Guangzhou",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Guangdong"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "NGB",
                                        "name": "Ningbo Lishe International Airport",
                                        "city": "NGB",
                                        "cityName": "Ningbo",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Zhejiang"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 6663,
                                        "carrierInfo": {
                                            "operatingCarrier": "9C",
                                            "marketingCarrier": "9C"
                                        }
                                    },
                                    "carriers": [
                                        "9C",
                                        "9C"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Spring Airlines",
                                            "code": "9C"
                                        },
                                        {
                                            "name": "Spring Airlines",
                                            "code": "9C"
                                        }
                                    ],
                                    "totalTime": 7200,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A320"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "paid",
                                            "type": "light_meal"
                                        }
                                    ],
                                    "vi": {
                                        "protected": true,
                                        "baggageCollection": true
                                    }
                                },
                                {
                                    "departureTime": "2024-11-04T12:20:00",
                                    "arrivalTime": "2024-11-04T16:20:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "NGB",
                                        "name": "Ningbo Lishe International Airport",
                                        "city": "NGB",
                                        "cityName": "Ningbo",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Zhejiang"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "NRT",
                                        "name": "Narita International Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan",
                                        "province": "Tokyo To"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 102,
                                        "carrierInfo": {
                                            "operatingCarrier": "IJ",
                                            "marketingCarrier": "IJ"
                                        }
                                    },
                                    "carriers": [
                                        "IJ",
                                        "IJ"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Spring Airlines Japan",
                                            "code": "IJ"
                                        },
                                        {
                                            "name": "Spring Airlines Japan",
                                            "code": "IJ"
                                        }
                                    ],
                                    "totalTime": 10800,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "737"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "paid",
                                            "type": "premium_snack"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 31800,
                            "isAtolProtected": false,
                            "isVirtualInterlining": true,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2Qa2-CMBSGf41-o1C51qRZUNC5UYyIt31psFTEObvQOpy_fp2YnvR53nPSJu1RqW85NM3Dua6OShpXCSqhRFUoDpj4Mg-N3vZCfNaXyizqxhyHaZrllpPO1yY0Db3YcPfCb8qQDcP9es9BgQ2EUKeS4eBpDfaAM30dRcnIfbSYUNgBro2c960fZG9ds8HT3NvNs0cqMRm37fweShJJzdgnp9BPc-Kmsdql53K7OaltGrdyfc9IEsVwFe38JCdtMoZxtmwVWfTsSNfjOs4YhgA4PoKPLAqJ7c6YwtDqtFR4SfzZIuyiHrgD2L3nhqFtB25f8jNnqhaXd_6LySSwncDQfyJ-Bo6xpLphIcNyn7k3GEMvOPu80tazQ10VtYCleXyyoKsJmHxo29Mg0WA0IBolHXgIOdo4NaAPPW0H-p9rCkF39kRnG407RWXNr-wPC3pguNIBAAA.",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CAN",
                                "name": "Guangzhou Baiyun International Airport",
                                "city": "CAN",
                                "cityName": "Guangzhou",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Guangdong"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "NRT",
                                "name": "Narita International Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan",
                                "province": "Tokyo To"
                            },
                            "departureTime": "2024-11-04T18:15:00",
                            "arrivalTime": "2024-11-05T13:40:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-04T18:15:00",
                                    "arrivalTime": "2024-11-04T19:50:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CAN",
                                        "name": "Guangzhou Baiyun International Airport",
                                        "city": "CAN",
                                        "cityName": "Guangzhou",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Guangdong"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "FOC",
                                        "name": "Fuzhou Changle International Airport",
                                        "city": "FOC",
                                        "cityName": "Fuzhou",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Fujian"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 8348,
                                        "planeType": "738",
                                        "carrierInfo": {
                                            "operatingCarrier": "MF",
                                            "marketingCarrier": "MF"
                                        }
                                    },
                                    "carriers": [
                                        "MF",
                                        "MF"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Xiamen Airlines",
                                            "code": "MF"
                                        },
                                        {
                                            "name": "Xiamen Airlines",
                                            "code": "MF"
                                        }
                                    ],
                                    "totalTime": 5700,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "737"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "light_meal"
                                        }
                                    ],
                                    "departureTerminal": "2"
                                },
                                {
                                    "departureTime": "2024-11-05T09:35:00",
                                    "arrivalTime": "2024-11-05T13:40:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "FOC",
                                        "name": "Fuzhou Changle International Airport",
                                        "city": "FOC",
                                        "cityName": "Fuzhou",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Fujian"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "NRT",
                                        "name": "Narita International Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan",
                                        "province": "Tokyo To"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 809,
                                        "planeType": "788",
                                        "carrierInfo": {
                                            "operatingCarrier": "MF",
                                            "marketingCarrier": "MF"
                                        }
                                    },
                                    "carriers": [
                                        "MF",
                                        "MF"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Xiamen Airlines",
                                            "code": "MF"
                                        },
                                        {
                                            "name": "Xiamen Airlines",
                                            "code": "MF"
                                        }
                                    ],
                                    "totalTime": 11100,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "787"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        }
                                    ],
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 66300,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QXW-CMBSGf43eUSjl06RZFJgzQg2O-XXTYEGEObvQTtRfvwZMT87zvOekvehZyl8x0fXTpa7OUmh_AlRc8iqXJWD8Rz-1qh05_66vlZ7XrR5MCVlnhkVWGx3qmjpssn8r71ITLcPj-liCHGu-7w8qGPZe1mIHWPOPWRjP7H7EuMQWsJFvLXeut14OwxbPs0MQzftU4CToutVzKpJQKEYuaVKXZIlNIrknl2K3beSORJ3YPNdJHEbwK9y7cZZ0cQDfyaOTSTpCoar-uZIxDAGwXB_2mecCo8GYxNAYtJD4M3EX6XSIauGb9rC7Y4iQZ49FeSmZrPl1WT5wcECOATX1J_xmWlpKg4NjupphDzkbmQF0fB-ZlrIRmqqqqAEMxfOLOT3YIHKUHakXKzDqJQoFRYZnMmUl1aCHPGUnaqleUwiGuw1dbBWeNG-Ye739A4kINLnSAQAA",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CAN",
                                "name": "Guangzhou Baiyun International Airport",
                                "city": "CAN",
                                "cityName": "Guangzhou",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Guangdong"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "NRT",
                                "name": "Narita International Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan",
                                "province": "Tokyo To"
                            },
                            "departureTime": "2024-11-04T21:05:00",
                            "arrivalTime": "2024-11-05T12:25:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-04T21:05:00",
                                    "arrivalTime": "2024-11-05T00:50:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CAN",
                                        "name": "Guangzhou Baiyun International Airport",
                                        "city": "CAN",
                                        "cityName": "Guangzhou",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Guangdong"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "SHE",
                                        "name": "Shenyang Taoxian International Airport",
                                        "city": "SHE",
                                        "cityName": "Shenyang",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Liaoning"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 3601,
                                        "planeType": "320",
                                        "carrierInfo": {
                                            "operatingCarrier": "CZ",
                                            "marketingCarrier": "CZ"
                                        }
                                    },
                                    "carriers": [
                                        "CZ",
                                        "CZ"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "China Southern Airlines",
                                            "code": "CZ"
                                        },
                                        {
                                            "name": "China Southern Airlines",
                                            "code": "CZ"
                                        }
                                    ],
                                    "totalTime": 13500,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A320"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "snack"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "usb_port"
                                            ]
                                        }
                                    ],
                                    "departureTerminal": "2"
                                },
                                {
                                    "departureTime": "2024-11-05T08:30:00",
                                    "arrivalTime": "2024-11-05T12:25:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "SHE",
                                        "name": "Shenyang Taoxian International Airport",
                                        "city": "SHE",
                                        "cityName": "Shenyang",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Liaoning"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "NRT",
                                        "name": "Narita International Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan",
                                        "province": "Tokyo To"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 627,
                                        "planeType": "321",
                                        "carrierInfo": {
                                            "operatingCarrier": "CZ",
                                            "marketingCarrier": "CZ"
                                        }
                                    },
                                    "carriers": [
                                        "CZ",
                                        "CZ"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "China Southern Airlines",
                                            "code": "CZ"
                                        },
                                        {
                                            "name": "China Southern Airlines",
                                            "code": "CZ"
                                        }
                                    ],
                                    "totalTime": 10500,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A321"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        }
                                    ],
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 51600,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QUW-CMBSFf818o1AoQk2aBYE4J63TqZOnBisijtmFdkP99evEtL3nO_f29KFHrb_VyLYPTV0dtbJ-FKikllWhSyDkl31oTdlJ-VmfK7uoWzuOGFuuHMTmGxvalllilD-XF22pVpBBvStBQSyMcY9KkPBBLRkCNHkZJ9nYv7eE1AQB38Notg3C6bxvtmSydl3aX9kTGnfd_BYpmiijaUDNYSvqs1TnrNnnNNFblnZqc1vSLEnhOskVXW0W7KQ0NblsnXZZ7Fyy9DW9P1kKQSAAKMDw7mWhiNeT0AQ6Pe41eafBdBH11gwQ9vrZhUDPC_2BKptS6FqeZ-WVxBEMh0PL_Iv8dZH1xuMIQ2w5_sM_uTH0d25zkoaevMjsijvAMXp8aMHzDWAfhnY8zIwIHlIje-4iHApDJbdcPzRw4MjUmkPQR098-p-78UANr434AwETJwvVAQAA",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CAN",
                                "name": "Guangzhou Baiyun International Airport",
                                "city": "CAN",
                                "cityName": "Guangzhou",
                                "country": "CN",
                                "countryName": "China",
                                "province": "Guangdong"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "NRT",
                                "name": "Narita International Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan",
                                "province": "Tokyo To"
                            },
                            "departureTime": "2024-11-04T20:55:00",
                            "arrivalTime": "2024-11-05T18:10:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-04T20:55:00",
                                    "arrivalTime": "2024-11-04T23:15:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CAN",
                                        "name": "Guangzhou Baiyun International Airport",
                                        "city": "CAN",
                                        "cityName": "Guangzhou",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Guangdong"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "PVG",
                                        "name": "Shanghai Pudong International Airport",
                                        "city": "SHA",
                                        "cityName": "Shanghai",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Shanghai Area"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 1866,
                                        "planeType": "359",
                                        "carrierInfo": {
                                            "operatingCarrier": "CA",
                                            "marketingCarrier": "CA"
                                        }
                                    },
                                    "carriers": [
                                        "CA",
                                        "CA"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Air China",
                                            "code": "CA"
                                        },
                                        {
                                            "name": "Air China",
                                            "code": "CA"
                                        }
                                    ],
                                    "totalTime": 8400,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A350"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "light_meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "free"
                                        }
                                    ],
                                    "departureTerminal": "1",
                                    "arrivalTerminal": "2"
                                },
                                {
                                    "departureTime": "2024-11-05T14:20:00",
                                    "arrivalTime": "2024-11-05T18:10:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "PVG",
                                        "name": "Shanghai Pudong International Airport",
                                        "city": "SHA",
                                        "cityName": "Shanghai",
                                        "country": "CN",
                                        "countryName": "China",
                                        "province": "Shanghai Area"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "NRT",
                                        "name": "Narita International Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan",
                                        "province": "Tokyo To"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 919,
                                        "planeType": "359",
                                        "carrierInfo": {
                                            "operatingCarrier": "CA",
                                            "marketingCarrier": "CA"
                                        }
                                    },
                                    "carriers": [
                                        "CA",
                                        "CA"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Air China",
                                            "code": "CA"
                                        },
                                        {
                                            "name": "Air China",
                                            "code": "CA"
                                        }
                                    ],
                                    "totalTime": 10200,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A350"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "free"
                                        }
                                    ],
                                    "departureTerminal": "2",
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 72900,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                }
            ],
            "flightDeals": [
                {
                    "key": "CHEAPEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2Qa2-CMBSGf41-o1AuAibNgoKXSGtU8LIvDRZEHLML7abj168D0-a8z3NOTj_0KuWXGOv6pa7KqxTatwAll7zMZAEY_9QvjSpnzj-qe6lnVaNPA0K2iWGT9V6HuqYOG5_eiqfURMPQsDoXIEOa7_s9Coa8FzVoBOz5YhLGE6drMS6RDRzLt1dH19vO-maD5slhN4s7yxGePh7rNhA4FCojl9w2LkmwQyJ5InV-PNzkkUQPsW-3OA4jmIYngZP9htyExGovTmeLeGo847COuicLxhAEwHZ92DnPBLJ6YhJBo8dcoh12l5ugVzWAlm928kTQsjxnKIq6YLLi91Xxi3DquyNPU__Cf0xbm1Ccuq6jGU7v7wNzCketnddXRQMrULekBjBUXl-ZUWguQIgVnqkXq2DU-7ecQmYyT1FBNaeDC7VVrSgE_e6NLg8qWpqdy7JlfxUq76HWAQAA",
                    "price": {
                        "currencyCode": "USD",
                        "units": 113,
                        "nanos": 920000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 113,
                                    "nanos": 920000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 47,
                                    "nanos": 520000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 66,
                                    "nanos": 400000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 114
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 113,
                                    "nanos": 920000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 114
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "FASTEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_zWQbW-CMBRGf41-o1BahJo0i4JRJ2Bk-LYvDZaKOGcX2g3nr18jLr255zw3uU3ak9Zfamjbx0tdnbSyvhWopJZVoQXg8tM-NqYdpPyor5Vd1I0djtI0yx2cLjc2tC1z-HD_Im7aUg2n_fogQEEtQkinitPgaQ0dADydjaN47D1GXGqKgYcIXuz8YO12w4ZO81cHTR-ppEnYtsv7SCWRMpz46Xnlp3nipRO9Ty_lbnvWu3TSqs09S-JoAtfR3o_zpI1DmGd1q5NVD0WmHtcJzikEAPsEPrIsFEWdcU2h02mp6Vviz1ejLmpKXEy6V9woRCjw-kpcBNe1vC7ELw3fUUAs8yXyx8XWjE0XruF_zntuCHFQq6M21kMjUxVzgGN4erJgUQaWG2MHFsQGvEPJBCYDbkwwy-UoMHZk2PSaQdDtntl8a3BnpZTNSf8BPDga5tEBAAA.",
                    "price": {
                        "currencyCode": "USD",
                        "units": 924,
                        "nanos": 980000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 924,
                                    "nanos": 980000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 863,
                                    "nanos": 680000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 61,
                                    "nanos": 300000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 925
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 924,
                                    "nanos": 980000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 925
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "BEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2Qa2-CMBSGf41-o1AuAibNgoKXSGtU8LIvDRZEHLML7abj168D0-a8z3NOTj_0KuWXGOv6pa7KqxTatwAll7zMZAEY_9QvjSpnzj-qe6lnVaNPA0K2iWGT9V6HuqYOG5_eiqfURMPQsDoXIEOa7_s9Coa8FzVoBOz5YhLGE6drMS6RDRzLt1dH19vO-maD5slhN4s7yxGePh7rNhA4FCojl9w2LkmwQyJ5InV-PNzkkUQPsW-3OA4jmIYngZP9htyExGovTmeLeGo847COuicLxhAEwHZ92DnPBLJ6YhJBo8dcoh12l5ugVzWAlm928kTQsjxnKIq6YLLi91Xxi3DquyNPU__Cf0xbm1Ccuq6jGU7v7wNzCketnddXRQMrULekBjBUXl-ZUWguQIgVnqkXq2DU-7ecQmYyT1FBNaeDC7VVrSgE_e6NLg8qWpqdy7JlfxUq76HWAQAA",
                    "price": {
                        "currencyCode": "USD",
                        "units": 113,
                        "nanos": 920000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 113,
                                    "nanos": 920000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 47,
                                    "nanos": 520000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 66,
                                    "nanos": 400000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 114
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 113,
                                    "nanos": 920000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 114
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                }
            ],
            "atolProtectedStatus": "NONE",
            "searchId": "948A451DF0DB43BC7000C93F4CC048FD",
            "displayOptions": {
                "brandedFaresShownByDefault": false,
                "directFlightsOnlyFilterIgnored": false,
                "hideFlexiblePricesBanner": false
            },
            "isOffersCabinClassExtended": false,
            "searchCriteria": {
                "cabinClass": "ECONOMY"
            }
        }
    }
]

2025-08-25 12:33:22,132 - evaluation_logger_Cross-353 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 什么是SpringBoot

SpringBoot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:

![image-20220111163555925](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750524.png)

其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。

# 2. 为什么要学习SpringBoot

java一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：

- 复杂的配置，

  项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。

- 混乱的依赖管理。

  项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。

而SpringBoot让这一切成为过去！

- Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。

我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。

# 3. SpringBoot的特点

Spring Boot 主要目标是：

- 为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验
- 开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。
- 提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等
- 绝对没有代码生成，也无需 XML 配置。

更多细节，大家可以到[官网](https://spring.io/projects/spring-boot)查看。

# 4. 快速入门

接下来，我们就来利用SpringBoot搭建一个web工程，体会一下SpringBoot的魅力所在！

## 4.1. 创建工程

我们先新建一个空的工程：

![image-20220111164005866](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750525.png)

工程名为demo：

![image-20220111164030129](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750526.png)

新建一个model：

![image-20220111164052707](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750527.png)

使用maven来构建：

![image-20220111164117345](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750528.png)

然后填写项目坐标：

![image-20220111164142928](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750529.png)

目录结构：

![image-20220111164207319](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750530.png)

## 4.2. 添加依赖

看到这里很多同学会有疑惑，前面说传统开发的问题之一就是依赖管理混乱，怎么这里我们还需要管理依赖呢？难道SpringBoot不帮我们管理吗？

别着急，现在我们的项目与SpringBoot还没有什么关联。SpringBoot提供了一个名为spring-boot-starter-parent的工程，里面已经对各种常用依赖（并非全部）的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标即可！

### 4.2.1. 添加父工程坐标

```xml
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.5.RELEASE</version>
    </parent>
```

### 4.2.2. 添加web启动器

为了让SpringBoot帮我们完成各种自动配置，我们必须引入SpringBoot提供的自动配置依赖，我们称为启动器。因为我们是web项目，这里我们引入web启动器：

```xml
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
```

需要注意的是，我们并没有在这里指定版本信息。因为SpringBoot的父工程已经对版本进行了管理了。

这个时候，我们会发现项目中多出了大量的依赖：

![image-20220111164410230](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750531.png)

这些都是SpringBoot根据spring-boot-starter-web这个依赖自动引入的，而且所有的版本都已经管理好，不会出现冲突。

### 4.2.3. 管理jdk版本

默认情况下，maven工程的jdk版本是1.5，而我们开发使用的是1.8，因此这里我们需要修改jdk版本，只需要在pom.xml中添加以下属性即可：

```xml
    <properties>
        <java.version>1.8</java.version>
    </properties>
```

### 4.2.4. 完整pom

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.cjj</groupId>
    <artifactId>springboot-demo</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.5.RELEASE</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
</project>
```

## 4.3. 启动类

Spring Boot项目通过main函数即可启动，我们需要创建一个启动类：

![image-20220111164535675](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750532.png)

然后编写main函数：

```java
@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
```

## 4.4. 编写controller

接下来，我们就可以像以前那样开发SpringMVC的项目了！

我们编写一个controller：

![image-20220111164604353](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750533.png)

代码：

```java
@RestController
public class HelloController {

    @GetMapping("hello")
    public String hello(){
        return "hello, spring boot!";
    }
}
```

## 4.5. 启动测试

接下来，我们运行main函数，查看控制台：

![image-20220111164625692](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750534.png)

并且可以看到监听的端口信息：

- 1）监听的端口是8080
- 2）SpringMVC的映射路径是：/
- 3）`/hello`路径已经映射到了`HelloController`中的`hello()`方法

打开页面访问：http://localhost:8080/hello

![image-20220111164655072](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750535.png)

## 4.6. 详解

入门工程中，我们引入了父工程和web启动器：

```xml
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.5.RELEASE</version>
    </parent>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
```

点击进入，查看web启动器：

![image-20220111164721844](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750536.png)

web启动器自动引入了web模块开发需要的相关jar包：

![image-20220111164741104](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750537.png)

并且，这里并没有指定版本，可以看到父工程中定义了版本：

![image-20220111164800621](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750538.png)

这里我们并没有指定版本，使用的是父工程默认的版本定义。

查看parent：

![image-20220111164822402](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750539.png)

这里又是一个父工程，继续点击，查看spring-boot-dependencies：

![image-20220111164843478](https://gitee.com/chen-jiujia/typora-picgo/raw/master/img/202309251750540.png)

这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心。

以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了。

## 4.7. 依赖管理

**父工程做依赖管理**

```xml
依赖管理    
<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.4.RELEASE</version>
</parent>

他的父工程
 <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-dependencies</artifactId>
    <version>2.3.4.RELEASE</version>
  </parent>

几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制
```

**开发导入starter场景启动器**

```xml
1、见到很多 spring-boot-starter-* ： *就某种场景
2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入
3、SpringBoot所有支持的场景
https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter
4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。
5、所有场景启动器最底层的依赖
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter</artifactId>
  <version>2.3.4.RELEASE</version>
  <scope>compile</scope>
</dependency>
```

**无需关注版本号，自动版本仲裁**

```xml
1、引入依赖默认都可以不写版本
2、引入非版本仲裁的jar，要写版本号。
```

**可以修改默认版本号**

```xml
1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。
2、在当前项目里面重写配置
    <properties>
        <mysql.version>5.1.43</mysql.version>
    </properties>
```

# 5. 自动配置

## 5.1. 自动配置

### 5.1.1. 默认的包结构

- 主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来
- 无需以前的包扫描配置
- 想要改变扫描路径，`@SpringBootApplication(scanBasePackages=**"com.atguigu"**)`

- - 或者`@ComponentScan` 指定扫描路径

```java
@SpringBootApplication
等同于
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan("com.atguigu.boot")
```

### 5.1.2. 各种配置拥有默认值

- 默认配置最终都是映射到某个类上，如：MultipartProperties
- 配置文件的值最终会绑定每个类上，这个类会在容器中创建对象

### 5.1.3. 按需加载所有自动配置项

- 非常多的starter
- 引入了哪些场景这个场景的自动配置才会开启
- SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面

## 5.2. 容器功能

### 5.2.1. 组件添加

#### 1、@Configuration

- 基本使用
- **Full模式与Lite模式**

- - 示例
  - 最佳实战

- - - 配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断
    - 配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式

```java
#############################Configuration使用示例######################################################
/**
 * 1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的
 * 2、配置类本身也是组件
 * 3、proxyBeanMethods：代理bean的方法
 *      Full(proxyBeanMethods = true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】
 *      Lite(proxyBeanMethods = false)【每个@Bean方法被调用多少次返回的组件都是新创建的】
 *      组件依赖必须使用Full模式默认。其他默认是否Lite模式
 *
 *
 *
 */
@Configuration(proxyBeanMethods = false) //告诉SpringBoot这是一个配置类 == 配置文件
public class MyConfig {

    /**
     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象
     * @return
     */
    @Bean //给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例
    public User user01(){
        User zhangsan = new User("zhangsan", 18);
        //user组件依赖了Pet组件
        zhangsan.setPet(tomcatPet());
        return zhangsan;
    }

    @Bean("tom")
    public Pet tomcatPet(){
        return new Pet("tomcat");
    }
}


################################@Configuration测试代码如下########################################
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan("com.atguigu.boot")
public class MainApplication {

    public static void main(String[] args) {
        //1、返回我们IOC容器
        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);

        //2、查看容器里面的组件
        String[] names = run.getBeanDefinitionNames();
        for (String name : names) {
            System.out.println(name);
        }

        //3、从容器中获取组件

        Pet tom01 = run.getBean("tom", Pet.class);

        Pet tom02 = run.getBean("tom", Pet.class);

        System.out.println("组件："+(tom01 == tom02));


        //4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892
        MyConfig bean = run.getBean(MyConfig.class);
        System.out.println(bean);

        //如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。
        //保持组件单实例
        User user = bean.user01();
        User user1 = bean.user01();
        System.out.println(user == user1);


        User user01 = run.getBean("user01", User.class);
        Pet tom = run.getBean("tom", Pet.class);

        System.out.println("用户的宠物："+(user01.getPet() == tom));

2025-08-25 12:33:29,544 - evaluation_logger_Cross-353 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any part of the user's query about finding the cheapest room at Oakwood Premier Tokyo or booking a flight from Guangzhou to Tokyo."}
2025-08-25 12:33:35,396 - evaluation_logger_Cross-353 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:33:35,396 - evaluation_logger_Cross-353 - INFO - Message: Success.
2025-08-25 12:33:35,396 - evaluation_logger_Cross-353 - INFO - Success turn num = 4
2025-08-25 12:33:35,396 - evaluation_logger_Cross-353 - INFO - ----------------------------------------------------------------------------------------------------
