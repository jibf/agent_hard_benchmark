2025-08-25 11:49:00,660 - evaluation_logger_Cross-100 - INFO - Test Example Cross-100
2025-08-25 11:49:00,660 - evaluation_logger_Cross-100 - INFO - Query: My three friends and I are planning to have a party in Downtown, Seattle, on November 8, 2024. Recommend the most popular hotel there for us. For easy travel, we need to rent a car, hoping to pick it up at 12 pm on the 8th near the party hotel and return it at 2 pm the next day at the same location.
2025-08-25 11:49:08,354 - evaluation_logger_Cross-100 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Downtown, Seattle"
        }
    }
]

2025-08-25 11:49:08,354 - evaluation_logger_Cross-100 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Downtown, Seattle"
        }
    },
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 1624,
            "search_type": "district",
            "arrival_date": "2024-11-08",
            "departure_date": "2024-11-09",
            "adults": 4,
            "sort_by": "popularity"
        }
    }
]

2025-08-25 11:49:08,354 - evaluation_logger_Cross-100 - INFO - Start compare_single_call: 
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Downtown, Seattle'}}
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Downtown, Seattle'}}
2025-08-25 11:49:08,354 - evaluation_logger_Cross-100 - INFO - Rule-based compare success.
2025-08-25 11:49:08,354 - evaluation_logger_Cross-100 - INFO - Success matched: [{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Downtown, Seattle'}}]
2025-08-25 11:49:08,354 - evaluation_logger_Cross-100 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "dest_id": "1624",
                "search_type": "district",
                "hotels": 173,
                "label": "Downtown Seattle, Seattle, Washington, United States",
                "region": "Washington",
                "type": "di",
                "nr_hotels": 173,
                "city_name": "Seattle",
                "dest_type": "district",
                "lc": "en",
                "country": "United States",
                "name": "Downtown Seattle",
                "cc1": "us",
                "latitude": 47.611103,
                "roundtrip": "GgEwIAAoATICZW46EURvd250b3duLCBTZWF0dGxlQABKAFAA",
                "city_ufi": 20144883,
                "longitude": -122.33674
            }
        ]
    }
]

2025-08-25 11:49:25,210 - evaluation_logger_Cross-100 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 1624,
            "search_type": "district",
            "arrival_date": "2024-11-08",
            "departure_date": "2024-11-09",
            "adults": 4,
            "sort_by": "popularity"
        }
    },
    {
        "name": "Search_Car_Rentals",
        "arguments": {
            "pick_up_latitude": 47.611103,
            "pick_up_longitude": -122.33674,
            "drop_off_latitude": 47.611103,
            "drop_off_longitude": -122.33674,
            "pick_up_date": "2024-11-08",
            "drop_off_date": "2024-11-09",
            "pick_up_time": "12:00",
            "drop_off_time": "14:00"
        }
    }
]

2025-08-25 11:49:25,210 - evaluation_logger_Cross-100 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "adults": 4,
            "arrival_date": "2024-11-08",
            "departure_date": "2024-11-09",
            "dest_id": 1624,
            "search_type": "district",
            "sort_by": "popularity"
        }
    },
    {
        "name": "Search_Car_Rentals",
        "arguments": {
            "pick_up_latitude": 47.6201293186741,
            "pick_up_longitude": -122.347903163958,
            "drop_off_latitude": 47.6201293186741,
            "drop_off_longitude": -122.347903163958,
            "pick_up_date": "2024-11-08",
            "drop_off_date": "2024-11-09",
            "pick_up_time": "12:00",
            "drop_off_time": "14:00"
        }
    }
]

2025-08-25 11:49:26,694 - evaluation_logger_Cross-100 - INFO - Start compare_single_call: 
{'name': 'Search_Hotels', 'arguments': {'adults': 4, 'arrival_date': '2024-11-08', 'departure_date': '2024-11-09', 'dest_id': 1624, 'search_type': 'district', 'sort_by': 'popularity'}}
{'name': 'Search_Hotels', 'arguments': {'adults': 4, 'arrival_date': '2024-11-08', 'departure_date': '2024-11-09', 'dest_id': 1624, 'search_type': 'district', 'sort_by': 'popularity'}}
2025-08-25 11:49:26,694 - evaluation_logger_Cross-100 - INFO - Rule-based compare success.
2025-08-25 11:49:26,695 - evaluation_logger_Cross-100 - INFO - Start compare_single_call: 
{'name': 'Search_Car_Rentals', 'arguments': {'drop_off_date': '2024-11-09', 'drop_off_latitude': 47.611103, 'drop_off_longitude': -122.33674, 'drop_off_time': '14:00', 'pick_up_date': '2024-11-08', 'pick_up_latitude': 47.611103, 'pick_up_longitude': -122.33674, 'pick_up_time': '12:00'}}
{'name': 'Search_Car_Rentals', 'arguments': {'drop_off_date': '2024-11-09', 'drop_off_latitude': 47.6201293186741, 'drop_off_longitude': -122.347903163958, 'drop_off_time': '14:00', 'pick_up_date': '2024-11-08', 'pick_up_latitude': 47.6201293186741, 'pick_up_longitude': -122.347903163958, 'pick_up_time': '12:00'}}
2025-08-25 11:49:26,695 - evaluation_logger_Cross-100 - INFO - {'error_type': 'value_error', 'content': 'Parameter drop_off_latitude value is not correct in prediction.'}
2025-08-25 11:49:26,695 - evaluation_logger_Cross-100 - INFO - Success matched: [{'name': 'Search_Hotels', 'arguments': {'adults': 4, 'arrival_date': '2024-11-08', 'departure_date': '2024-11-09', 'dest_id': 1624, 'search_type': 'district', 'sort_by': 'popularity'}}]
2025-08-25 11:49:26,695 - evaluation_logger_Cross-100 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "hotels": [
                {
                    "hotel_id": 1336096,
                    "accessibilityLabel": "Hyatt House Seattle Downtown.\n3 out of 5 stars.\n8.5 Very good 1170 reviews.\n‎900 m from centre‬.\n Room with shared bathroom : 1 bed.\n298 USD.\nIncludes taxes and charges.",
                    "property": {
                        "checkin": {
                            "fromTime": "16:00",
                            "untilTime": "00:00"
                        },
                        "optOutFromGalleryChanges": 0,
                        "isPreferred": true,
                        "wishlistName": "Seattle",
                        "mainPhotoId": 535389223,
                        "checkout": {
                            "fromTime": "00:00",
                            "untilTime": "11:00"
                        },
                        "name": "Hyatt House Seattle Downtown",
                        "priceBreakdown": {
                            "grossPrice": {
                                "currency": "USD",
                                "value": 297.95
                            }
                        },
                        "accuratePropertyClass": 3,
                        "isFirstPage": true,
                        "longitude": -122.347903163958,
                        "id": 1336096,
                        "position": 11,
                        "qualityClass": 0,
                        "blockIds": [
                            "133609617_96634641_4_1_0"
                        ],
                        "reviewScoreWord": "Very good",
                        "latitude": 47.6201293186741,
                        "currency": "USD",
                        "reviewScore": 8.5,
                        "countryCode": "us",
                        "propertyClass": 3,
                        "ufi": 20144883,
                        "checkoutDate": "2024-11-09",
                        "reviewCount": 1170,
                        "checkinDate": "2024-11-08",
                        "rankingPosition": 11
                    }
                }
            ],
            "meta": [
                {
                    "title": "69 properties"
                }
            ],
            "appear": [
                {
                    "id": "cma",
                    "component": {
                        "props": {
                            "content": {
                                "props": {
                                    "fitContentWidth": true,
                                    "items": [
                                        {
                                            "props": {
                                                "component": {
                                                    "props": {
                                                        "spacing": "spacing_half",
                                                        "items": [
                                                            {
                                                                "props": {
                                                                    "text": [
                                                                        {
                                                                            "font": "body_2",
                                                                            "text": "Commission paid and other benefits may affect an accommodation's ranking."
                                                                        },
                                                                        {
                                                                            "color": "foreground",
                                                                            "font": "strong_2",
                                                                            "text": "  "
                                                                        },
                                                                        {
                                                                            "linkActions": [
                                                                                {}
                                                                            ],
                                                                            "color": "action_foreground",
                                                                            "font": "body_2",
                                                                            "text": "Find out more"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        },
                                        {},
                                        {
                                            "props": {
                                                "component": {
                                                    "props": {
                                                        "icon": "close",
                                                        "tertiaryTintedColor": "foreground",
                                                        "variant": "tertiary_tinted",
                                                        "accessibilityLabel": "Close"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "fill": true
                        }
                    }
                },
                {},
                {
                    "id": "signin_now",
                    "component": {
                        "props": {
                            "title": "Sign in and save money",
                            "text": "Get instant access to our Genius loyalty programme and enjoy discounts at properties worldwide."
                        }
                    }
                }
            ]
        }
    },
    {
        "api_status": true,
        "content": "There is a problem with your api call, please double-check for possible problems."
    }
]

2025-08-25 11:52:30,662 - evaluation_logger_Cross-100 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 前言

在上一篇文章中，我们实现了`axios`的请求和响应配置化，即用户可以配置`config`对象中的`headers`属性来添加请求头和响应头。那么在这一篇文章中，我们就来实现`axios`的请求和响应数据配置化，即用户可以配置`config`对象中的`data`和`responseType`属性来添加请求数据和指定响应数据类型。

# 2. 需求分析

在之前的版本中，我们发送请求的时候只能发送普通的字符串，例如：

```javascript
axios({
  method: "post",
  url: "/api/addResponseHeader",
  data: '{"a":1,"b":2}',
});
```

并且服务端返回给我们的响应数据也是字符串类型，例如：

```javascript
{
  data: '{"a":1,"b":2}'
}
```

而我们希望的是：当我们发送请求的时候，可以直接传递一个`JS`对象作为请求数据，例如：

```javascript
axios({
  method: "post",
  url: "/api/addResponseHeader",
  data: {
    a: 1,
    b: 2,
  },
});
```

并且我们希望服务端返回给我们的响应数据直接就是一个`JS`对象，而不是字符串，例如：

```javascript
{
  data: {a: 1, b: 2}
}
```

那么，我们该如何实现呢？

其实思路很简单：

- 在发送请求之前，我们先把请求数据`data`由对象转换成字符串，因为`HTTP`请求体中传输的数据格式是字符串；
- 在接收到响应之后，我们先把响应数据由字符串转换成对象，然后再返回给用户；

那么，我们该如何转换呢？我们可以在`config`对象里面配置`transformRequest`和`transformResponse`，这两个属性都是函数，用户可以通过配置这两个函数来自定义转换请求数据和响应数据，如果用户没有配置，那就使用默认的转换函数。

另外，我们还可以在`config`对象里面配置`responseType`属性，该属性表示服务端响应数据的类型，我们可以根据该属性值来决定如何转换响应数据，`responseType` 的类型是 `XMLHttpRequestResponseType`。

OK，接下来，我们就来实现这个功能。

# 3. 修改类型定义

由于我们要给`config`对象新增加三个属性：`data`、`responseType`、`transformResponse`，所以我们需要先修改一下类型定义。

## 3.1 修改`AxiosRequestConfig`类型定义

`src/types/index.ts`：

```typescript
export type Method =
  | "get"
  | "GET"
  | "delete"
  | "DELETE"
  | "head"
  | "HEAD"
  | "options"
  | "OPTIONS"
  | "post"
  | "POST"
  | "put"
  | "PUT"
  | "patch"
  | "PATCH";

export interface AxiosRequestConfig {
  url?: string;
  method?: Method;
  data?: any;
  params?: any;
  headers?: any;
  responseType?: XMLHttpRequestResponseType;
  transformRequest?: AxiosTransformer | AxiosTransformer[];
  transformResponse?: AxiosTransformer | AxiosTransformer[];
}

export interface AxiosResponse<T = any> {
  data: T;
  status: number;
  statusText: string;
  headers: any;
  config: AxiosRequestConfig;
  request: any;
}

export interface AxiosPromise<T = any> extends Promise<AxiosResponse<T>> {}

export interface AxiosError extends Error {
  config: AxiosRequestConfig;
  code?: string;
  request?: any;
  response?: AxiosResponse;
  isAxiosError: boolean;
}

export interface Axios {
  interceptors: {
    request: AxiosInterceptorManager<AxiosRequestConfig>;
    response: AxiosInterceptorManager<AxiosResponse>;
  };

  request<T = any>(config: AxiosRequestConfig): AxiosPromise<T>;

  get<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;

  delete<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;

  head<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;

  options<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;

  post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;

  put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;

  patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;
}

export interface AxiosInstance extends Axios {
  <T = any>(config: AxiosRequestConfig): AxiosPromise<T>;

  <T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;
}

export interface AxiosInterceptorManager<T> {
  use(resolved: ResolvedFn<T>, rejected?: RejectedFn): number;

  eject(id: number): void;
}

export interface ResolvedFn<T> {
  (val: T): T | Promise<T>;
}

export interface RejectedFn {
  (error: any): any;
}

export interface AxiosTransformer {
  (data: any, headers?: any): any;
}
```

其中，我们给`AxiosRequestConfig`类型定义添加了三个属性：

- `data?: any`：请求数据；
- `responseType?: XMLHttpRequestResponseType`：响应数据类型；
- `transformRequest?: AxiosTransformer | AxiosTransformer[]`：转换请求数据的函数（单个函数或多个函数组成的数组）；
- `transformResponse?: AxiosTransformer | AxiosTransformer[]`：转换响应数据的函数（单个函数或多个函数组成的数组）；

另外，我们还定义了一个`AxiosTransformer`类型的函数，该函数接收两个参数：`data`和`headers`，返回转换后的数据。

## 3.2 修改`AxiosResponse`类型定义

另外，我们还需要修改`AxiosResponse`类型定义，因为之前我们是将响应数据`data`定义为`any`类型，现在我们需要将其改为泛型`T`，这样我们就可以根据`responseType`来指定响应数据的类型。

```typescript
export interface AxiosResponse<T = any> {
  data: T;
  status: number;
  statusText: string;
  headers: any;
  config: AxiosRequestConfig;
  request: any;
}
```

# 4. 添加默认配置

在`src/defaults.ts`中，我们添加默认的`transformRequest`和`transformResponse`函数：

```typescript
import { AxiosRequestConfig } from "./types";
import { processHeaders } from "./helpers/headers";
import { transformRequest, transformResponse } from "./helpers/data";

const defaults: AxiosRequestConfig = {
  method: "get",

  timeout: 0,

  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
    },
  },

  transformRequest: [
    function (data: any, headers: any): any {
      processHeaders(headers, data);
      return transformRequest(data);
    },
  ],

  transformResponse: [
    function (data: any): any {
      return transformResponse(data);
    },
  ],
};

const methodsNoData = ["delete", "get", "head", "options"];

methodsNoData.forEach((method) => {
  defaults.headers[method] = {};
});

const methodsWithData = ["post", "put", "patch"];

methodsWithData.forEach((method) => {
  defaults.headers[method] = {
    "Content-Type": "application/x-www-form-urlencoded",
  };
});

export default defaults;
```

可以看到，我们给`defaults`对象添加了两个属性：`transformRequest`和`transformResponse`，它们都是数组，数组中包含了一个函数。

- `transformRequest`：该函数首先会处理请求头，然后调用`transformRequest`函数转换请求数据；
- `transformResponse`：该函数会调用`transformResponse`函数转换响应数据；

其中，`processHeaders`、`transformRequest`和`transformResponse`函数我们会在后面实现。

另外，我们还需要修改一下`methodsWithData`的默认请求头，因为我们现在发送的数据是对象，所以我们需要将默认的请求头改为`application/x-www-form-urlencoded`。

# 5. 实现转换函数

## 5.1 实现`processHeaders`函数

`processHeaders`函数的作用是：如果请求数据是普通对象，那么需要设置请求头`Content-Type`为`application/json;charset=utf-8`。

`src/helpers/headers.ts`：

```typescript
import { isPlainObject } from "./util";

export function processHeaders(headers: any, data: any): any {
  if (isPlainObject(data)) {
    if (headers && !headers["Content-Type"]) {
      headers["Content-Type"] = "application/json;charset=utf-8";
    }
  }
  return headers;
}
```

## 5.2 实现`transformRequest`函数

`transformRequest`函数的作用是：如果请求数据是普通对象，那么将请求数据转换成字符串。

`src/helpers/data.ts`：

```typescript
import { isPlainObject } from "./util";

export function transformRequest(data: any): any {
  if (isPlainObject(data)) {
    return JSON.stringify(data);
  }
  return data;
}
```

## 5.3 实现`transformResponse`函数

`transformResponse`函数的作用是：如果响应数据是字符串，那么尝试将响应数据转换成对象。

`src/helpers/data.ts`：

```typescript
import { isPlainObject } from "./util";

export function transformResponse(data: any): any {
  if (typeof data === "string") {
    try {
      data = JSON.parse(data);
    } catch (e) {
      // do nothing
    }
  }
  return data;
}
```

# 6. 修改`axios`函数

现在，我们需要修改`axios`函数，使其能够处理请求数据和响应数据。

## 6.1 修改`dispatchRequest`函数

`src/core/dispatchRequest.ts`：

```typescript
import { AxiosPromise, AxiosRequestConfig, AxiosResponse } from "../types";
import xhr from "./xhr";
import { buildURL } from "../helpers/url";
import { flattenHeaders } from "../helpers/headers";
import transform from "./transform";

export default function dispatchRequest(config: AxiosRequestConfig): AxiosPromise {
  processConfig(config);
  return xhr(config).then((res) => {
    return transformResponseData(res);
  });
}

function processConfig(config: AxiosRequestConfig): void {
  config.url = transformURL(config);
  config.data = transform(config.data, config.headers, config.transformRequest);
  config.headers = flattenHeaders(config.headers, config.method!);
}

function transformURL(config: AxiosRequestConfig): string {
  const { url, params } = config;
  return buildURL(url!, params);
}

function transformResponseData(res: AxiosResponse): AxiosResponse {
  res.data = transform(res.data, res.headers, res.config.transformResponse);
  return res;
}
```

可以看到，我们做了以下修改：

1. 在`processConfig`函数中，我们调用了`transform`函数来处理请求数据`data`，该函数会调用`config.transformRequest`中的函数对请求数据进行转换；
2. 在`dispatchRequest`函数中，我们调用了`transformResponseData`函数来处理响应数据，该函数会调用`config.transformResponse`中的函数对响应数据进行转换；

其中，`transform`函数我们会在后面实现。

## 6.2 实现`transform`函数

`src/core/transform.ts`：

```typescript
import { AxiosTransformer } from "../types";

export default function transform(
  data: any,
  headers: any,
  fns?: AxiosTransformer | AxiosTransformer[]
): any {
  if (!fns) {
    return data;
  }
  if (!Array.isArray(fns)) {
    fns = [fns];
  }
  fns.forEach((fn) => {
    data = fn(data, headers);
  });
  return data;
}
```

`transform` 函数中接收 `data`、`headers`、`fns` 3 个参数，其中 `fns` 代表一个或者多个转换函数，内部逻辑很简单，遍历 `fns`，执行这些转换函数，并且把 `data` 和 `headers` 作为参数传入，每个转换函数返回的 `data` 会作为下一个转换函数的参数 `data` 传入。

# 7. 修改`xhr`函数

另外，我们还需要修改`xhr`函数，使其能够根据`config.responseType`来设置`xhr.responseType`。

`src/core/xhr.ts`：

```typescript
import { AxiosPromise, AxiosRequestConfig, AxiosResponse } from "../types";
import { parseHeaders } from "../helpers/headers";
import { createError } from "../helpers/error";

export default function xhr(config: AxiosRequestConfig): AxiosPromise {
  return new Promise((resolve, reject) => {
    const {
      data = null,
      url,
      method = "get",
      headers,
      responseType,
      timeout,
    } = config;

    const request = new XMLHttpRequest();

    if (responseType) {
      request.responseType = responseType;
    }

    if (timeout) {
      request.timeout = timeout;
    }

    request.open(method.toUpperCase(), url!, true);

    request.onreadystatechange = function handleLoad() {
      if (request.readyState !== 4) {
        return;
      }

      if (request.status === 0) {
        return;
      }

      const responseHeaders = parseHeaders(request.getAllResponseHeaders());
      const responseData =
        responseType && responseType !== "text" ? request.response : request.responseText;
      const response: AxiosResponse = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request,
      };
      handleResponse(response);
    };

    request.onerror = function handleError() {
      reject(createError("Network Error", config, null, request));
    };

    request.ontimeout = function handleTimeout() {
      reject(
        createError(`Timeout of ${timeout} ms exceeded`, config, "ECONNABORTED", request)
      );
    };

    Object.keys(headers).forEach((name) => {
      if (data === null && name.toLowerCase() === "content-type") {
        delete headers[name];
      } else {
        request.setRequestHeader(name, headers[name]);
      }
    });

    request.send(data);

    function handleResponse(response: AxiosResponse) {
      if (response.status >= 200 && response.status < 300) {
        resolve(response);
      } else {
        reject(
          createError(
            `Request failed with status code ${response.status}`,
            config,
            null,
            request,
            response
          )
        );
      }
    }
  });
}
```

可以看到，我们做了以下修改：

1. 从`config`中解构出`responseType`，如果有值，则设置`request.responseType`；
2. 在`onreadystatechange`事件中，我们根据`responseType`来决定如何获取响应数据：
   - 如果`responseType`存在且不是`text`，那么我们就使用`request.response`来获取响应数据；
   - 否则，我们就使用`request.responseText`来获取响应数据；

# 8. 编写 demo

接下来，我们编写一个 demo 来测试一下我们的代码。

`examples/data/app.ts`：

```typescript
import axios from "../../src/index";

axios({
  method: "post",
  url: "/api/data",
  data: {
    a: 1,
    b: 2,
  },
}).then((res) => {
  console.log(res);
});

axios({
  method: "post",
  url: "/api/data",
  responseType: "json",
  data: {
    a: 3,
    b: 4,
  },
}).then((res) => {
  console.log(res);
});
```

`examples/server.js`：

```javascript
const express = require("express");
const bodyParser = require("body-parser");
const app = express();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.post("/api/data", function (req, res) {
  res.json(req.body);
});

const port = process.env.PORT || 3000;
module.exports = app.listen(port, () => {
  console.log(`Server listening on http://localhost:${port}, Ctrl+C to stop`);
});
```

然后在浏览器中访问 http://localhost:3000/，打开控制台，可以看到两个请求的响应数据都是对象，而不是字符串。

![](~@/axios/07/01.png)

# 9. 总结

在本篇文章中，我们实现了`axios`的请求和响应数据配置化，即用户可以配置`config`对象中的`data`和`responseType`属性来添加请求数据和指定响应数据类型。

在实现过程中，我们需要注意以下几点：

1. 在发送请求之前，我们需要将请求数据`data`由对象转换成字符串，因为`HTTP`请求体中传输的数据格式是字符串；
2. 在接收到响应之后，我们需要将响应数据由字符串转换成对象，然后再返回给用户；
3. 我们可以在`config`对象里面配置`transformRequest`和`transformResponse`，这两个属性都是函数，用户可以通过配置这两个函数来自定义转换请求数据和响应数据，如果用户没有配置，那就使用默认的转换函数；
4. 我们还可以在`config`对象里面配置`responseType`属性，该属性表示服务端响应数据的类型，我们可以根据该属性值来决定如何转换响应数据；

至此，我们已经实现了`axios`的请求和响应数据配置化，下一篇文章我们将实现`axios`的扩展接口，例如`axios.get`、`axios.post`等。


2025-08-25 11:52:37,878 - evaluation_logger_Cross-100 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any part of the user's query about hotel recommendations or car rental in Seattle."}
2025-08-25 11:52:44,369 - evaluation_logger_Cross-100 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 11:52:44,369 - evaluation_logger_Cross-100 - INFO - Message: [{'error_type': 'value_error', 'content': 'Parameter drop_off_latitude value is not correct in prediction.'}]
2025-08-25 11:52:44,369 - evaluation_logger_Cross-100 - INFO - Success turn num = 2
2025-08-25 11:52:44,369 - evaluation_logger_Cross-100 - INFO - ----------------------------------------------------------------------------------------------------
