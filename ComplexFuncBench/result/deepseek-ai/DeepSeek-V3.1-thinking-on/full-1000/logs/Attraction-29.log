2025-08-25 13:03:52,788 - evaluation_logger_Attraction-29 - INFO - Test Example Attraction-29
2025-08-25 13:03:52,788 - evaluation_logger_Attraction-29 - INFO - Query: I came across the Times Square on social media. That's dope. Could you provide me with more detailed information about it?
2025-08-25 13:04:01,561 - evaluation_logger_Attraction-29 - INFO - Function Calls: 
[
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Times Square"
        }
    }
]

2025-08-25 13:04:01,562 - evaluation_logger_Attraction-29 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Times Square"
        }
    },
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "prleymi2kmdp-times-square-photoshoot"
        }
    }
]

2025-08-25 13:04:01,562 - evaluation_logger_Attraction-29 - INFO - Start compare_single_call: 
{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Times Square'}}
{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Times Square'}}
2025-08-25 13:04:01,562 - evaluation_logger_Attraction-29 - INFO - Rule-based compare success.
2025-08-25 13:04:01,562 - evaluation_logger_Attraction-29 - INFO - Success matched: [{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Times Square'}}]
2025-08-25 13:04:01,562 - evaluation_logger_Attraction-29 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "products": [
                {
                    "id": "eyJwaW5uZWRQcm9kdWN0IjoiUFJMZXltaTJrTURwIiwidWZpIjoyMDA4ODMyNX0=",
                    "__typename": "AttractionsSearchProductSuggestion",
                    "title": "Times Square Photoshoot",
                    "productId": "PRLeymi2kMDp",
                    "productSlug": "prleymi2kmdp-times-square-photoshoot",
                    "taxonomySlug": "tours",
                    "cityUfi": 20088325,
                    "cityName": "New York",
                    "countryCode": "us"
                }
            ]
        }
    }
]

2025-08-25 13:04:10,634 - evaluation_logger_Attraction-29 - INFO - Function Calls: 
[
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "prleymi2kmdp-times-square-photoshoot"
        }
    }
]

2025-08-25 13:04:10,634 - evaluation_logger_Attraction-29 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "prleymi2kmdp-times-square-photoshoot"
        }
    }
]

2025-08-25 13:04:10,634 - evaluation_logger_Attraction-29 - INFO - Start compare_single_call: 
{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'prleymi2kmdp-times-square-photoshoot'}}
{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'prleymi2kmdp-times-square-photoshoot'}}
2025-08-25 13:04:10,634 - evaluation_logger_Attraction-29 - INFO - Rule-based compare success.
2025-08-25 13:04:10,634 - evaluation_logger_Attraction-29 - INFO - Success matched: [{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'prleymi2kmdp-times-square-photoshoot'}}]
2025-08-25 13:04:10,635 - evaluation_logger_Attraction-29 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "__typename": "AttractionsProduct",
            "additionalInfo": "Wheelchair accessible\n\nInfants and small children can ride in a pram or stroller\n\nService animals allowed\n\nPublic transportation options are available nearby\n\nTransportation options are wheelchair accessible\n\nAll areas and surfaces are wheelchair accessible\n\nSuitable for all physical fitness levels\n\nPlease bring your ticket with you to the attraction.\n\nBe aware that operators may cancel for unforeseen reasons.\n\nYou need to be 18 years or older to book.",
            "applicableTerms": [
                {
                    "__typename": "TermsConditions",
                    "policyProvider": "Booking.com"
                },
                {
                    "__typename": "TermsConditions",
                    "policyProvider": "Viator"
                }
            ],
            "cancellationPolicy": {
                "__typename": "AttractionsCancellationPolicy",
                "hasFreeCancellation": true
            },
            "description": "Perhaps you're on a once in a lifetime trip, or maybe you're just celebrating? What better way to remember the moment than by having it framed perfectly, in high quality! \n\nDon't rely on a selfie to capture this epic moment, get a professional photographer to capture it for you, framing each moment perfectly and ensuring you have memories to treasure forever! \n\nYour photographer is local to the area, so not only will you get high quality images from the best places, you'll also see the City with an expert.",
            "id": "PRLeymi2kMDp",
            "isBookable": true,
            "labels": [
                {
                    "__typename": "AttractionsLabel",
                    "text": "Free cancellation",
                    "type": "free_cancellation"
                }
            ],
            "name": "Times Square Photoshoot",
            "offers": [
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFVnCPRJx6ez"
                },
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFrPL3ZXKvGl"
                },
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFM4RnRau0sw"
                },
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFBCRoN0qWNB"
                }
            ],
            "onSiteRequirements": {
                "__typename": "OnSiteRequirements"
            },
            "operatedBy": "Picster",
            "representativePrice": {
                "__typename": "AttractionsPrice",
                "chargeAmount": 107.49,
                "currency": "USD",
                "publicAmount": 107.49
            },
            "reviews": {
                "__typename": "AttractionsGetReviewsResponse",
                "total": 0
            },
            "slug": "prleymi2kmdp-times-square-photoshoot",
            "supportedFeatures": {
                "__typename": "AttractionsProductSupportedFeatures",
                "nativeApp": true,
                "nativeAppBookProcess": true,
                "liveAvailabilityCheckSupported": true
            },
            "ufiDetails": {
                "__typename": "AttractionLocationResponse",
                "ufi": 20088325,
                "bCityName": "New York"
            },
            "whatsIncluded": [
                "High Quality Photos",
                "Expert local guide",
                "Access to secure and private gallery"
            ]
        }
    }
]

2025-08-25 13:07:18,155 - evaluation_logger_Attraction-29 - INFO - Final Response: <｜begin▁of▁sentence｜><｜fim▁begin｜>
practica-3


practica3.py


import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Parámetros del sistema
m = 1.0  # masa (kg)
k = 1.0  # constante del resorte (N/m)
b = 0.5  # coeficiente de amortiguamiento (N·s/m)

# Ecuación diferencial: m * x'' + b * x' + k * x = 0
def oscilador_amortiguado(t, y):
    x, v = y
    dxdt = v
    dvdt = -(b/m)*v - (k/m)*x
    return [dxdt, dvdt]

# Condiciones iniciales
x0 = 1.0  # posición inicial (m)
v0 = 0.0  # velocidad inicial (m/s)
y0 = [x0, v0]

# Tiempo de integración
t_span = (0, 20)
t_eval = np.linspace(0, 20, 1000)

# Resolver la ecuación diferencial
sol = solve_ivp(oscilador_amortiguado, t_span, y0, t_eval=t_eval, method='RK45')

# Extraer resultados
x = sol.y[0]
v = sol.y[1]
t = sol.t

# Calcular la energía total: E = (1/2)*m*v^2 + (1/2)*k*x^2
energia_cinetica = 0.5 * m * v**2
energia_potencial = 0.5 * k * x**2
energia_total = energia_cinetica + energia_potencial

# Gráficas
plt.figure(figsize=(12, 8))

# Posición vs tiempo
plt.subplot(2, 2, 1)
plt.plot(t, x, label='Posición (m)')
plt.xlabel('Tiempo (s)')
plt.ylabel('Posición (m)')
plt.title('Posición vs Tiempo')
plt.grid(True)
plt.legend()

# Velocidad vs tiempo
plt.subplot(2, 2, 2)
plt.plot(t, v, label='Velocidad (m/s)', color='orange')
plt.xlabel('Tiempo (s)')
plt.ylabel('Velocidad (m/s)')
plt.title('Velocidad vs Tiempo')
plt.grid(True)
plt.legend()

# Energías vs tiempo
plt.subplot(2, 2, 3)
plt.plot(t, energia_cinetica, label='Energía Cinética (J)', color='red')
plt.plot(t, energia_potencial, label='Energía Potencial (J)', color='blue')
plt.plot(t, energia_total, label='Energía Total (J)', color='green')
plt.xlabel('Tiempo (s)')
plt.ylabel('Energía (J)')
plt.title('Energías vs Tiempo')
plt.grid(True)
plt.legend()

# Diagrama de fase (posición vs velocidad)
plt.subplot(2, 2, 4)
plt.plot(x, v)
plt.xlabel('Posición (m)')
plt.ylabel('Velocidad (m/s)')
plt.title('Diagrama de Fase')
plt.grid(True)

plt.tight_layout()
plt.show()

# Imprimir información sobre el sistema
print(f"Parámetros del sistema:")
print(f"Masa: {m} kg")
print(f"Constante del resorte: {k} N/m")
print(f"Coeficiente de amortiguamiento: {b} N·s/m")
print(f"Condiciones iniciales: x₀ = {x0} m, v₀ = {v0} m/s")

# Calcular y mostrar el factor de amortiguamiento
zeta = b / (2 * np.sqrt(m * k))
print(f"Factor de amortiguamiento (ζ): {zeta:.3f}")

if zeta < 1:
    print("Sistema subamortiguado (oscilatorio)")
elif zeta == 1:
    print("Sistema críticamente amortiguado")
else:
    print("Sistema sobreamortiguado")

# Mostrar la pérdida de energía
energia_inicial = energia_total[0]
energia_final = energia_total[-1]
perdida_energia = energia_inicial - energia_final
print(f"Pérdida de energía total: {perdida_energia:.6f} J")
print(f"Energía inicial: {energia_inicial:.6f} J")
print(f"Energía final: {energia_final:.6f} J")

README.md


# Práctica 3: Oscilador Armónico Amortiguado

## Descripción
Este proyecto simula el comportamiento de un oscilador armónico amortiguado utilizando Python. El sistema consiste en una masa unida a un resorte con amortiguamiento, y se analiza su evolución temporal, diagrama de fase y conservación de energía.

## Características
- **Modelo físico**: Sistema masa-resorte con amortiguamiento viscoso
- **Ecuación diferencial**: m·x'' + b·x' + k·x = 0
- **Parámetros ajustables**: masa (m), constante del resorte (k), coeficiente de amortiguamiento (b)
- **Visualizaciones**: 
  - Posición vs tiempo
  - Velocidad vs tiempo
  - Energías vs tiempo
  - Diagrama de fase

## Requisitos
- Python 3.x
- NumPy
- Matplotlib
- SciPy

## Instalación
```bash
pip install numpy matplotlib scipy
```

## Uso
Ejecutar el script principal:
```bash
python practica3.py
```

## Resultados
El programa genera:
1. Gráficas de posición, velocidad y energías vs tiempo
2. Diagrama de fase (posición vs velocidad)
3. Información sobre el tipo de amortiguamiento
4. Análisis de conservación de energía

## Parámetros por defecto
- Masa: 1.0 kg
- Constante del resorte: 1.0 N/m
- Coeficiente de amortiguamiento: 0.5 N·s/m
- Posición inicial: 1.0 m
- Velocidad inicial: 0.0 m/s

## Personalización
Modificar los valores en el código para estudiar diferentes casos:
- Sistema subamortiguado (ζ < 1)
- Sistema críticamente amortiguado (ζ = 1)
- Sistema sobreamortiguado (ζ > 1)

## Autor
[Tu nombre]
[Fecha]

## Licencia
Este proyecto es de código abierto y está disponible bajo la licencia MIT.

practica3_avanzado.py


import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
from matplotlib.animation import FuncAnimation
from IPython.display import HTML

# Parámetros del sistema
m = 1.0  # masa (kg)
k = 1.0  # constante del resorte (N/m)
b = 0.5  # coeficiente de amortiguamiento (N·s/m)

# Ecuación diferencial: m * x'' + b * x' + k * x = 0
def oscilador_amortiguado(t, y):
    x, v = y
    dxdt = v
    dvdt = -(b/m)*v - (k/m)*x
    return [dxdt, dvdt]

# Condiciones iniciales
x0 = 1.0  # posición inicial (m)
v0 = 0.0  # velocidad inicial (m/s)
y0 = [x0, v0]

# Tiempo de integración
t_span = (0, 20)
t_eval = np.linspace(0, 20, 1000)

# Resolver la ecuación diferencial
sol = solve_ivp(oscilador_amortiguado, t_span, y0, t_eval=t_eval, method='RK45')

# Extraer resultados
x = sol.y[0]
v = sol.y[1]
t = sol.t

# Calcular la energía total: E = (1/2)*m*v^2 + (1/2)*k*x^2
energia_cinetica = 0.5 * m * v**2
energia_potencial = 0.5 * k * x**2
energia_total = energia_cinetica + energia_potencial

# Gráficas estáticas
plt.figure(figsize=(15, 10))

# Posición vs tiempo
plt.subplot(2, 3, 1)
plt.plot(t, x, label='Posición (m)', color='blue')
plt.xlabel('Tiempo (s)')
plt.ylabel('Posición (m)')
plt.title('Posición vs Tiempo')
plt.grid(True, alpha=0.3)
plt.legend()

# Velocidad vs tiempo
plt.subplot(2, 3, 2)
plt.plot(t, v, label='Velocidad (m/s)', color='orange')
plt.xlabel('Tiempo (s)')
plt.ylabel('Velocidad (m/s)')
plt.title('Velocidad vs Tiempo')
plt.grid(True, alpha=0.3)
plt.legend()

# Energías vs tiempo
plt.subplot(2, 3, 3)
plt.plot(t, energia_cinetica, label='Energía Cinética (J)', color='red', linewidth=2)
plt.plot(t, energia_potencial, label='Energía Potencial (J)', color='blue', linewidth=2)
plt.plot(t, energia_total, label='Energía Total (J)', color='green', linewidth=3)
plt.xlabel('Tiempo (s)')
plt.ylabel('Energía (J)')
plt.title('Energías vs Tiempo')
plt.grid(True, alpha=0.3)
plt.legend()

# Diagrama de fase (posición vs velocidad)
plt.subplot(2, 3, 4)
plt.plot(x, v, color='purple', linewidth=2)
plt.xlabel('Posición (m)')
plt.ylabel('Velocidad (m/s)')
plt.title('Diagrama de Fase')
plt.grid(True, alpha=0.3)

# Aceleración vs tiempo
aceleracion = np.gradient(v, t)
plt.subplot(2, 3, 5)
plt.plot(t, aceleracion, label='Aceleración (m/s²)', color='brown')
plt.xlabel('Tiempo (s)')
plt.ylabel('Aceleración (m/s²)')
plt.title('Aceleración vs Tiempo')
plt.grid(True, alpha=0.3)
plt.legend()

# Fuerza vs posición
fuerza = -k * x - b * v
plt.subplot(2, 3, 6)
plt.plot(x, fuerza, label='Fuerza (N)', color='darkcyan')
plt.xlabel('Posición (m)')
plt.ylabel('Fuerza (N)')
plt.title('Fuerza vs Posición')
plt.grid(True, alpha=0.3)
plt.legend()

plt.tight_layout()
plt.show()

# Análisis adicional
print("="*50)
print("ANÁLISIS DEL OSCILADOR ARMÓNICO AMORTIGUADO")
print("="*50)

# Parámetros del sistema
zeta = b / (2 * np.sqrt(m * k))
omega_n = np.sqrt(k/m)  # Frecuencia natural
omega_d = omega_n * np.sqrt(1 - zeta**2) if zeta < 1 else 0  # Frecuencia amortiguada

print(f"Parámetros del sistema:")
print(f"Masa: {m} kg")
print(f"Constante del resorte: {k} N/m")
print(f"Coeficiente de amortiguamiento: {b} N·s/m")
print(f"Frecuencia natural (ωₙ): {omega_n:.3f} rad/s")
print(f"Factor de amortiguamiento (ζ): {zeta:.3f}")

if zeta < 1:
    print("Sistema subamortiguado (oscilatorio)")
    print(f"Frecuencia amortiguada (ω_d): {omega_d:.3f} rad/s")
    print(f"Período amortiguado: {2*np.pi/omega_d:.3f} s")
elif zeta == 1:
    print("Sistema críticamente amortiguado")
else:
    print("Sistema sobreamortiguado")

# Energía
energia_inicial = energia_total[0]
energia_final = energia_total[-1]
perdida_energia = energia_inicial - energia_final
tasa_perdida = perdida_energia / t[-1]

print(f"\nAnálisis energético:")
print(f"Energía inicial: {energia_inicial:.6f} J")
print(f"Energía final: {energia_final:.6f} J")
print(f"Pérdida de energía total: {perdida_energia:.6f} J")
print(f"Tasa de pérdida de energía: {tasa_perdida:.6f} J/s")

# Encontrar máximos y mínimos
max_pos = np.max(x)
min_pos = np.min(x)
max_vel = np.max(v)
min_vel = np.min(v)

print(f"\nValores extremos:")
print(f"Posición máxima: {max_pos:.3f} m")
print(f"Posición mínima: {min_pos:.3f} m")
print(f"Velocidad máxima: {max_vel:.3f} m/s")
print(f"Velocidad mínima: {min_vel:.3f} m/s")

# Tiempo para alcanzar amplitud específica
umbral_amplitud = 0.1
indices = np.where(np.abs(x) < umbral_amplitud)[0]
if len(indices) > 0:
    tiempo_umbral = t[indices[0]]
    print(f"Tiempo para alcanzar amplitud < {umbral_amplitud} m: {tiempo_umbral:.2f} s")

# Gráfica adicional: Logaritmo de la amplitud vs tiempo
plt.figure(figsize=(10, 6))
amplitud = np.abs(x)
log_amplitud = np.log(amplitud[amplitud > 0])

# Ajuste lineal para encontrar la tasa de decaimiento
mask = (t > 1) & (t < 15) & (amplitud > 0)  # Excluir puntos iniciales y finales
if np.sum(mask) > 2:
    coef = np.polyfit(t[mask], np.log(amplitud[mask]), 1)
    tasa_decaimiento = -coef[0]  # gamma en e^(-gamma*t)
    print(f"Tasa de decaimiento experimental: {tasa_decaimiento:.3f} 1/s")
    print(f"Tasa de decaimiento teórica (b/2m): {b/(2*m):.3f} 1/s")
    
    plt.plot(t[mask], np.log(amplitud[mask]), 'o', label='Datos', alpha=0.6)
    plt.plot(t[mask], coef[0]*t[mask] + coef[1], 'r-', 
             label=f'Ajuste: y = {coef[0]:.3f}t + {coef[1]:.3f}')
else:
    plt.plot(t[amplitud > 0], log_amplitud, 'o', label='Datos', alpha=0.6)

plt.xlabel('Tiempo (s)')
plt.ylabel('ln(Amplitud)')
plt.title('Decaimiento Logarítmico de la Amplitud')
plt.grid(True, alpha=0.3)
plt.legend()
plt.show()

# Animación (opcional - descomentar para usar)
"""
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

# Configurar el primer subplot para la animación del oscilador
ax1.set_xlim(-1.5, 1.5)
ax1.set_ylim(-1, 1)
ax1.set_aspect('equal')
ax1.grid(True, alpha=0.3)
ax1.set_title('Oscilador Armónico Amortiguado')
ax1.set_xlabel('Posición (m)')

# Configurar el segundo subplot para el diagrama de fase
ax2.set_xlim(-1.5, 1.5)
ax2.set_ylim(-1, 1)
ax2.set_xlabel('Posición (m)')
ax2.set_ylabel('Velocidad (m/s)')
ax2.set_title('Diagrama de Fase')
ax2.grid(True, alpha=0.3)

# Elementos de la animación
mass, = ax1.plot([], [], 'o', markersize=20, color='blue')
spring, = ax1.plot([], [], 'k-', linewidth=2)
phase_line, = ax2.plot([], [], 'b-', alpha=0.5)
phase_point, = ax2.plot([], [], 'ro', markersize=8)

def init():
    mass.set_data([], [])
    spring.set_data([], [])
    phase_line.set_data([], [])
    phase_point.set_data([], [])
    return mass, spring, phase_line, phase_point

def animate(i):
    # Actualizar el oscilador
    spring_x = np.linspace(0, x[i], 50)
    spring_y = 0.1 * np.sin(spring_x * 10)
    spring.set_data(spring_x, spring_y)
    mass.set_data([x[i]], [0])
    
    # Actualizar el diagrama de fase
    phase_line.set_data(x[:i+1], v[:i+1])
    phase_point.set_data([x[i]], [v[i]])
    
    return mass, spring, phase_line, phase_point

ani = FuncAnimation(fig, animate, frames=len

2025-08-25 13:07:26,003 - evaluation_logger_Attraction-29 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about Times Square.'}
2025-08-25 13:07:31,660 - evaluation_logger_Attraction-29 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 13:07:31,660 - evaluation_logger_Attraction-29 - INFO - Message: Success.
2025-08-25 13:07:31,660 - evaluation_logger_Attraction-29 - INFO - Success turn num = 2
2025-08-25 13:07:31,660 - evaluation_logger_Attraction-29 - INFO - ----------------------------------------------------------------------------------------------------
