2025-08-25 13:24:46,541 - evaluation_logger_Flights-19 - INFO - Test Example Flights-19
2025-08-25 13:24:46,541 - evaluation_logger_Flights-19 - INFO - Query: Arrange the fastest business class flight for two members of our team from Paris to Toronto on November 25, 2024. The other team will meet us at Toronto Pearson International Airport.
2025-08-25 13:24:54,489 - evaluation_logger_Flights-19 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Paris"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Toronto Pearson International Airport"
        }
    }
]

2025-08-25 13:24:54,489 - evaluation_logger_Flights-19 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Toronto Pearson International Airport"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Paris"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "PAR.CITY",
            "toId": "YTO.CITY",
            "departDate": "2024-11-25",
            "cabinClass": "BUSINESS",
            "sort": "FASTEST",
            "adults": 2
        }
    }
]

2025-08-25 13:24:54,489 - evaluation_logger_Flights-19 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Paris'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Paris'}}
2025-08-25 13:24:54,489 - evaluation_logger_Flights-19 - INFO - Rule-based compare success.
2025-08-25 13:24:54,489 - evaluation_logger_Flights-19 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Toronto Pearson International Airport'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Toronto Pearson International Airport'}}
2025-08-25 13:24:54,489 - evaluation_logger_Flights-19 - INFO - Rule-based compare success.
2025-08-25 13:24:54,489 - evaluation_logger_Flights-19 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Paris'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Toronto Pearson International Airport'}}]
2025-08-25 13:24:54,489 - evaluation_logger_Flights-19 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "PAR.CITY",
                "type": "CITY",
                "name": "Paris",
                "code": "PAR",
                "regionName": "Ile de France",
                "country": "FR",
                "countryName": "France"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "YTO.CITY",
                "type": "CITY",
                "name": "Toronto",
                "code": "YTO",
                "regionName": "Ontario",
                "country": "CA",
                "countryName": "Canada"
            }
        ]
    }
]

2025-08-25 13:25:05,593 - evaluation_logger_Flights-19 - INFO - Function Calls: 
[
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "PAR.CITY",
            "toId": "YTO.CITY",
            "departDate": "2024-11-25",
            "sort": "FASTEST",
            "cabinClass": "BUSINESS",
            "adults": 2
        }
    }
]

2025-08-25 13:25:05,593 - evaluation_logger_Flights-19 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flights",
        "arguments": {
            "adults": 2,
            "cabinClass": "BUSINESS",
            "departDate": "2024-11-25",
            "fromId": "PAR.CITY",
            "sort": "FASTEST",
            "toId": "YTO.CITY"
        }
    }
]

2025-08-25 13:25:05,593 - evaluation_logger_Flights-19 - INFO - Start compare_single_call: 
{'name': 'Search_Flights', 'arguments': {'adults': 2, 'cabinClass': 'BUSINESS', 'departDate': '2024-11-25', 'fromId': 'PAR.CITY', 'sort': 'FASTEST', 'toId': 'YTO.CITY'}}
{'name': 'Search_Flights', 'arguments': {'adults': 2, 'cabinClass': 'BUSINESS', 'departDate': '2024-11-25', 'fromId': 'PAR.CITY', 'sort': 'FASTEST', 'toId': 'YTO.CITY'}}
2025-08-25 13:25:05,593 - evaluation_logger_Flights-19 - INFO - Rule-based compare success.
2025-08-25 13:25:05,593 - evaluation_logger_Flights-19 - INFO - Success matched: [{'name': 'Search_Flights', 'arguments': {'adults': 2, 'cabinClass': 'BUSINESS', 'departDate': '2024-11-25', 'fromId': 'PAR.CITY', 'sort': 'FASTEST', 'toId': 'YTO.CITY'}}]
2025-08-25 13:25:05,594 - evaluation_logger_Flights-19 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "flightOffers": [
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2Qa2_bIBiFf037zRjwJXYlNGWOvTbDoY0vUz4hh9gObVcmwxqPXz9mT6BznnOExAtXY37pB98f3uV4Ndr7rcGojBo70wOhfvrD5OSs1Jv8GP1OTv7z9niqGY4OrPWx77klHrIv_Ww8PQlyL8896IiXpumKWhBU_ceJxCDMw330ctwvlVCGhCBCMPr6yHK0WcuJfHuBcRov6ULKnb4xm2NmC8bsCTLbzOWuzao8gcdWbcq6fT7I23xoEkx3OartSbf2WNJCwDpzfbvFNENV86pN2bxpWhd7mkFbVjdT2lzT5vrk8kyLgi5X9sLNDEC4SdGSVadJuJIwBMEVL4ZU9LEp1jHdQ5INCqI1zQQFQRLd6_69F0aqj-_9H7ItgiT23MepTxx6uzucdYOUZ-TgLti6PXLs9Mqh0463zNmZp7EzsdqFJ-EQRYnDfjk18NCp5BhA8C-_8qcfziwXgRzUX8KsUtTbAQAA",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CDG",
                                "name": "Paris - Charles de Gaulle Airport",
                                "city": "PAR",
                                "cityName": "Paris",
                                "country": "FR",
                                "countryName": "France"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "YYZ",
                                "name": "Toronto Pearson International Airport",
                                "city": "YTO",
                                "cityName": "Toronto",
                                "country": "CA",
                                "countryName": "Canada"
                            },
                            "departureTime": "2024-11-25T19:00:00",
                            "arrivalTime": "2024-11-25T21:25:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-25T19:00:00",
                                    "arrivalTime": "2024-11-25T21:25:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CDG",
                                        "name": "Paris - Charles de Gaulle Airport",
                                        "city": "PAR",
                                        "cityName": "Paris",
                                        "country": "FR",
                                        "countryName": "France"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "YYZ",
                                        "name": "Toronto Pearson International Airport",
                                        "city": "YTO",
                                        "cityName": "Toronto",
                                        "country": "CA",
                                        "countryName": "Canada"
                                    },
                                    "cabinClass": "BUSINESS",
                                    "flightInfo": {
                                        "flightNumber": 386,
                                        "carrierInfo": {
                                            "operatingCarrier": "AF",
                                            "marketingCarrier": "AF"
                                        }
                                    },
                                    "carriers": [
                                        "AF",
                                        "AF"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Air France",
                                            "code": "AF"
                                        },
                                        {
                                            "name": "Air France",
                                            "code": "AF"
                                        }
                                    ],
                                    "totalTime": 30300,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A350"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 30300,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QbXOjIBSFf03zTQTURDvDdFKj22YxNvGlzSfGEDW03bIjtHH59Uu1A3POc-5lhgsXrf-qW9ft3kV_0cr5VKCXWvaNbgGXf9xusHKS8k189G4jBvdpfTiWOQ52ee1i17GL38Z37agdNXCyEKcWNMSJomhGxQkqfnAgS-An_jbYH7ZTiUtNfBAgGNw_5Ak6zsWB_NrDZbSc0plkG3XNTYJzk-a5OcLcVGO2qeMiCeGhlqusrJ924jruqhDTTYJKc1S1OWQ05bCMbb1eYxqjonpVOqveFC3TLY2hyYqrzkyiaHV5tHmkaUqnK1tuZwbAX0VoyrJRxJ-Ja4LgjGdNCvpQpfOY9iHhCnnBnEaCPC8MFqp9b7kW8uN3-4-sU9t27MfJL-w7mxscN-cv0TcWbry13T3DVi8MWm1Y9mLtxKKlNT7bmYV-FwShxXY61THfqmAYQPCdX9njszXDuCc6-R_6MXWl2wEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CDG",
                                "name": "Paris - Charles de Gaulle Airport",
                                "city": "PAR",
                                "cityName": "Paris",
                                "country": "FR",
                                "countryName": "France"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "YYZ",
                                "name": "Toronto Pearson International Airport",
                                "city": "YTO",
                                "cityName": "Toronto",
                                "country": "CA",
                                "countryName": "Canada"
                            },
                            "departureTime": "2024-11-25T13:45:00",
                            "arrivalTime": "2024-11-25T16:15:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-25T13:45:00",
                                    "arrivalTime": "2024-11-25T16:15:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CDG",
                                        "name": "Paris - Charles de Gaulle Airport",
                                        "city": "PAR",
                                        "cityName": "Paris",
                                        "country": "FR",
                                        "countryName": "France"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "YYZ",
                                        "name": "Toronto Pearson International Airport",
                                        "city": "YTO",
                                        "cityName": "Toronto",
                                        "country": "CA",
                                        "countryName": "Canada"
                                    },
                                    "cabinClass": "BUSINESS",
                                    "flightInfo": {
                                        "flightNumber": 356,
                                        "carrierInfo": {
                                            "operatingCarrier": "AF",
                                            "marketingCarrier": "AF"
                                        }
                                    },
                                    "carriers": [
                                        "AF",
                                        "AF"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Air France",
                                            "code": "AF"
                                        },
                                        {
                                            "name": "Air France",
                                            "code": "AF"
                                        }
                                    ],
                                    "totalTime": 30600,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "777"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 30600,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2Q0XKiMBiFn8beESAQkM5kdlRwrUKoEmjtTQYjIm3X7JK0Ik-_ETr555zznWQmmZyV-isfTfP02dRnJY0vCWqhRF2qCnDxxzy1Wg5CfDSX2iyb1nye7fY0hYikhQlNQy_-uPhVdcqQLccPzaECJTaCIBij5NhB2U9usQfcyF2j7W49VFwo7AJkW2i-SiNojWWLfxMCvflAR5yE8pr2Mz-hiU_etz6h0ZXk6yfa75YvVHYkn8I4jGza72VCi2fSdK8kusqi3yX3Pg_3Mi7WWXqzuiy7qiT_kDFNunhh9cmdi_lG5y4Ol290O3FCPcPVFefYBsD1A3tgUUrsuD-ZK2yP7xVHhbN4lS-9ERUOAs-33IE6bDvOFD3I6rPiqhGXTXXD8cqbQtfQnyi-tS8mcHH4h2Df6TBxZnpqBrWemaW1ZBuk7cACTxsf7ciCqY34fb8aTp2Yq7VhEFjgzu_s6UVbz-xbXzqXr_-byvII6QEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CDG",
                                "name": "Paris - Charles de Gaulle Airport",
                                "city": "PAR",
                                "cityName": "Paris",
                                "country": "FR",
                                "countryName": "France"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "YYZ",
                                "name": "Toronto Pearson International Airport",
                                "city": "YTO",
                                "cityName": "Toronto",
                                "country": "CA",
                                "countryName": "Canada"
                            },
                            "departureTime": "2024-11-25T12:05:00",
                            "arrivalTime": "2024-11-25T14:50:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-25T12:05:00",
                                    "arrivalTime": "2024-11-25T14:50:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CDG",
                                        "name": "Paris - Charles de Gaulle Airport",
                                        "city": "PAR",
                                        "cityName": "Paris",
                                        "country": "FR",
                                        "countryName": "France"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "YYZ",
                                        "name": "Toronto Pearson International Airport",
                                        "city": "YTO",
                                        "cityName": "Toronto",
                                        "country": "CA",
                                        "countryName": "Canada"
                                    },
                                    "cabinClass": "BUSINESS",
                                    "flightInfo": {
                                        "flightNumber": 6824,
                                        "planeType": "333",
                                        "carrierInfo": {
                                            "operatingCarrier": "AC",
                                            "marketingCarrier": "LH",
                                            "operatingCarrierDisclosureText": "Air Canada"
                                        }
                                    },
                                    "carriers": [
                                        "LH",
                                        "AC"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        },
                                        {
                                            "name": "Air Canada",
                                            "code": "AC"
                                        }
                                    ],
                                    "totalTime": 31500,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A330"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "2C",
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 31500,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2Q2Y6CMBiFn0bvKLQsikkzYVDHURYX0HjVQK2IOnZC64A8_VQxbc75_iXpSU9S_oqRrh-vZXGSQrsLUHDJi0wyQPmPfqyU5JxfyluhZ2WlL731PomRHcVbHemaOnTkf7BGaqKiuF_mDGRYc123Q0ExfFOFHWBNrLm9Ws9fLcoltoANDftzFo8Dq2tW-GsVLab2qzrgcCzquPUGUSIeimGYeHB1OS2jyTaN2wlM2r0Ik-0yKusmSocomBZw9-SthwIfbtKzkGF6EUEynQe-0YabulbeBOP94_UEoyoiANbA7YLyTLwjcyoxNDo8SLwJZunU6crnwDAc1E0bDE1zaPcFuzIqS35bsAfeRK5jDjT1U_wPWZrfQz6FEslcQc_01C0IUnoihtKMLGxlOXEdZbSzA3GHGcuHCtlr60gspSVBwADP-ky-d8paYhrnO23-Abd2zljNAQAA",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CDG",
                                "name": "Paris - Charles de Gaulle Airport",
                                "city": "PAR",
                                "cityName": "Paris",
                                "country": "FR",
                                "countryName": "France"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "YYZ",
                                "name": "Toronto Pearson International Airport",
                                "city": "YTO",
                                "cityName": "Toronto",
                                "country": "CA",
                                "countryName": "Canada"
                            },
                            "departureTime": "2024-11-25T12:05:00",
                            "arrivalTime": "2024-11-25T14:50:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-25T12:05:00",
                                    "arrivalTime": "2024-11-25T14:50:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CDG",
                                        "name": "Paris - Charles de Gaulle Airport",
                                        "city": "PAR",
                                        "cityName": "Paris",
                                        "country": "FR",
                                        "countryName": "France"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "YYZ",
                                        "name": "Toronto Pearson International Airport",
                                        "city": "YTO",
                                        "cityName": "Toronto",
                                        "country": "CA",
                                        "countryName": "Canada"
                                    },
                                    "cabinClass": "BUSINESS",
                                    "flightInfo": {
                                        "flightNumber": 9637,
                                        "planeType": "333",
                                        "carrierInfo": {
                                            "operatingCarrier": "AC",
                                            "marketingCarrier": "SN"
                                        }
                                    },
                                    "carriers": [
                                        "SN",
                                        "AC"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Brussels Airlines",
                                            "code": "SN"
                                        },
                                        {
                                            "name": "Air Canada",
                                            "code": "AC"
                                        }
                                    ],
                                    "totalTime": 31500,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A330"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "2C",
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 31500,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2Qa2-CMBiFf838RqEFFEyahaHOCxcvqHNfGiwVUWcdrTd-_Sosbc55znvepEn3Ul5EV9d3pyLfS6FdBci55HkqGaD8R9-VSracH4tzrqdFqU-9-SaJkR3FKx3pmjq067-zh9RESXGr2DKQYs113QYFxc4_lbgNrL41tmfzcT2iXGIL2NCwP4Zx7_urGZb4MxpGo1WdMhz2xD2uvE6YiKdiGCYenB3306i_ecZVHybVRoTJahoV90e0dFAwyOH6xSsPBT5cLA9ChsujCJLBOPCNKlzc78ofQW_zrJ9glGIIgNVxYZ15KrDZEJUYGg1mEi-C4XLQbuKrQB1kNO0DQ9N07JZgJ0Zlwc8T9sSe73RMTX0UvyFL89-Qn7KsvCIFb6anbk6Q0j0xlKZkYivbEretjDaWEZduM-PVs3prRyylBUHAAK98IKO1soqg38vNKf4AqAG8QMwBAAA.",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "CDG",
                                "name": "Paris - Charles de Gaulle Airport",
                                "city": "PAR",
                                "cityName": "Paris",
                                "country": "FR",
                                "countryName": "France"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "YYZ",
                                "name": "Toronto Pearson International Airport",
                                "city": "YTO",
                                "cityName": "Toronto",
                                "country": "CA",
                                "countryName": "Canada"
                            },
                            "departureTime": "2024-11-25T12:05:00",
                            "arrivalTime": "2024-11-25T14:50:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-25T12:05:00",
                                    "arrivalTime": "2024-11-25T14:50:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "CDG",
                                        "name": "Paris - Charles de Gaulle Airport",
                                        "city": "PAR",
                                        "cityName": "Paris",
                                        "country": "FR",
                                        "countryName": "France"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "YYZ",
                                        "name": "Toronto Pearson International Airport",
                                        "city": "YTO",
                                        "cityName": "Toronto",
                                        "country": "CA",
                                        "countryName": "Canada"
                                    },
                                    "cabinClass": "BUSINESS",
                                    "flightInfo": {
                                        "flightNumber": 873,
                                        "planeType": "333",
                                        "carrierInfo": {
                                            "operatingCarrier": "AC",
                                            "marketingCarrier": "AC"
                                        }
                                    },
                                    "carriers": [
                                        "AC",
                                        "AC"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Air Canada",
                                            "code": "AC"
                                        },
                                        {
                                            "name": "Air Canada",
                                            "code": "AC"
                                        }
                                    ],
                                    "totalTime": 31500,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A330"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "2C",
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 31500,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                }
            ],
            "flightDeals": [
                {
                    "key": "CHEAPEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_z2Qb2-qMBTGP832jlLKH2FJszBwVx3IpMDiqwYrIursDe0ujE9_ixjTpuf3POe0Pe1Ryr_iRdcPl6Y-SqH9CFBzyetSVoDxb_3QqmXH-bm51nrZtPqnn26zBNnrpNCRrqnBXoLXqpeaaBl-bnYVKLHmed6EgmHjTi12gDW3VvYmXd0sxiW2gG1A-22RhCsymS3-s_kg6fKm9jgOui4K_dkjhsJIhmWXDHkfh0VA5i5Mi80szorPddP169xFUTg3smEriiGNo3cGs0D5hY-SX9gT0sk4P4soi_sogEM86nOOFPe3KyumWgbAmnlT47wU9ydwJrEBJ9xLTKJF_u5MUiUcz7nv6LFhmq79LKpLxWTDrx_VLyaWa7ozTX0c_4csbUWJZSD7obdKIxOZD8N_QsE3-0HXk4In01ezpghAgBQdKVQEFZX0zQLrBSCjvaOeowKbwp4apVO6Y1VFNdc-jCUHaqm1uZ00Zk50-aXCQKuTcdld_wNwnJBMDwIAAA..",
                    "price": {
                        "currencyCode": "USD",
                        "units": 1696,
                        "nanos": 910000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 848,
                                    "nanos": 460000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 538,
                                    "nanos": 860000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 309,
                                    "nanos": 600000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 849
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 848,
                                    "nanos": 460000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 849
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        },
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 848,
                                    "nanos": 450000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 538,
                                    "nanos": 850000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 309,
                                    "nanos": 600000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 849
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 848,
                                    "nanos": 450000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 849
                                }
                            },
                            "travellerReference": "2",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "FASTEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2Qa2_bIBiFf037zRjwJXYlNGWOvTbDoY0vUz4hh9gObVcmwxqPXz9mT6BznnOExAtXY37pB98f3uV4Ndr7rcGojBo70wOhfvrD5OSs1Jv8GP1OTv7z9niqGY4OrPWx77klHrIv_Ww8PQlyL8896IiXpumKWhBU_ceJxCDMw330ctwvlVCGhCBCMPr6yHK0WcuJfHuBcRov6ULKnb4xm2NmC8bsCTLbzOWuzao8gcdWbcq6fT7I23xoEkx3OartSbf2WNJCwDpzfbvFNENV86pN2bxpWhd7mkFbVjdT2lzT5vrk8kyLgi5X9sLNDEC4SdGSVadJuJIwBMEVL4ZU9LEp1jHdQ5INCqI1zQQFQRLd6_69F0aqj-_9H7ItgiT23MepTxx6uzucdYOUZ-TgLti6PXLs9Mqh0463zNmZp7EzsdqFJ-EQRYnDfjk18NCp5BhA8C-_8qcfziwXgRzUX8KsUtTbAQAA",
                    "price": {
                        "currencyCode": "USD",
                        "units": 8713,
                        "nanos": 560000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 4356,
                                    "nanos": 780000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 3773,
                                    "nanos": 220000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 583,
                                    "nanos": 560000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 4357
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 4356,
                                    "nanos": 780000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 4357
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        },
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 4356,
                                    "nanos": 780000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 3773,
                                    "nanos": 220000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 583,
                                    "nanos": 560000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 4357
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 4356,
                                    "nanos": 780000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 4357
                                }
                            },
                            "travellerReference": "2",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "BEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_z2Q4W-jIBjG_5rtmwiIVZeQi6fd1k7rqtbL7gtRaq3XtVyEnc6__qg2DeR9fs8DhBeOSv2VT6Z5-Gybo5LGlwSNUKIpVQ24OJuHTpdKiFN7acyy7cx3P_3IE2xvksLEpqEHfwp-1IMyZMfpY1vVoKSG53kzSk7RjTq6AGRJ1vY2XU8RF4oSYCNo_3xNwnUxhx192b5l6WpyexoHfR-FvnPXUKJkXPXJuBvisAiypQvTYuvEefG-afths3NxFC5RPn7IYkzj6JnDPNB54ePkGw5Z1qt4d5JRHg9RAMf46k_H35qH6cqa65YBII43Ny5KeXuC4IoiOONe0Sx63T0vZqsXHMex7MkNFFmWaz_K-rPmqhWXt_qbZsT1kGfojxP_MDE2LCPIQXcfaY8tbN0D_wEH5-oynKGGB8vXs2EQQIA1HSeCmkr2koCIgOwaV8xbaOGz7BmqyhK6GmtmuBW5bjkwomvL8O38H7b6pWVkh3Hh4vY_zbHd-A8CAAA.",
                    "price": {
                        "currencyCode": "USD",
                        "units": 1777,
                        "nanos": 350000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 888,
                                    "nanos": 680000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 587,
                                    "nanos": 180000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 301,
                                    "nanos": 500000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 889
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 888,
                                    "nanos": 680000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 889
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        },
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 888,
                                    "nanos": 670000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 587,
                                    "nanos": 170000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 301,
                                    "nanos": 500000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 889
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 888,
                                    "nanos": 670000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 889
                                }
                            },
                            "travellerReference": "2",
                            "travellerType": "ADULT"
                        }
                    ]
                }
            ],
            "atolProtectedStatus": "NONE",
            "searchId": "1D22D71D98D749D3634D1A169F1C0834",
            "displayOptions": {
                "brandedFaresShownByDefault": false,
                "directFlightsOnlyFilterIgnored": false,
                "hideFlexiblePricesBanner": false
            },
            "isOffersCabinClassExtended": false,
            "cabinClassExtension": {
                "text": "Some results may combine Business with other options, as we couldn’t completely match your search."
            },
            "searchCriteria": {
                "cabinClass": "BUSINESS"
            }
        }
    }
]

2025-08-25 13:28:26,232 - evaluation_logger_Flights-19 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文我们来分享 [《精尽 Spring MVC 源码分析 —— HandlerMapping 组件（一）之 AbstractHandlerMapping》](http://svip.iocoder.cn/Spring-MVC/HandlerMapping-1-AbstractHandlerMapping/) ，该组件为 HandlerMapping 的抽象基类，实现了一些公用的方法。主要涉及如下类：

- AbstractHandlerMapping ，继承 WebApplicationObjectSupport 抽象类，实现 HandlerMapping、Ordered 接口，HandlerMapping 的抽象基类，实现了一些公用的方法。
- AbstractHandlerMethodMapping ，继承 AbstractHandlerMapping 抽象类，抽象 HandlerMethodMapping 基类。
- HandlerMethod ，HandlerMethod 封装类，包含 Method 反射对象，Bean 对象等等。

# 2. AbstractHandlerMapping

`org.springframework.web.servlet.handler.AbstractHandlerMapping` ，继承 WebApplicationObjectSupport 抽象类，实现 HandlerMapping、Ordered 接口，HandlerMapping 的抽象基类，实现了一些公用的方法。

## 2.1 构造方法

```java
// AbstractHandlerMapping.java

/**
 * 顺序，默认最大
 */
private int order = Ordered.LOWEST_PRECEDENCE;  // default: same as non-Ordered

/**
 * 默认的处理器
 */
@Nullable
private Object defaultHandler;

/**
 * 拦截器数组
 */
private final List<HandlerInterceptor> adaptedInterceptors = new ArrayList<>();

/**
 * 跨域配置的解析器
 */
@Nullable
private CorsConfigurationSource corsConfigurationSource;

private CorsProcessor corsProcessor = new DefaultCorsProcessor();

/**
 * UrlPathHelper 对象
 */
private UrlPathHelper urlPathHelper = new UrlPathHelper();

/**
 * PathMatcher 对象
 */
private PathMatcher pathMatcher = new AntPathMatcher();

/**
 * 是否使用后缀模式匹配
 */
private boolean useTrailingSlashMatch = true;

/**
 * 是否使用后缀模式匹配
 */
private boolean useSuffixPatternMatch = false;

/**
 * 是否使用注册的后缀模式匹配
 */
private boolean useRegisteredSuffixPatternMatch = false;

/**
 * 后缀数组
 */
private String[] contentNegotiationManager = new String[0];

/**
 * 内容协商管理器
 */
private ContentNegotiationManager contentNegotiationManager = new ContentNegotiationManager();

/**
 * 拦截器应用器
 */
private final HandlerInterceptorChain interceptorChain = new HandlerInterceptorChain();
```

- 每个属性的用途，看代码注释。

## 2.2 initApplicationContext

实现 `#initApplicationContext()` 方法，初始化拦截器。代码如下：

```java
// AbstractHandlerMapping.java

@Override
protected void initApplicationContext() throws BeansException {
    // <1> 空方法。交给子类实现，用于注册自定义的拦截器
    extendInterceptors(this.interceptors);
    // <2> 检测默认的拦截器，添加到 adaptedInterceptors 中
    detectMappedInterceptors(this.adaptedInterceptors);
    // <3> 将 interceptors 初始化成 HandlerInterceptor 类型，添加到 adaptedInterceptors 中
    initInterceptors();
}
```

- `<1>` 处，调用 `#extendInterceptors(List<Object> interceptors)` 方法，空方法。交给子类实现，用于注册自定义的拦截器。代码如下：

  ```java
  // AbstractHandlerMapping.java
  
  protected void extendInterceptors(List<Object> interceptors) {
  }
  ```

- `<2>` 处，调用 `#detectMappedInterceptors(List<HandlerInterceptor> mappedInterceptors)` 方法，检测默认的拦截器，添加到 `adaptedInterceptors` 中。代码如下：

  ```java
  // AbstractHandlerMapping.java
  
  protected void detectMappedInterceptors(List<HandlerInterceptor> mappedInterceptors) {
  	mappedInterceptors.addAll(
  			BeanFactoryUtils.beansOfTypeIncludingAncestors(
  					obtainApplicationContext(), MappedInterceptor.class, true, false).values());
  }
  ```

  - 从 Spring 容器中，获取所有 MappedInterceptor 类型的 Bean ，添加到 `mappedInterceptors` 中。

- `<3>` 处，调用 `#initInterceptors()` 方法，将 `interceptors` 初始化成 HandlerInterceptor 类型，添加到 `adaptedInterceptors` 中。代码如下：

  ```java
  // AbstractHandlerMapping.java
  
  protected void initInterceptors() {
  	if (!this.interceptors.isEmpty()) {
  		for (int i = 0; i < this.interceptors.size(); i++) {
  			Object interceptor = this.interceptors.get(i);
  			if (interceptor == null) {
  				throw new IllegalArgumentException("Entry number " + i + " in interceptors array is null");
  			}
  			this.adaptedInterceptors.add(adaptInterceptor(interceptor));
  		}
  	}
  }
  
  protected HandlerInterceptor adaptInterceptor(Object interceptor) {
  	if (interceptor instanceof HandlerInterceptor) {
  		return (HandlerInterceptor) interceptor;
  	} else if (interceptor instanceof WebRequestInterceptor) {
  		return new WebRequestHandlerInterceptorAdapter((WebRequestInterceptor) interceptor);
  	} else {
  		throw new IllegalArgumentException("Interceptor type not supported: " + interceptor.getClass().getName());
  	}
  }
  ```

## 2.3 getHandler

实现 `#getHandler(HttpServletRequest request)` 方法，获得请求对应的处理器。代码如下：

```java
// AbstractHandlerMapping.java

@Override
@Nullable
public final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {
    // <1> 获得处理器。该方法是抽象方法，由子类实现
    Object handler = getHandlerInternal(request);
    // <2> 如果获取不到，则使用默认处理器
    if (handler == null) {
        handler = getDefaultHandler();
    }
    // <3> 如果还是获取不到，则返回 null
    if (handler == null) {
        return null;
    }
    // Bean name or resolved handler?
    // <4> 如果 handler 类型是 String，则从 Spring 容器中获取对应的 Bean 作为处理器
    if (handler instanceof String) {
        String handlerName = (String) handler;
        handler = obtainApplicationContext().getBean(handlerName);
    }

    // <5> 获得 HandlerExecutionChain 对象
    HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);

    // <6> 打印日志
    if (logger.isTraceEnabled()) {
        logger.trace("Mapped to " + handler);
    } else if (logger.isDebugEnabled() && !request.getDispatcherType().equals(DispatcherType.ASYNC)) {
        logger.debug("Mapped to " + executionChain);
    }

    // <7> 处理 CORS 相关的事情
    if (hasCorsConfigurationSource(handler)) {
        CorsConfiguration config = (this.corsConfigurationSource != null ? this.corsConfigurationSource.getCorsConfiguration(request) : null);
        CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);
        config = (config != null ? config.combine(handlerConfig) : handlerConfig);
        executionChain = getCorsHandlerExecutionChain(request, executionChain, config);
    }

    // <8> 返回
    return executionChain;
}
```

- `<1>` 处，调用 `#getHandlerInternal(HttpServletRequest request)` 方法，获得处理器。该方法是**抽象方法**，由子类实现。代码如下：

  ```java
  // AbstractHandlerMapping.java
  
  @Nullable
  protected abstract Object getHandlerInternal(HttpServletRequest request) throws Exception;
  ```

- `<2>` 处，如果获取不到，则调用 `#getDefaultHandler()` 方法，使用默认处理器。代码如下：

  ```java
  // AbstractHandlerMapping.java
  
  @Nullable
  public Object getDefaultHandler() {
  	return this.defaultHandler;
  }
  ```

- `<3>` 处，如果还是获取不到，则返回 `null` 。

- `<4>` 处，如果 `handler` 类型是 String，则从 Spring 容器中获取对应的 Bean 作为处理器。

- `<5>` 处，调用 `#getHandlerExecutionChain(Object handler, HttpServletRequest request)` 方法，获得 HandlerExecutionChain 对象。详细解析，见 [「2.3.1 getHandlerExecutionChain」](http://svip.iocoder.cn/Spring-MVC/HandlerMapping-1-AbstractHandlerMapping/#) 。

- `<6>` 处，打印日志。

- `<7>` 处，处理 CORS 相关的事情。详细解析，见 [「2.3.2 getCorsHandlerExecutionChain」](http://svip.iocoder.cn/Spring-MVC/HandlerMapping-1-AbstractHandlerMapping/#) 。

- `<8>` 处，返回 HandlerExecutionChain 对象。

### 2.3.1 getHandlerExecutionChain

`#getHandlerExecutionChain(Object handler, HttpServletRequest request)` 方法，获得 HandlerExecutionChain 对象。代码如下：

```java
// AbstractHandlerMapping.java

protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) {
    // 创建 HandlerExecutionChain 对象
    HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?
            (HandlerExecutionChain) handler : new HandlerExecutionChain(handler));

    // 拼接上路径
    String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);
    // 遍历 adaptedInterceptors 数组，获得和路径匹配的拦截器，添加到 chain 中
    for (HandlerInterceptor interceptor : this.adaptedInterceptors) {
        if (interceptor instanceof MappedInterceptor) {
            MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;
            if (mappedInterceptor.matches(lookupPath, this.pathMatcher)) {
                chain.addInterceptor(mappedInterceptor.getInterceptor());
            }
        } else {
            chain.addInterceptor(interceptor);
        }
    }
    return chain;
}
```

- 虽然代码不长，但是可以分成三部分来看。

- 第一部分，创建 HandlerExecutionChain 对象。如果 `handler` 已经是 HandlerExecutionChain 类型，则直接强转并返回。否则，创建 HandlerExecutionChain 对象。

- 第二部分，获得请求路径。

- 第三部分，遍历 `adaptedInterceptors` 数组，获得和路径匹配的拦截器，添加到 `chain` 中。

  - 这里，我们会看到 MappedInterceptor 类型的拦截器，会进行路径匹配。如果匹配，则添加到 `chain` 中。

  - 关于 MappedInterceptor 类，我们来看看。代码如下：

    ```java
    // MappedInterceptor.java
    
    public class MappedInterceptor implements HandlerInterceptor {
    
        /**
         * 匹配的路径
         */
        @Nullable
        private final String[] includePatterns;
        /**
         * 不匹配的路径
         */
        @Nullable
        private final String[] excludePatterns;
        /**
         * 路径匹配器
         */
        private PathMatcher pathMatcher = new AntPathMatcher();
        /**
         * 拦截器
         */
        private final HandlerInterceptor interceptor;
    
        // ... 省略构造方法
        
        /**
         * 是否匹配
         *
         * @param lookupPath 路径
         * @param pathMatcher 路径匹配器
         * @return 是否匹配
         */
        public boolean matches(String lookupPath, PathMatcher pathMatcher) {
            PathMatcher pathMatcherToUse = (this.pathMatcher != null ? this.pathMatcher : pathMatcher);
            // 先排除了，返回 false
            if (this.excludePatterns != null) {
                for (String pattern : this.excludePatterns) {
                    if (pathMatcherToUse.match(pattern, lookupPath)) {
                        return false;
                    }
                }
            }
            // 总是包含，返回 true
            if (this.includePatterns == null) {
                return true;
            }
            // 需要包含，匹配中，则返回 true
            for (String pattern : this.includePatterns) {
                if (pathMatcherToUse.match(pattern, lookupPath)) {
                    return true;
                }
            }
            // 其他，返回 false
            return false;
        }
        
        // ... 省略 HandlerInterceptor 接口的方法
        
    }
    ```

    - 代码比较简单，胖友自己瞅瞅。

### 2.3.2 getCorsHandlerExecutionChain

`#getCorsHandlerExecutionChain(HttpServletRequest request, HandlerExecutionChain chain, CorsConfiguration config)` 方法，处理 CORS 相关的事情。代码如下：

```java
// AbstractHandlerMapping.java

protected HandlerExecutionChain getCorsHandlerExecutionChain(HttpServletRequest request,
        HandlerExecutionChain chain, @Nullable CorsConfiguration config) {
    // 如果 config 为空，则直接返回 chain
    if (config == null) {
        return chain;
    }
    // 获得 CorsInterceptor 拦截器
    CorsInterceptor interceptor = new CorsInterceptor(config);
    // 添加到 chain 中
    interceptor.setCorsProcessor(this.corsProcessor);
    // 创建新的 HandlerExecutionChain 对象
    return new HandlerExecutionChain(chain.getHandler(), chain.getInterceptors().add(interceptor));
}
```

- 关于 CORS 相关的事情，本文暂时不详细解析。感兴趣的胖友，可以看看 [《Spring MVC 源码解析 —— HandlerMapping 组件（二）之 AbstractHandlerMapping》](https://www.jianshu.com/p/09a4c514a3c1) 。

# 3. AbstractHandlerMethodMapping

`org.springframework.web.servlet.handler.AbstractHandlerMethodMapping` ，继承 AbstractHandlerMapping 抽象类，抽象 HandlerMethodMapping 基类。

## 3.1 构造方法

```java
// AbstractHandlerMethodMapping.java

/**
 * 映射注册表
 */
private final MappingRegistry mappingRegistry = new MappingRegistry();


/**
 * 配置之后，是否进行初始化
 */
private boolean detectHandlerMethodsInAncestorContexts = false;
```

- `mappingRegistry` 属性，映射注册表。详细解析，见 [「3.2 MappingRegistry」](http://svip.iocoder.cn/Spring-MVC/HandlerMapping-1-AbstractHandlerMapping/#) 。

## 3.2 MappingRegistry

MappingRegistry ，是 AbstractHandlerMethodMapping 的内部类，注册表。代码如下：

```java
// AbstractHandlerMethodMapping.java

class MappingRegistry {

    /**
     * 注册表
     *
     * key：Mapping
     * value：MappingRegistration
     */
    private final Map<T, MappingRegistration<T>> registry = new HashMap<>();

    /**
     * 映射路径和 Mapping 的映射
     *
     * key：路径
     * value：Mapping 数组
     */
    private final Map<String, List<T>> pathLookup = new LinkedHashMap<>();

    /**
     * Mapping 和 HandlerMethod 的映射
     *
     * key：Mapping
     * value：HandlerMethod
     */
    private final Map<T, HandlerMethod> mappingLookup = new LinkedHashMap<>();

    /**
     * Mapping 和 Cors 配置的映射
     *
     * key：Mapping
     * value：CorsConfiguration
     */
    private final Map<T, CorsConfiguration> corsLookup = new ConcurrentHashMap<>();

    /**
     * 读写锁
     */
    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();

    // ... 省略一些方法
}
```

- 一共有四个 Map 来存储映射，胖友自己看注释。

### 3.2.1 register

`#register(T mapping, Object handler, Method method)` 方法，注册。代码如下：

```java
// AbstractHandlerMethodMapping.java

public void register(T mapping, Object handler, Method method) {
    // 获得写锁
    this.readWriteLock.writeLock().lock();
    try {
        // 创建 HandlerMethod 对象
        HandlerMethod handlerMethod = createHandlerMethod(handler, method);
        // 校验当前 mapping 是否已经存在
        assertUniqueMethodMapping(handlerMethod, mapping);
        // 添加 mapping + HandlerMethod 到 mappingLookup 中
        this.mappingLookup.put(mapping, handlerMethod);

        // 获得直接路径
        List<String> directPaths = getDirectPaths(mapping);
        // 遍历 directPaths 数组，添加到 pathLookup 中
        for (String path : directPaths) {
            if (!pathLookup.containsKey(path)) {
                pathLookup.put(path, new LinkedList<>());
            }
            this.pathLookup.get(path).add(mapping);
        }

        // 处理 Cors 配置
        CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);
        if (corsConfig != null) {
            this.corsLookup.put(mapping, corsConfig);
        }

        // 创建 MappingRegistration 对象，并添加到 registry 中
        this.registry.put(mapping, new MappingRegistration<>(mapping, handlerMethod, directPaths));
    } finally {
        // 释放写锁
        this.readWriteLock.writeLock().unlock();
    }
}
```

- 代码比较简单，胖友自己瞅瞅。

### 3.2.2 unregister

`#unregister(T mapping)` 方法，取消注册。代码如下：

```java
// AbstractHandlerMethodMapping.java

public void unregister(T mapping) {
    // 获得写锁
    this.readWriteLock.writeLock().lock();
    try {
        // 从 registry 中移除
        MappingRegistration<T> definition = this.registry.remove(mapping);
        if (definition == null) {
            return;
        }

        // 从 mappingLookup 中移除
        this.mappingLookup.remove(mapping);

        // 从 pathLookup 中移除
        for (String path : definition.getDirectPaths()) {
            List<T> mappings = this.pathLookup.get(path);
            if (mappings != null) {
                mappings.remove(definition.getMapping());
                if (mappings.isEmpty()) {
                    this.pathLookup.remove(path);
                }
            }
        }

        // 从 corsLookup 中移除
        this.corsLookup.remove(mapping);
    } finally {
        // 释放写锁
        this.readWriteLock.writeLock().unlock();
    }
}
```

- 代码比较简单，胖友自己瞅瞅。

## 3.3 getHandlerInternal

实现 `#getHandlerInternal(HttpServletRequest request)` 方法，获得请求对应的 HandlerMethod 对象。代码如下：

```java
// AbstractHandlerMethodMapping.java

@Override
protected HandlerMethod getHandlerInternal(HttpServletRequest request) throws Exception {
    // <1> 获得请求路径
    String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);
    // <2> 获得读锁
    this.mappingRegistry.acquireReadLock();
    try {
        // <3> 获得 HandlerMethod 对象
        HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);
        // <4> 进一步获得 HandlerMethod 对象
        return (handlerMethod != null ?

2025-08-25 13:28:33,177 - evaluation_logger_Flights-19 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any part of the user's query about arranging a business class flight from Paris to Toronto."}
2025-08-25 13:28:40,500 - evaluation_logger_Flights-19 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 13:28:40,500 - evaluation_logger_Flights-19 - INFO - Message: Success.
2025-08-25 13:28:40,500 - evaluation_logger_Flights-19 - INFO - Success turn num = 2
2025-08-25 13:28:40,500 - evaluation_logger_Flights-19 - INFO - ----------------------------------------------------------------------------------------------------
