2025-08-25 13:34:23,699 - evaluation_logger_Flights-80 - INFO - Test Example Flights-80
2025-08-25 13:34:23,699 - evaluation_logger_Flights-80 - INFO - Query: We need to go to Vancouver for a meeting. We're planning to fly from Beijing to Vancouver around December 20, 2024. Check the cheapest economy class ticket price from Beijing to Vancouver around that time. If it’s more than $500, check if it’s cheaper to transfer at San Francisco International Airport. Overnight transfer flights are not accepted.
2025-08-25 13:34:32,429 - evaluation_logger_Flights-80 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Beijing"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Vancouver"
        }
    }
]

2025-08-25 13:34:32,429 - evaluation_logger_Flights-80 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Beijing"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Vancouver"
        }
    },
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "ECONOMY",
            "fromId": "BJS.CITY",
            "toId": "YVR.CITY",
            "departDate": "2024-12-20"
        }
    }
]

2025-08-25 13:34:32,429 - evaluation_logger_Flights-80 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Beijing'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Beijing'}}
2025-08-25 13:34:32,429 - evaluation_logger_Flights-80 - INFO - Rule-based compare success.
2025-08-25 13:34:32,429 - evaluation_logger_Flights-80 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Vancouver'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Vancouver'}}
2025-08-25 13:34:32,429 - evaluation_logger_Flights-80 - INFO - Rule-based compare success.
2025-08-25 13:34:32,429 - evaluation_logger_Flights-80 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Beijing'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Vancouver'}}]
2025-08-25 13:34:32,429 - evaluation_logger_Flights-80 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "BJS.CITY",
                "type": "CITY",
                "name": "Beijing",
                "code": "BJS",
                "regionName": "Beijing Area",
                "country": "CN",
                "countryName": "China"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "YVR.CITY",
                "type": "CITY",
                "name": "Vancouver",
                "code": "YVR",
                "regionName": "British Columbia",
                "country": "CA",
                "countryName": "Canada"
            }
        ]
    }
]

2025-08-25 13:34:42,797 - evaluation_logger_Flights-80 - INFO - Function Calls: 
[
    {
        "name": "Get_Min_Price",
        "arguments": {
            "fromId": "BJS.CITY",
            "toId": "YVR.CITY",
            "departDate": "2024-12-20",
            "cabinClass": "ECONOMY"
        }
    }
]

2025-08-25 13:34:42,797 - evaluation_logger_Flights-80 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "ECONOMY",
            "departDate": "2024-12-20",
            "fromId": "BJS.CITY",
            "toId": "YVR.CITY"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "San Francisco"
        }
    }
]

2025-08-25 13:34:42,797 - evaluation_logger_Flights-80 - INFO - Start compare_single_call: 
{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'ECONOMY', 'departDate': '2024-12-20', 'fromId': 'BJS.CITY', 'toId': 'YVR.CITY'}}
{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'ECONOMY', 'departDate': '2024-12-20', 'fromId': 'BJS.CITY', 'toId': 'YVR.CITY'}}
2025-08-25 13:34:42,797 - evaluation_logger_Flights-80 - INFO - Rule-based compare success.
2025-08-25 13:34:42,797 - evaluation_logger_Flights-80 - INFO - Success matched: [{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'ECONOMY', 'departDate': '2024-12-20', 'fromId': 'BJS.CITY', 'toId': 'YVR.CITY'}}]
2025-08-25 13:34:42,797 - evaluation_logger_Flights-80 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "timestamp": 1726208743194,
        "data": [
            {
                "departureDate": "2024-12-15",
                "searchDates": [
                    "2024-12-15"
                ],
                "offsetDays": -5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 591,
                    "nanos": 130000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 592,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-16",
                "searchDates": [
                    "2024-12-16"
                ],
                "offsetDays": -4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 733,
                    "nanos": 720000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 734,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-17",
                "searchDates": [
                    "2024-12-17"
                ],
                "offsetDays": -3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 706,
                    "nanos": 730000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 707,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-18",
                "searchDates": [
                    "2024-12-18"
                ],
                "offsetDays": -2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 617,
                    "nanos": 730000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 618,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-19",
                "searchDates": [
                    "2024-12-19"
                ],
                "offsetDays": -1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 674,
                    "nanos": 790000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 675,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-20",
                "searchDates": [
                    "2024-12-20"
                ],
                "offsetDays": 0,
                "isCheapest": true,
                "price": {
                    "currencyCode": "USD",
                    "units": 544,
                    "nanos": 100000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 545,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-21",
                "searchDates": [
                    "2024-12-21"
                ],
                "offsetDays": 1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 677,
                    "nanos": 20000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 678,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-22",
                "searchDates": [
                    "2024-12-22"
                ],
                "offsetDays": 2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 575,
                    "nanos": 450000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 576,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-23",
                "searchDates": [
                    "2024-12-23"
                ],
                "offsetDays": 3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 579,
                    "nanos": 670000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 580,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-24",
                "searchDates": [
                    "2024-12-24"
                ],
                "offsetDays": 4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 649,
                    "nanos": 780000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 650,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-25",
                "searchDates": [
                    "2024-12-25"
                ],
                "offsetDays": 5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 558,
                    "nanos": 100000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 559,
                    "nanos": 0
                }
            }
        ]
    }
]

2025-08-25 13:34:51,263 - evaluation_logger_Flights-80 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "San Francisco International Airport"
        }
    }
]

2025-08-25 13:34:51,264 - evaluation_logger_Flights-80 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "San Francisco"
        }
    },
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "ECONOMY",
            "legs": [
                {
                    "fromId": "BJS.CITY",
                    "toId": "SFO.AIRPORT",
                    "date": "2024-12-20"
                },
                {
                    "fromId": "SFO.AIRPORT",
                    "toId": "YVR.CITY",
                    "date": "2024-12-20"
                }
            ]
        }
    }
]

2025-08-25 13:34:52,040 - evaluation_logger_Flights-80 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'San Francisco International Airport'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'San Francisco'}}
2025-08-25 13:35:00,045 - evaluation_logger_Flights-80 - DEBUG - LLM-based comparison output: {'is_equal': True, 'reason': 'San Francisco International Airport and San Francisco are equivalent in the context of searching for flight locations, as the airport is located in San Francisco and the query is likely to return the same location ID for both.'}
2025-08-25 13:35:00,045 - evaluation_logger_Flights-80 - INFO - LLM-based compare success.
2025-08-25 13:35:00,045 - evaluation_logger_Flights-80 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'San Francisco'}}]
2025-08-25 13:35:00,045 - evaluation_logger_Flights-80 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "SFO.AIRPORT",
                "type": "AIRPORT",
                "name": "San Francisco International Airport",
                "code": "SFO",
                "city": "SFO",
                "cityName": "San Francisco",
                "regionName": "California",
                "country": "US",
                "countryName": "United States",
                "countryNameShort": "US",
                "distanceToCity": {
                    "value": 19.16395121441966,
                    "unit": "km"
                },
                "parent": "SFO"
            }
        ]
    }
]

2025-08-25 13:35:12,019 - evaluation_logger_Flights-80 - INFO - Function Calls: 
[
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "ECONOMY",
            "legs": [
                {
                    "fromId": "BJS.CITY",
                    "toId": "SFO.AIRPORT",
                    "date": "2024-12-20"
                },
                {
                    "fromId": "SFO.AIRPORT",
                    "toId": "YVR.CITY",
                    "date": "2024-12-20"
                }
            ]
        }
    }
]

2025-08-25 13:35:12,020 - evaluation_logger_Flights-80 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "ECONOMY",
            "legs": [
                {
                    "fromId": "BJS.CITY",
                    "toId": "SFO.AIRPORT",
                    "date": "2024-12-20"
                },
                {
                    "fromId": "SFO.AIRPORT",
                    "toId": "YVR.CITY",
                    "date": "2024-12-20"
                }
            ]
        }
    }
]

2025-08-25 13:35:12,020 - evaluation_logger_Flights-80 - INFO - Start compare_single_call: 
{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'ECONOMY', 'legs': [{'fromId': 'BJS.CITY', 'toId': 'SFO.AIRPORT', 'date': '2024-12-20'}, {'fromId': 'SFO.AIRPORT', 'toId': 'YVR.CITY', 'date': '2024-12-20'}]}}
{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'ECONOMY', 'legs': [{'fromId': 'BJS.CITY', 'toId': 'SFO.AIRPORT', 'date': '2024-12-20'}, {'fromId': 'SFO.AIRPORT', 'toId': 'YVR.CITY', 'date': '2024-12-20'}]}}
2025-08-25 13:35:12,020 - evaluation_logger_Flights-80 - INFO - Rule-based compare success.
2025-08-25 13:35:12,020 - evaluation_logger_Flights-80 - INFO - Success matched: [{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'ECONOMY', 'legs': [{'fromId': 'BJS.CITY', 'toId': 'SFO.AIRPORT', 'date': '2024-12-20'}, {'fromId': 'SFO.AIRPORT', 'toId': 'YVR.CITY', 'date': '2024-12-20'}]}}]
2025-08-25 13:35:12,020 - evaluation_logger_Flights-80 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "departureDate": "2024-12-15",
                "returnDate": "2024-12-15",
                "searchDates": [
                    "2024-12-15",
                    "2024-12-15"
                ],
                "offsetDays": -5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 818,
                    "nanos": 300000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 819,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-16",
                "returnDate": "2024-12-16",
                "searchDates": [
                    "2024-12-16",
                    "2024-12-16"
                ],
                "offsetDays": -4,
                "isCheapest": true,
                "price": {
                    "currencyCode": "USD",
                    "units": 805,
                    "nanos": 280000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 806,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-17",
                "returnDate": "2024-12-17",
                "searchDates": [
                    "2024-12-17",
                    "2024-12-17"
                ],
                "offsetDays": -3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 829,
                    "nanos": 700000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 830,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-18",
                "returnDate": "2024-12-18",
                "searchDates": [
                    "2024-12-18",
                    "2024-12-18"
                ],
                "offsetDays": -2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 884,
                    "nanos": 510000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 885,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-19",
                "returnDate": "2024-12-19",
                "searchDates": [
                    "2024-12-19",
                    "2024-12-19"
                ],
                "offsetDays": -1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 855,
                    "nanos": 550000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 856,
                    "nanos": 0
                }
            }
        ]
    }
]

2025-08-25 13:37:41,495 - evaluation_logger_Flights-80 - INFO - Final Response: <｜begin▁of▁sentence｜># 0x0C. Python - Almost a circle

## Background Context
The AirBnB project is a big part of the Higher level curriculum. This project will help you be ready for it.

In this project, you will review everything about Python:

- Import
- Exceptions
- Class
- Private attribute
- Getter/Setter
- Class method
- Static method
- Inheritance
- Unittest
- Read/Write file

You will also learn about:

- args and kwargs
- Serialization/Deserialization
- JSON

## Resources
**Read or watch:**

- [args/kwargs](https://yasoob.me/2013/08/04/args-and-kwargs-in-python-explained/)
- [JSON encoder and decoder](https://docs.python.org/3/library/json.html)
- [unittest module](https://docs.python.org/3/library/unittest.html#module-unittest)
- [Python test cheatsheet](https://www.pythonsheets.com/notes/python-tests.html)

## Learning Objectives
At the end of this project, you are expected to be able to explain to anyone, without the help of Google:

### General
- What is Unit testing and how to implement it in a large project
- How to serialize and deserialize a Class
- How to write and read a JSON file
- What is *args and how to use it
- What is **kwargs and how to use it
- How to handle named arguments in a function

## Requirements
### Python Scripts
- Allowed editors: vi, vim, emacs
- All your files will be interpreted/compiled on Ubuntu 20.04 LTS using python3 (version 3.8.5)
- All your files should end with a new line
- The first line of all your files should be exactly #!/usr/bin/python3
- A README.md file, at the root of the folder of the project, is mandatory
- Your code should use the pycodestyle (version 2.8.*)
- All your files must be executable
- The length of your files will be tested using wc
- All your modules should be documented: python3 -c 'print(__import__("my_module").__doc__)'
- All your classes should be documented: python3 -c 'print(__import__("my_module").MyClass.__doc__)'
- All your functions (inside and outside a class) should be documented: python3 -c 'print(__import__("my_module").my_function.__doc__)' and python3 -c 'print(__import__("my_module").MyClass.my_function.__doc__)'
- A documentation is not a simple word, it’s a real sentence explaining what’s the purpose of the module, class or method (the length of it will be verified)

### Python Unit Tests
- Allowed editors: vi, vim, emacs
- All your files should end with a new line
- All your test files should be inside a folder tests
- You have to use the unittest module
- All your test files should be python files (extension: .py)
- All your test files and folders should start by test_
- Your file organization in the tests folder should be the same as your project
- e.g., For models/base.py, unit tests must be in: tests/test_models/test_base.py
- e.g., For models/square.py, unit tests must be in: tests/test_models/test_square.py
- All your tests should be executed by using this command: python3 -m unittest discover tests
- You can also test file by file by using this command: python3 -m unittest tests/test_models/test_base.py
- We strongly encourage you to work together on test cases, so that you don’t miss any edge case

## Tasks
### 0. If it's not tested it doesn't work
All your files, classes and methods must be unit tested and be PEP 8 validated.

### 1. Base class
Write the first class Base:

Create a folder named models with an empty file __init__.py inside - with this file, the folder will become a Python package

Create a file named models/base.py:

- Class Base:
  - private class attribute __nb_objects = 0
  - class constructor: def __init__(self, id=None)::
    - if id is not None, assign the public instance attribute id with this argument value
    - otherwise, increment __nb_objects and assign the new value to the public instance attribute id

This class will be the “base” of all other classes in this project. The goal of it is to manage id attribute in all your future classes and to avoid duplicating the same code (by extension, same bugs)

### 2. First Rectangle
Write the class Rectangle that inherits from Base:

- In the file models/rectangle.py
- Class Rectangle inherits from Base
- Private instance attributes, each with its own public getter and setter:
  - __width -> width
  - __height -> height
  - __x -> x
  - __y -> y
- Class constructor: def __init__(self, width, height, x=0, y=0, id=None):
  - Call the super class with id - this super call with use the logic of the __init__ of the Base class
  - Assign each argument width, height, x and y to the right attribute

Why private attributes with getter/setter? Why not directly public attribute?

Because we want to protect attributes of our class. With a setter, you are able to validate what a developer is trying to assign to a variable. So after, in your class you can “trust” these attributes.

### 3. Validate attributes
Update the class Rectangle by adding validation of all setter methods and instantiation (id excluded):

- If the input is not an integer, raise the TypeError exception with the message: <name of the attribute> must be an integer. Example: width must be an integer
- If width or height is under or equals 0, raise the ValueError exception with the message: <name of the attribute> must be > 0. Example: width must be > 0
- If x or y is under 0, raise the ValueError exception with the message: <name of the attribute> must be >= 0. Example: x must be >= 0

### 4. Area first
Update the class Rectangle by adding the public method def area(self): that returns the area value of the Rectangle instance.

### 5. Display #0
Update the class Rectangle by adding the public method def display(self): that prints in stdout the Rectangle instance with the character # - you don’t need to handle x and y here.

### 6. __str__
Update the class Rectangle by overriding the __str__ method so that it returns [Rectangle] (<id>) <x>/<y> - <width>/<height>

### 7. Display #1
Update the class Rectangle by improving the public method display to take care of x and y.

### 8. Update #0
Update the class Rectangle by adding the public method def update(self, *args): that assigns an argument to each attribute:

- 1st argument should be the id attribute
- 2nd argument should be the width attribute
- 3rd argument should be the height attribute
- 4th argument should be the x attribute
- 5th argument should be the y attribute

This type of argument is called a “no-keyword argument” - Argument order is super important.

### 9. Update #1
Update the class Rectangle by updating the public method update to take a variable number of keyword arguments (kwargs):

- Each key in this dictionary represents an attribute to the instance.

This type of argument is called a “key-worded argument”. Argument order is not important.

### 10. And now, the Square!
Write the class Square that inherits from Rectangle:

- In the file models/square.py
- Class Square inherits from Rectangle
- Class constructor: def __init__(self, size, x=0, y=0, id=None):
  - Call the super class with id, x, y, width and height - this super call will use the logic of the __init__ of the Rectangle class. The width and height must be assigned to the value of size
  - You must not create new attributes for this class, use all attributes of Rectangle - As reminder: a Square is a Rectangle with the same width and height
  - All width, height, x and y validation must inherit from Rectangle - same behavior in case of wrong data
- The overloading __str__ method should return [Square] (<id>) <x>/<y> - <size> - in our case, width or height

As you know, a Square is a special Rectangle, so it makes sense this class Square inherits from Rectangle. Now you have a Square class who has the same attributes and same methods.

### 11. Square size
Update the class Square by adding the public getter and setter size

- The setter should assign (in this order) the width and the height - with the same value
- The setter should have the same value validation as the Rectangle for width and height - No need to change the exception error message (It should be the one from width)

### 12. Square update
Update the class Square by adding the public method def update(self, *args, **kwargs) that assigns attributes:

- *args is the list of arguments - no-keyworded arguments
  - 1st argument should be the id attribute
  - 2nd argument should be the size attribute
  - 3rd argument should be the x attribute
  - 4th argument should be the y attribute
- **kwargs can be thought of as a double pointer to a dictionary: key/value (keyworded arguments)
- **kwargs must be skipped if *args exists and is not empty
- Each key in this dictionary represents an attribute to the instance

### 13. Rectangle instance to dictionary representation
Update the class Rectangle by adding the public method def to_dictionary(self): that returns the dictionary representation of a Rectangle:

This dictionary must contain:

- id
- width
- height
- x
- y

### 14. Square instance to dictionary representation
Update the class Square by adding the public method def to_dictionary(self): that returns the dictionary representation of a Square:

This dictionary must contain:

- id
- size
- x
- y

### 15. Dictionary to JSON string
JSON is one of the standard formats for sharing data representation.

Update the class Base by adding the static method def to_json_string(list_dictionaries): that returns the JSON string representation of list_dictionaries:

- list_dictionaries is a list of dictionaries
- If list_dictionaries is None or empty, return the string: "[]"
- Otherwise, return the JSON string representation of list_dictionaries

### 16. JSON string to file
Update the class Base by adding the class method def save_to_file(cls, list_objs): that writes the JSON string representation of list_objs to a file:

- list_objs is a list of instances who inherits of Base - example: list of Rectangle or list of Square instances
- If list_objs is None, save an empty list
- The filename must be <Class name>.json - example: Rectangle.json
- You must use the static method to_json_string (created before)
- You must overwrite the file if it already exists

### 17. JSON string to dictionary
Update the class Base by adding the static method def from_json_string(json_string): that returns the list of the JSON string representation json_string:

- json_string is a string representing a list of dictionaries
- If json_string is None or empty, return an empty list
- Otherwise, return the list represented by json_string

### 18. Dictionary to Instance
Update the class Base by adding the class method def create(cls, **dictionary): that returns an instance with all attributes already set:

- **dictionary can be thought of as a double pointer to a dictionary
- To use the update method to assign all attributes, you must create a “dummy” instance before:
  - Create a Rectangle or Square instance with “dummy” mandatory attributes (width, height, size, etc.)
  - Call update instance method to this “dummy” instance to apply your real values
- You must use the method def update(self, *args, **kwargs)
- **dictionary must be used as **kwargs of the method update
- You are not allowed to use eval

### 19. File to instances
Update the class Base by adding the class method def load_from_file(cls): that returns a list of instances:

- The filename must be <Class name>.json - example: Rectangle.json
- If the file doesn’t exist, return an empty list
- Otherwise, return a list of instances - the type of these instances depends on cls (current class using this method)
- You must use the from_json_string and create methods

### 20. JSON ok, but CSV?
Update the class Base by adding the class methods def save_to_file_csv(cls, list_objs): and def load_from_file_csv(cls): that serializes and deserializes in CSV:

- The filename must be <Class name>.csv - example: Rectangle.csv
- Has the same behavior as the JSON serialization/deserialization
- Format of the CSV:
  - Rectangle: <id>,<width>,<height>,<x>,<y>
  - Square: <id>,<size>,<x>,<y>

### 21. Let's draw it
Update the class Base by adding the static method def draw(list_rectangles, list_squares): that opens a window and draws all the Rectangles and Squares:

- You must use the Turtle graphics module
- To install it: sudo apt-get install python3-tk
- To make the GUI available outside your vagrant machine, add this line in your Vagrantfile: config.ssh.forward_x11 = true
- No constraints for color, shape etc. be creative!

## Repository
- GitHub repository: alx-higher_level_programming
- Directory: 0x0C-python-almost_a_circle

## Author
- **Nana Antwi Boasiako** - [Nana Antwi Boasiako](https://github.com/NanaAntwiBoasiako)


2025-08-25 13:37:48,513 - evaluation_logger_Flights-80 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any part of the user's query about flight prices and transfer options."}
2025-08-25 13:37:53,795 - evaluation_logger_Flights-80 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 13:37:53,795 - evaluation_logger_Flights-80 - INFO - Message: Success.
2025-08-25 13:37:53,795 - evaluation_logger_Flights-80 - INFO - Success turn num = 4
2025-08-25 13:37:53,795 - evaluation_logger_Flights-80 - INFO - ----------------------------------------------------------------------------------------------------
