2025-08-25 13:23:44,350 - evaluation_logger_Flights-12 - INFO - Test Example Flights-12
2025-08-25 13:23:44,350 - evaluation_logger_Flights-12 - INFO - Query: Arrange the fastest economy class flight for two members of our team from Tokyo to Los Angeles on November 10, 2024. The other team will meet us at Los Angeles International Airport.
2025-08-25 13:23:55,056 - evaluation_logger_Flights-12 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Tokyo"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Los Angeles International Airport"
        }
    }
]

2025-08-25 13:23:55,056 - evaluation_logger_Flights-12 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Los Angeles International Airport"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Tokyo"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "TYO.CITY",
            "toId": "LAX.AIRPORT",
            "departDate": "2024-11-10",
            "cabinClass": "ECONOMY",
            "sort": "FASTEST",
            "adults": 2
        }
    }
]

2025-08-25 13:23:55,056 - evaluation_logger_Flights-12 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Tokyo'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Tokyo'}}
2025-08-25 13:23:55,056 - evaluation_logger_Flights-12 - INFO - Rule-based compare success.
2025-08-25 13:23:55,056 - evaluation_logger_Flights-12 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Los Angeles International Airport'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Los Angeles International Airport'}}
2025-08-25 13:23:55,056 - evaluation_logger_Flights-12 - INFO - Rule-based compare success.
2025-08-25 13:23:55,056 - evaluation_logger_Flights-12 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Tokyo'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Los Angeles International Airport'}}]
2025-08-25 13:23:55,056 - evaluation_logger_Flights-12 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "TYO.CITY",
                "type": "CITY",
                "name": "Tokyo",
                "code": "TYO",
                "regionName": "Tokyo-to",
                "country": "JP",
                "countryName": "Japan"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "LAX.AIRPORT",
                "type": "AIRPORT",
                "name": "Los Angeles International Airport",
                "code": "LAX",
                "city": "LAX",
                "cityName": "Los Angeles",
                "regionName": "California",
                "country": "US",
                "countryName": "United States",
                "countryNameShort": "US",
                "distanceToCity": {
                    "value": 18.926253464412262,
                    "unit": "km"
                },
                "parent": "LAX"
            }
        ]
    }
]

2025-08-25 13:24:07,047 - evaluation_logger_Flights-12 - INFO - Function Calls: 
[
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "TYO.CITY",
            "toId": "LAX.AIRPORT",
            "departDate": "2024-11-10",
            "sort": "FASTEST",
            "cabinClass": "ECONOMY",
            "adults": 2
        }
    }
]

2025-08-25 13:24:07,047 - evaluation_logger_Flights-12 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flights",
        "arguments": {
            "adults": 2,
            "cabinClass": "ECONOMY",
            "departDate": "2024-11-10",
            "fromId": "TYO.CITY",
            "sort": "FASTEST",
            "toId": "LAX.AIRPORT"
        }
    }
]

2025-08-25 13:24:07,048 - evaluation_logger_Flights-12 - INFO - Start compare_single_call: 
{'name': 'Search_Flights', 'arguments': {'adults': 2, 'cabinClass': 'ECONOMY', 'departDate': '2024-11-10', 'fromId': 'TYO.CITY', 'sort': 'FASTEST', 'toId': 'LAX.AIRPORT'}}
{'name': 'Search_Flights', 'arguments': {'adults': 2, 'cabinClass': 'ECONOMY', 'departDate': '2024-11-10', 'fromId': 'TYO.CITY', 'sort': 'FASTEST', 'toId': 'LAX.AIRPORT'}}
2025-08-25 13:24:07,048 - evaluation_logger_Flights-12 - INFO - Rule-based compare success.
2025-08-25 13:24:07,048 - evaluation_logger_Flights-12 - INFO - Success matched: [{'name': 'Search_Flights', 'arguments': {'adults': 2, 'cabinClass': 'ECONOMY', 'departDate': '2024-11-10', 'fromId': 'TYO.CITY', 'sort': 'FASTEST', 'toId': 'LAX.AIRPORT'}}]
2025-08-25 13:24:07,048 - evaluation_logger_Flights-12 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "flightOffers": [
                {
                    "token": "d7699_H4sIAAAAAAAA_y2QXW-bMBiFf016B9jmu5I1sUC7pAYqMKTZDQJDCEtWT9htKL9-DlS2znnOK1k-9lnKf-LRME7XoT9LoX0IveeS97XsdMb_GqdRScP5ZXjvjXoYDXpMSfAGQZKWBjI0tdjj8Uc3SU2MDD8MTafXWPN9f0XBMPymETu6FVk_nSjJlxHjElu6DQHICgDewDoc8XNm2_vdkloch-KWzoGbUIGSUMCYBrfimtUlaEkKrzTeTr-LORAHWhYkjCCdjyKm5Wsy3Kak8BB56uHhzmWA0nlPSZTsSJQdyBZMeX6TcXERhMYTCQPl0cYMl4s7porruuX6a31ei--HcCYxXLvyVuKc_KJkv0aJTd-1IVrShKFpevaD6K4dkwN_f-m-cBB4FvA09X38E1naywZtG-a4vFWwMQO1-wooPS9aV3msrKm8TBlbra1M5rmOpbCrEHCYglN1j0OFdKDfD_6pdgdlc8UG9Nlc_gM9Tcto5QEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "NRT",
                                "name": "Narita International Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LAX",
                                "name": "Los Angeles International Airport",
                                "city": "LAX",
                                "cityName": "Los Angeles",
                                "country": "US",
                                "countryName": "United States"
                            },
                            "departureTime": "2024-11-10T17:10:00",
                            "arrivalTime": "2024-11-10T09:45:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-10T17:10:00",
                                    "arrivalTime": "2024-11-10T09:45:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "NRT",
                                        "name": "Narita International Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LAX",
                                        "name": "Los Angeles International Airport",
                                        "city": "LAX",
                                        "cityName": "Los Angeles",
                                        "country": "US",
                                        "countryName": "United States"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 8408,
                                        "planeType": "789",
                                        "carrierInfo": {
                                            "operatingCarrier": "JL",
                                            "marketingCarrier": "AA"
                                        }
                                    },
                                    "carriers": [
                                        "AA",
                                        "JL"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "American Airlines",
                                            "code": "AA"
                                        },
                                        {
                                            "name": "Japan Airlines",
                                            "code": "JL"
                                        }
                                    ],
                                    "totalTime": 34500,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "787"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "2",
                                    "arrivalTerminal": "B"
                                }
                            ],
                            "totalTime": 34500,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2Qa2-CMBiFf41-o7SAF0yahSm6OQpT6-1TgwURb91oN5BfvwpL35zznJO8eZOelPqSI9M8XvPspKTxI0EmlMhilQIubuax0HIQ4pLfMzPOC5Puo8DbIRhGG9MyDf34aP-SVsqQBcfd_JCCGBuu67YoOR7-U4H7wPGd174frpqKC4Ud0EMQLtcQeWFbFni2jWazWZMSTCayjGpvQKhE4VkiQr1yfV3GG5jQqPYRrfeS0M1nmJdVuB5awZRDOq52oV8--4XeUWR9kQGdzoMxrMmqVKT2n5mED82Ljj3R05xLOccIAGfgoiaLWGK7Ja4wgi0mCq-CNxrM26iw7bpw0G9ShZFtD3tdmV5TrnJx_0gfeB70LUN_mfi1HOOjY43dS3Er7ho6tqcnY1DrqdGYrYi2AxsutfHWEmYnjoW4xpQZvcR2NB3ZU3NmAQiem2f2vtVWs-x7cL_JP7H130XaAQAA",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "NRT",
                                "name": "Narita International Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LAX",
                                "name": "Los Angeles International Airport",
                                "city": "LAX",
                                "cityName": "Los Angeles",
                                "country": "US",
                                "countryName": "United States"
                            },
                            "departureTime": "2024-11-10T17:10:00",
                            "arrivalTime": "2024-11-10T09:45:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-10T17:10:00",
                                    "arrivalTime": "2024-11-10T09:45:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "NRT",
                                        "name": "Narita International Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LAX",
                                        "name": "Los Angeles International Airport",
                                        "city": "LAX",
                                        "cityName": "Los Angeles",
                                        "country": "US",
                                        "countryName": "United States"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 62,
                                        "planeType": "789",
                                        "carrierInfo": {
                                            "operatingCarrier": "JL",
                                            "marketingCarrier": "JL"
                                        }
                                    },
                                    "carriers": [
                                        "JL",
                                        "JL"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Japan Airlines",
                                            "code": "JL"
                                        },
                                        {
                                            "name": "Japan Airlines",
                                            "code": "JL"
                                        }
                                    ],
                                    "totalTime": 34500,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "787"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "2",
                                    "arrivalTerminal": "B"
                                }
                            ],
                            "totalTime": 34500,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QUXOiMBSFf419A5KACp3J7LhIW1sgVoIrfWEwRMTaskuyC_rr9wpObs75zp2bmSRHrX-rR8s6nOvqqJXxV5lVo5uq0NIUzZd1aEH2TfNZf1dWUbcWz1i42GEUs61FLAOWeMx-yF4bqhX0od5Ls6CG53kjKkHXC_fOLZ2ZTuD8nAVxMrREo6ljTjFCmxTh5dvYbOkL8VeMD6mk0VJ1DE0Zu65sdsFJelI44osuPW-KLSo3DJchv_S7BLlqi_Q6XAaYXzMV8e06rrs-Tl0SPgnE_X4XB92t_x6fFInq7rZ7lmYq5E-voY_6JOl0dA0gRz1klPiQ3yf2Emq4jhSCYtN05h4eclMoOnfvLDTFaMRS0yR84eHrGOGZU_s-1lNs2-70QcmzFLpuvt_khX48E8eAX23-gWcT4nuq-CMJwMReQFU5Aj0OWuQsBNvn7gZMjFbms0KWAkjmdlnOAA65A1rnxETm7dwpX_0Cu-aHuXusyX9YimAP-wEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "NRT",
                                "name": "Narita International Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LAX",
                                "name": "Los Angeles International Airport",
                                "city": "LAX",
                                "cityName": "Los Angeles",
                                "country": "US",
                                "countryName": "United States"
                            },
                            "departureTime": "2024-11-10T14:45:00",
                            "arrivalTime": "2024-11-10T07:30:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-10T14:45:00",
                                    "arrivalTime": "2024-11-10T07:30:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "NRT",
                                        "name": "Narita International Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LAX",
                                        "name": "Los Angeles International Airport",
                                        "city": "LAX",
                                        "cityName": "Los Angeles",
                                        "country": "US",
                                        "countryName": "United States"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 24,
                                        "carrierInfo": {
                                            "operatingCarrier": "ZG",
                                            "marketingCarrier": "ZG"
                                        }
                                    },
                                    "carriers": [
                                        "ZG",
                                        "ZG"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "ZIPAIR Tokyo",
                                            "code": "ZG"
                                        },
                                        {
                                            "name": "ZIPAIR Tokyo",
                                            "code": "ZG"
                                        }
                                    ],
                                    "totalTime": 35100,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "787"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "paid",
                                            "type": "light_meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "free"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 35100,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d7699_H4sIAAAAAAAA_y2QUW-bMBSFf036hrENJKSSVdHAtqQGJmJIsxcEjkNYWLxhd2H8-jlQ2TrnO1e68r2-aP1bPdv2uWubi1bWhwKN1LKptABc_rLPvZFaymt7a-yq7W12TGnwjmCSFja2LXP48_FFDNpSPSdPbS1ARaz1ej2j4gR9Uk-WwI3c12WU7KcSl5q4wEMQZjmE795c7MnXzPN22ymdSByqezoGq4QpnIQKxSy4511WFfBEU9SxeDP8yMdAHViR0zBCbDyqmBXfk_Y-JLmP6ZcGHR5cBDgdd4xGyZZG2YFu4LDf33WcXxVl8UDDwHi0cMLpYcHN4AC4q_U8vqzU5yKSa4LgjCdN9vQbo7s5mnXgCjt4SgNBjuN7T0p0gutW3t7EPxIEvosdy3yf_Itd622BN3X1x799GFg4gblNCY1eJq3KLDRWl35mjM92Kh0BHeQaFCWGS27gXD5iW2IAwaPxZ7k9GBtLDq_LuvsP7YbKSuUBAAA.",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "HND",
                                "name": "Tokyo Haneda Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LAX",
                                "name": "Los Angeles International Airport",
                                "city": "LAX",
                                "cityName": "Los Angeles",
                                "country": "US",
                                "countryName": "United States"
                            },
                            "departureTime": "2024-11-10T16:25:00",
                            "arrivalTime": "2024-11-10T09:10:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-10T16:25:00",
                                    "arrivalTime": "2024-11-10T09:10:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "HND",
                                        "name": "Tokyo Haneda Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LAX",
                                        "name": "Los Angeles International Airport",
                                        "city": "LAX",
                                        "cityName": "Los Angeles",
                                        "country": "US",
                                        "countryName": "United States"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 8423,
                                        "planeType": "773",
                                        "carrierInfo": {
                                            "operatingCarrier": "JL",
                                            "marketingCarrier": "AA"
                                        }
                                    },
                                    "carriers": [
                                        "AA",
                                        "JL"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "American Airlines",
                                            "code": "AA"
                                        },
                                        {
                                            "name": "Japan Airlines",
                                            "code": "JL"
                                        }
                                    ],
                                    "totalTime": 35100,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "777"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "3",
                                    "arrivalTerminal": "B"
                                }
                            ],
                            "totalTime": 35100,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QbW-CMBSFf437RmkBGSxpFqboprxsWtz81ECpiDK70G44fv0qLL055zm3uenLUakv-WCah6aujkoa3xJUQokqVxww8WkeWi2FEOf6Upl53Zpkn0bBB4JJujMt09CLPewf-VUZsmX4ri44yLHh-_6IkmHvn1rsAid0ntww2Q4tJhR2wBRBuMkgenLHZouX7-lyuRxSieO57NI-uI-JRMlJopgEXdZs8h0sSdqHiPR7GZPda1J31yTzrGjBIJldP5Kwu_Xf9IyKs7OMyGIVzWAfbzsV9-Etb7Na89vEnusajuOMYQSAc--jIYtcYnskpjCCI5YKb6NnEq3GqB8Bvak7bl4xsm1veid5w5mqxWXNf_EqQq6hv0z8WI6xnlgz_2yx06eGiR3oqijUehw0pxt9naCg3kYbG62kNi9KxjRyariue6MDdbTW1AIQ3CZP9OVdW08bIZqi-wNmpwbK2gEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "HND",
                                "name": "Tokyo Haneda Airport",
                                "city": "TYO",
                                "cityName": "Tokyo",
                                "country": "JP",
                                "countryName": "Japan"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "LAX",
                                "name": "Los Angeles International Airport",
                                "city": "LAX",
                                "cityName": "Los Angeles",
                                "country": "US",
                                "countryName": "United States"
                            },
                            "departureTime": "2024-11-10T16:25:00",
                            "arrivalTime": "2024-11-10T09:10:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-10T16:25:00",
                                    "arrivalTime": "2024-11-10T09:10:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "HND",
                                        "name": "Tokyo Haneda Airport",
                                        "city": "TYO",
                                        "cityName": "Tokyo",
                                        "country": "JP",
                                        "countryName": "Japan"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "LAX",
                                        "name": "Los Angeles International Airport",
                                        "city": "LAX",
                                        "cityName": "Los Angeles",
                                        "country": "US",
                                        "countryName": "United States"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 16,
                                        "planeType": "773",
                                        "carrierInfo": {
                                            "operatingCarrier": "JL",
                                            "marketingCarrier": "JL"
                                        }
                                    },
                                    "carriers": [
                                        "JL",
                                        "JL"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Japan Airlines",
                                            "code": "JL"
                                        },
                                        {
                                            "name": "Japan Airlines",
                                            "code": "JL"
                                        }
                                    ],
                                    "totalTime": 35100,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "777"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "meal"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "3",
                                    "arrivalTerminal": "B"
                                }
                            ],
                            "totalTime": 35100,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                }
            ],
            "flightDeals": [
                {
                    "key": "CHEAPEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2QUXOiMBSFf419A5KACp3J7LhIW1sgVoIrfWEwRMTaskuyC_rr9wpObs75zp2bmSRHrX-rR8s6nOvqqJXxV5lVo5uq0NIUzZd1aEH2TfNZf1dWUbcWz1i42GEUs61FLAOWeMx-yF4bqhX0od5Ls6CG53kjKkHXC_fOLZ2ZTuD8nAVxMrREo6ljTjFCmxTh5dvYbOkL8VeMD6mk0VJ1DE0Zu65sdsFJelI44osuPW-KLSo3DJchv_S7BLlqi_Q6XAaYXzMV8e06rrs-Tl0SPgnE_X4XB92t_x6fFInq7rZ7lmYq5E-voY_6JOl0dA0gRz1klPiQ3yf2Emq4jhSCYtN05h4eclMoOnfvLDTFaMRS0yR84eHrGOGZU_s-1lNs2-70QcmzFLpuvt_khX48E8eAX23-gWcT4nuq-CMJwMReQFU5Aj0OWuQsBNvn7gZMjFbms0KWAkjmdlnOAA65A1rnxETm7dwpX_0Cu-aHuXusyX9YimAP-wEAAA..",
                    "price": {
                        "currencyCode": "USD",
                        "units": 453,
                        "nanos": 810000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 900000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 900000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 227
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 900000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 227
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        },
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 910000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 910000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 227
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 910000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 227
                                }
                            },
                            "travellerReference": "2",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "FASTEST",
                    "offerToken": "d7699_H4sIAAAAAAAA_y2QXW-bMBiFf016B9jmu5I1sUC7pAYqMKTZDQJDCEtWT9htKL9-DlS2znnOK1k-9lnKf-LRME7XoT9LoX0IveeS97XsdMb_GqdRScP5ZXjvjXoYDXpMSfAGQZKWBjI0tdjj8Uc3SU2MDD8MTafXWPN9f0XBMPymETu6FVk_nSjJlxHjElu6DQHICgDewDoc8XNm2_vdkloch-KWzoGbUIGSUMCYBrfimtUlaEkKrzTeTr-LORAHWhYkjCCdjyKm5Wsy3Kak8BB56uHhzmWA0nlPSZTsSJQdyBZMeX6TcXERhMYTCQPl0cYMl4s7porruuX6a31ei--HcCYxXLvyVuKc_KJkv0aJTd-1IVrShKFpevaD6K4dkwN_f-m-cBB4FvA09X38E1naywZtG-a4vFWwMQO1-wooPS9aV3msrKm8TBlbra1M5rmOpbCrEHCYglN1j0OFdKDfD_6pdgdlc8UG9Nlc_gM9Tcto5QEAAA..",
                    "price": {
                        "currencyCode": "USD",
                        "units": 3975,
                        "nanos": 120000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 1987,
                                    "nanos": 560000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 1681,
                                    "nanos": 0
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 4,
                                    "nanos": 150000000
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 302,
                                    "nanos": 410000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 1988
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 1987,
                                    "nanos": 560000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 1988
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        },
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 1987,
                                    "nanos": 560000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 1681,
                                    "nanos": 0
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 4,
                                    "nanos": 150000000
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 302,
                                    "nanos": 410000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 1988
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 1987,
                                    "nanos": 560000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 1988
                                }
                            },
                            "travellerReference": "2",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "BEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2QUXOiMBSFf419A5KACp3J7LhIW1sgVoIrfWEwRMTaskuyC_rr9wpObs75zp2bmSRHrX-rR8s6nOvqqJXxV5lVo5uq0NIUzZd1aEH2TfNZf1dWUbcWz1i42GEUs61FLAOWeMx-yF4bqhX0od5Ls6CG53kjKkHXC_fOLZ2ZTuD8nAVxMrREo6ljTjFCmxTh5dvYbOkL8VeMD6mk0VJ1DE0Zu65sdsFJelI44osuPW-KLSo3DJchv_S7BLlqi_Q6XAaYXzMV8e06rrs-Tl0SPgnE_X4XB92t_x6fFInq7rZ7lmYq5E-voY_6JOl0dA0gRz1klPiQ3yf2Emq4jhSCYtN05h4eclMoOnfvLDTFaMRS0yR84eHrGOGZU_s-1lNs2-70QcmzFLpuvt_khX48E8eAX23-gWcT4nuq-CMJwMReQFU5Aj0OWuQsBNvn7gZMjFbms0KWAkjmdlnOAA65A1rnxETm7dwpX_0Cu-aHuXusyX9YimAP-wEAAA..",
                    "price": {
                        "currencyCode": "USD",
                        "units": 453,
                        "nanos": 810000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 900000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 900000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 227
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 900000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 227
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        },
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 910000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 910000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 227
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 226,
                                    "nanos": 910000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 227
                                }
                            },
                            "travellerReference": "2",
                            "travellerType": "ADULT"
                        }
                    ]
                }
            ],
            "atolProtectedStatus": "NONE",
            "searchId": "1E0CBE3A585A20A864C563A71C4A2E5F",
            "displayOptions": {
                "brandedFaresShownByDefault": false,
                "directFlightsOnlyFilterIgnored": false,
                "hideFlexiblePricesBanner": false
            },
            "isOffersCabinClassExtended": false,
            "searchCriteria": {
                "cabinClass": "ECONOMY"
            }
        }
    }
]

2025-08-25 13:27:29,338 - evaluation_logger_Flights-12 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 前言

在上一篇文章中，我们实现了`axios`的请求和响应配置化，即用户可以配置`config`对象中的`url`、`method`、`params`、`data`、`headers`、`timeout`、`responseType`等属性。另外，我们还实现了配置的默认值以及配置的合并策略。那么接下来，我们就来实现`axios`的核心功能：拦截器。

# 2. 示例

我们先来看一下官方`axios`拦截器的使用示例：

## 2.1 添加拦截器

```javascript
// 添加请求拦截器
axios.interceptors.request.use(
  function(config) {
    // 在发送请求之前做些什么
    return config;
  },
  function(error) {
    // 对请求错误做些什么
    return Promise.reject(error);
  }
);

// 添加响应拦截器
axios.interceptors.response.use(
  function(response) {
    // 对响应数据做点什么
    return response;
  },
  function(error) {
    // 对响应错误做点什么
    return Promise.reject(error);
  }
);
```

## 2.2 移除拦截器

```javascript
const myInterceptor = axios.interceptors.request.use(function() {
  /*...*/
});
axios.interceptors.request.eject(myInterceptor);
```

## 2.3 给自定义的 axios 实例添加拦截器

```javascript
const instance = axios.create();
instance.interceptors.request.use(function() {
  /*...*/
});
```

从以上示例我们可以看出：

- `axios`对象上有一个`interceptors`对象属性，该属性又有`request`和`response`2 个属性，这两个属性都是拦截器管理器，我们可以调用其`use`方法来添加拦截器，调用其`eject`方法来移除拦截器；
- `use`方法支持两个参数，第一个参数类似`Promise`的`resolve`函数，第二个参数类似`Promise`的`reject`函数。我们可以在`resolve`函数和`reject`函数中执行同步代码或者是异步代码逻辑；
- 并且，我们是可以添加多个拦截器的，拦截器的执行顺序是链式依次执行的方式。对于`request`拦截器，后添加的拦截器会在请求前的过程中先执行；对于`response`拦截器，先添加的拦截器会在响应后先执行；

# 3. 拦截器管理器设计

通过上面的示例，我们已经对拦截器有了大致的了解，那么接下来，我们就来先实现一个拦截器管理器。

## 3.1 接口定义

根据上面的分析，一个拦截器管理器需要满足以下需求：

1. 添加拦截器：`use`方法；
2. 移除拦截器：`eject`方法；
3. 遍历所有注册的拦截器：`forEach`方法；

那么，我们先在`src/types/index.ts`中定义拦截器管理器的接口。

```typescript
export interface AxiosInterceptorManager<T> {
  use(resolved: ResolvedFn<T>, rejected?: RejectedFn): number;

  eject(id: number): void;

  forEach(fn: (interceptor: Interceptor<T>) => void): void;
}

export interface ResolvedFn<T> {
  (val: T): T | Promise<T>;
}

export interface RejectedFn {
  (error: any): any;
}

export interface Interceptor<T> {
  resolved: ResolvedFn<T>;
  rejected?: RejectedFn;
}
```

我们定义了一个`AxiosInterceptorManager`泛型接口，因为对于`request`和`response`的拦截器处理函数来说，它们参数的类型是不同的，`request`拦截器的`resolve`函数的参数是`AxiosRequestConfig`类型，而`response`拦截器的`resolve`函数的参数是`AxiosResponse`类型。

另外，`use`接口返回一个`id`用于删除，`forEach`接口便于遍历拦截器。

## 3.2 实现拦截器管理器类

根据上面定义的接口，我们创建一个`AxiosInterceptorManager`类，这个类就是拦截器管理器类，我们会在`src/core/InterceptorManager.ts`中实现它：

```typescript
import { ResolvedFn, RejectedFn, Interceptor } from "../types";

export default class InterceptorManager<T> {
  private interceptors: Array<Interceptor<T> | null>;

  constructor() {
    this.interceptors = [];
  }

  use(resolved: ResolvedFn<T>, rejected?: RejectedFn): number {
    this.interceptors.push({
      resolved,
      rejected,
    });
    return this.interceptors.length - 1;
  }

  forEach(fn: (interceptor: Interceptor<T>) => void): void {
    this.interceptors.forEach((interceptor) => {
      if (interceptor !== null) {
        fn(interceptor);
      }
    });
  }

  eject(id: number): void {
    if (this.interceptors[id]) {
      this.interceptors[id] = null;
    }
  }
}
```

我们定义了一个`InterceptorManager`类，该类被`export`出去，并且在这个类中我们定义了三个公共方法：`use`、`forEach`、`eject`，以及一个私有属性`interceptors`，该属性是一个数组，用来存储拦截器。

- `use`：就是往`interceptors`数组里添加拦截器对象，并返回一个`id`用于删除；
- `forEach`：遍历`interceptors`数组中的拦截器，并将每一个拦截器作为参数传入`fn`中执行。注意，在遍历过程中，我们忽略那些已被`eject`删除的拦截器，即值为`null`的拦截器；
- `eject`：删除拦截器，通过传入的`id`找到`interceptors`数组中的对应索引的拦截器，并将其置为`null`。注意，这里我们不能用`splice`直接删除拦截器，因为我们在`use`的时候是通过`interceptors`的长度来作为`id`的，如果用`splice`删除的话，会导致数组长度变化，从而使`id`错乱。

OK，拦截器管理器类就实现好了，接下来，我们就要在`Axios`类中使用它。

# 4. 修改 Axios 类型

在`Axios`类中使用拦截器之前，我们需要先修改`Axios`类的类型定义。

在之前，我们只给`Axios`类定义了`request`、`get`、`delete`、`head`、`options`、`post`、`put`、`patch`这几个方法，并没有定义`interceptors`属性，所以我们需要在`src/types/index.ts`中的`Axios`接口上添加`interceptors`属性，如下：

```typescript
export interface Axios {
  defaults: AxiosRequestConfig;
  interceptors: {
    request: AxiosInterceptorManager<AxiosRequestConfig>;
    response: AxiosInterceptorManager<AxiosResponse>;
  };

  request(config: AxiosRequestConfig): AxiosPromise;

  get(url: string, config?: AxiosRequestConfig): AxiosPromise;

  delete(url: string, config?: AxiosRequestConfig): AxiosPromise;

  head(url: string, config?: AxiosRequestConfig): AxiosPromise;

  options(url: string, config?: AxiosRequestConfig): AxiosPromise;

  post(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;

  put(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;

  patch(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;
}
```

我们给`Axios`接口添加了`interceptors`属性，该属性是一个对象，该对象包含两个属性：`request`和`response`，它们都是`AxiosInterceptorManager`类型，不同的是`request`拦截器管理器的泛型参数是`AxiosRequestConfig`，而`response`拦截器管理器的泛型参数是`AxiosResponse`。

# 5. 修改 Axios 类

类型定义好之后，接下来我们就要在`Axios`类中实现它。

首先，我们先在`src/core/Axios.ts`中引入我们刚刚定义好的拦截器管理器类：

```typescript
import { InterceptorManager } from "./InterceptorManager";
```

然后，在`Axios`类中定义`interceptors`属性：

```typescript
export default class Axios {
  public defaults: AxiosRequestConfig;
  public interceptors: {
    request: InterceptorManager<AxiosRequestConfig>;
    response: InterceptorManager<AxiosResponse>;
  };

  // ...
}
```

接着，在构造函数中初始化`interceptors`：

```typescript
constructor(initConfig: AxiosRequestConfig) {
    this.defaults = initConfig;
    this.interceptors = {
      request: new InterceptorManager<AxiosRequestConfig>(),
      response: new InterceptorManager<AxiosResponse>(),
    };
  }
```

这样，我们就给`Axios`类添加了`interceptors`属性，并且完成了初始化。

# 6. 实现拦截器链式调用

拦截器管理器已经创建好了，接下来我们就要实现拦截器与请求过程的链式调用。

我们从拦截器的示例中可以看到，当我们添加请求拦截器的时候，我们可以选择只添加一个`resolve`函数，也可以选择再添加一个`reject`函数。我们可以在请求拦截器的`resolve`函数中修改请求配置`config`，也可以做一些其他的事情，比如显示`loading`；在`reject`函数中处理请求错误。同样，对于响应拦截器也是如此。

那么，多个请求拦截器与请求过程，以及多个响应拦截器与响应过程之间应该是这样一个链式调用的关系，如下：

```javascript
// 请求拦截器2 -> 请求拦截器1 -> 发送请求 -> 响应拦截器1 -> 响应拦截器2 -> 发起的请求得到响应
```

并且，这个链式调用应该是一个`Promise`调用链，这样我们就可以在拦截器中执行异步代码，并且可以在任何一个拦截器中直接`return`一个`Promise`来暂停执行，直到这个`Promise`被`resolve`后，才会继续执行调用链上的后续拦截器。

那么，我们如何来实现这个`Promise`调用链呢？

我们可以在发送请求前，先构造一个`Promise`调用链，`Promise`调用链的初始值是一个`config`配置对象，然后先遍历所有的请求拦截器，将每个请求拦截器的`resolve`函数和`reject`函数压入到`Promise`调用链中，接着再压入发送请求的`dispatchRequest`函数，然后再遍历所有的响应拦截器，将每个响应拦截器的`resolve`函数和`reject`函数压入到`Promise`调用链中。这样就形成了一个`Promise`调用链，最后会`return`这个`Promise`调用链，当调用链执行的时候，会先执行请求拦截器，再执行发送请求，然后再执行响应拦截器。

OK，思路已经理清，接下来，我们就修改`src/core/Axios.ts`中的`request`方法，如下：

```typescript
  request(config: AxiosRequestConfig): AxiosPromise {
    // 先合并配置
    config = mergeConfig(this.defaults, config);

    // 初始化Promise链，并把config作为初始参数
    let chain: any[] = [
      {
        resolved: dispatchRequest,
        rejected: undefined,
      },
    ];

    // 遍历请求拦截器，将每个拦截器压入到chain数组的前面
    this.interceptors.request.forEach((interceptor) => {
      chain.unshift(interceptor);
    });

    // 遍历响应拦截器，将每个拦截器压入到chain数组的后面
    this.interceptors.response.forEach((interceptor) => {
      chain.push(interceptor);
    });

    // 初始化一个已经resolve的promise，初始值为config
    let promise = Promise.resolve(config);

    // 循环chain数组，将chain数组内的每一项的resolved函数和rejected函数添加到promise.then中
    while (chain.length) {
      const { resolved, rejected } = chain.shift()!;
      promise = promise.then(resolved, rejected);
    }

    // 返回promise
    return promise;
  }
```

注意：我们构造的`chain`数组的初始值是一个包含`dispatchRequest`函数的对象，然后我们把请求拦截器遍历后`unshift`到`chain`数组的前面，把响应拦截器遍历后`push`到`chain`数组的后面，然后再定义一个已经`resolve`的`promise`，循环`chain`数组，在`promise`的`then`方法中不断`shift`出`chain`数组的第一个对象，然后拿对象的`resolved`函数和`rejected`函数作为`then`的参数。

整个请求拦截器的执行顺序是：**先添加的后执行，后添加的先执行**；而响应拦截器的执行顺序是：**先添加的先执行，后添加的后执行**。

# 7. 修改默认配置

由于我们给`Axios`类添加了`interceptors`属性，所以我们在创建`axios`混合对象的时候，需要把`interceptors`属性也添加进去，修改`src/axios.ts`，如下：

```typescript
function createInstance(config: AxiosRequestConfig): AxiosStatic {
  const context = new Axios(config);
  const instance = Axios.prototype.request.bind(context);

  // 把context中的原型方法和实例方法全部拷贝到instance上
  extend(instance, context);

  return instance as AxiosStatic;
}

const axios = createInstance(defaults);
```

我们通过`extend`方法把`context`中的原型方法和实例方法全部拷贝到`instance`上，这样`instance`上就有了`interceptors`属性。

# 8. demo 编写

好了，拦截器我们已经实现完毕，接下来我们就编写一个`demo`来测试下拦截器功能是否正常。

我们在 `examples` 目录下创建 `interceptors`目录，在 `interceptors`目录下创建 `index.html`:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Interceptors example</title>
  </head>
  <body>
    <script src="/__build__/interceptors.js"></script>
  </body>
</html>
```

再创建 `app.ts` 作为入口文件：

```typescript
import axios from "../../src/axios";

// 添加请求拦截器1
axios.interceptors.request.use(
  (config) => {
    config.headers.test += "a";
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// 添加请求拦截器2
axios.interceptors.request.use(
  (config) => {
    config.headers.test += "b";
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// 添加响应拦截器1
axios.interceptors.response.use(
  (res) => {
    res.data.data.name += "A";
    return res;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// 添加响应拦截器2
axios.interceptors.response.use(
  (res) => {
    res.data.data.name += "B";
    return res;
  },
  (error) => {
    return Promise.reject(error);
  }
);

axios({
  url: "/api/interceptors",
  method: "post",
  headers: {
    test: "",
  },
  data: {
    msg: "hello interceptors",
  },
}).then((res) => {
  console.log(res);
});
```

接着在 `server/server.js` 添加新的接口路由：

```javascript
// 拦截器测试
router.post("/api/interceptors", function(req, res) {
  res.json({
    data: {
      msg: req.body.msg,
      name: "zhangsan",
    },
  });
});
```

最后在根目录下的`index.html`中加上启动该`demo`的入口：

```html
<li><a href="examples/interceptors">interceptors</a></li>
```

OK,我们在命令行中执行：

```bash
# 同时开启客户端和服务端
npm run server | npm start
```

接着我们打开 `chrome` 浏览器，访问 <http://localhost:8000/> 即可访问我们的 `demo` 了，我们点击 `interceptors`，通过`F12`的 `network` 部分我们可以看到请求已正常发出，并且响应已正常返回。

我们可以观察一下请求和响应：

请求头`headers`中的`test`字段：我们在请求拦截器 1 中给`config.headers.test`添加了字符`a`，在请求拦截器 2 中给`config.headers.test`添加了字符`b`，由于请求拦截器的执行顺序是**先添加的后执行，后添加的先执行**，所以最终`test`字段的值应该是`ba`。

响应数据`data`中的`name`字段：我们在响应拦截器 1 中给`res.data.data.name`添加了字符`A`，在响应拦截器 2 中给`res.data.data.name`添加了字符`B`，由于响应拦截器的执行顺序是**先添加的先执行，后添加的后执行**，所以最终`name`字段的值应该是`zhangsanAB`。

我们通过`F12`观察，结果与我们预想的一致。

![](~@/axios/07/01.png)

![](~@/axios/07/02.png)

OK，拦截器测试结果正常。

# 9. 遗留问题

我们虽然已经实现了拦截器功能，但是仍然有一个小问题，就是我们在`Axios`类的`request`方法中，把`config`作为初始参数传入`Promise.resolve(config)`，然后通过`Promise`调用链一层层传递下去，但是在请求拦截器中我们可以修改这个`config`并且返回一个新的`config`，然后这个新的`config`会作为请求的参数，但是在响应拦截器中，我们拿到的响应对象`response`中的`config`确是最初的`config`，而不是经过请求拦截器修改后的`config`，如下：

```typescript
// 添加请求拦截器
axios.interceptors.request.use(
  (config) => {
    config.headers.test += "a";
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// 添加响应拦截器
axios.interceptors.response.use(
  (res) => {
    console.log(res.config); // 这个config是初始的config，不是经过请求拦截器修改后的config
    return res;
  },
  (error) => {
    return Promise.reject(error);
  }
);
```

这个问题是存在的，但是目前我们并不打算修复它，因为`axios`官方也是存在这个问题的，如下：

![](~@/axios/07/03.png)

所以，这个问题我们暂时先不处理，等后续我们做其他功能的时候再顺带处理。

# 10. 总结

至此，`axios`的拦截器功能我们就已经实现完毕。我们实现了拦截器管理器类，用来管理

2025-08-25 13:27:37,052 - evaluation_logger_Flights-12 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about arranging a flight from Tokyo to Los Angeles.'}
2025-08-25 13:27:44,672 - evaluation_logger_Flights-12 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 13:27:44,672 - evaluation_logger_Flights-12 - INFO - Message: Success.
2025-08-25 13:27:44,672 - evaluation_logger_Flights-12 - INFO - Success turn num = 2
2025-08-25 13:27:44,672 - evaluation_logger_Flights-12 - INFO - ----------------------------------------------------------------------------------------------------
