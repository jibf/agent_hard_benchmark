2025-08-25 12:34:56,874 - evaluation_logger_Hotels-27 - INFO - Test Example Hotels-27
2025-08-25 12:34:56,874 - evaluation_logger_Hotels-27 - INFO - Query: I'm planning to stay at the Best Western Blairmore in Saskatoon from December 15, 2024 to December 20, 2024. I want to know the user reviews for the hotel.
2025-08-25 12:35:07,484 - evaluation_logger_Hotels-27 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Best Western Blairmore, Saskatoon"
        }
    }
]

2025-08-25 12:35:07,484 - evaluation_logger_Hotels-27 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Best Western Blairmore, Saskatoon"
        }
    },
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 280911,
            "search_type": "hotel",
            "arrival_date": "2024-12-15",
            "departure_date": "2024-12-20"
        }
    }
]

2025-08-25 12:35:07,484 - evaluation_logger_Hotels-27 - INFO - Start compare_single_call: 
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Best Western Blairmore, Saskatoon'}}
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Best Western Blairmore, Saskatoon'}}
2025-08-25 12:35:07,484 - evaluation_logger_Hotels-27 - INFO - Rule-based compare success.
2025-08-25 12:35:07,484 - evaluation_logger_Hotels-27 - INFO - Success matched: [{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Best Western Blairmore, Saskatoon'}}]
2025-08-25 12:35:07,485 - evaluation_logger_Hotels-27 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "dest_id": "280911",
                "search_type": "hotel",
                "nr_hotels": 1,
                "hotels": 1,
                "longitude": -106.75571,
                "city_name": "Saskatoon",
                "name": "Best Western Blairmore",
                "dest_type": "hotel",
                "type": "ho",
                "latitude": 52.12835,
                "roundtrip": "GgEwIAAoATICZW46IUJlc3QgV2VzdGVybiBCbGFpcm1vcmUsIFNhc2thdG9vbkAASgBQAA==",
                "cc1": "ca",
                "city_ufi": -573213,
                "country": "Canada",
                "region": "Saskatchewan",
                "lc": "en",
                "label": "Best Western Blairmore, Saskatoon, Saskatchewan, Canada"
            }
        ]
    }
]

2025-08-25 12:35:18,301 - evaluation_logger_Hotels-27 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 280911,
            "search_type": "hotel",
            "arrival_date": "2024-12-15",
            "departure_date": "2024-12-20"
        }
    }
]

2025-08-25 12:35:18,301 - evaluation_logger_Hotels-27 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "arrival_date": "2024-12-15",
            "departure_date": "2024-12-20",
            "dest_id": 280911,
            "search_type": "hotel"
        }
    },
    {
        "name": "Get_Hotel_Reviews(Tips)",
        "arguments": {
            "hotel_id": "280911"
        }
    }
]

2025-08-25 12:35:18,301 - evaluation_logger_Hotels-27 - INFO - Start compare_single_call: 
{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-12-15', 'departure_date': '2024-12-20', 'dest_id': 280911, 'search_type': 'hotel'}}
{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-12-15', 'departure_date': '2024-12-20', 'dest_id': 280911, 'search_type': 'hotel'}}
2025-08-25 12:35:18,301 - evaluation_logger_Hotels-27 - INFO - Rule-based compare success.
2025-08-25 12:35:18,301 - evaluation_logger_Hotels-27 - INFO - Success matched: [{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-12-15', 'departure_date': '2024-12-20', 'dest_id': 280911, 'search_type': 'hotel'}}]
2025-08-25 12:35:18,301 - evaluation_logger_Hotels-27 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "hotels": [
                {
                    "hotel_id": 280911,
                    "accessibilityLabel": "Best Western Blairmore.\n3 out of 5 stars.\n8.6 Fabulous 376 reviews.\n‎7 km from centre‬.\n2 beds.\n531 USD.\nIncludes taxes and charges.\nFree cancellation.\nNo prepayment needed.",
                    "property": {
                        "rankingPosition": 0,
                        "checkout": {
                            "fromTime": "00:00",
                            "untilTime": "11:00"
                        },
                        "ufi": -573213,
                        "accuratePropertyClass": 3,
                        "isPreferred": true,
                        "checkoutDate": "2024-12-20",
                        "checkin": {
                            "untilTime": "00:00",
                            "fromTime": "16:00"
                        },
                        "countryCode": "ca",
                        "mainPhotoId": 163832717,
                        "propertyClass": 3,
                        "currency": "CAD",
                        "wishlistName": "Saskatoon",
                        "reviewCount": 376,
                        "reviewScore": 8.6,
                        "checkinDate": "2024-12-15",
                        "longitude": -106.755706071854,
                        "position": 0,
                        "blockIds": [
                            "28091113_346755329_2_1_0"
                        ],
                        "id": 280911,
                        "reviewScoreWord": "Fabulous",
                        "optOutFromGalleryChanges": 0,
                        "latitude": 52.1283509641964,
                        "priceBreakdown": {
                            "grossPrice": {
                                "value": 530.613771340925,
                                "currency": "USD"
                            }
                        },
                        "qualityClass": 0,
                        "name": "Best Western Blairmore",
                        "isHighlightedHotel": true,
                        "isFirstPage": true
                    }
                }
            ],
            "meta": [
                {
                    "title": "61 properties"
                }
            ],
            "appear": [
                {
                    "id": "cma",
                    "component": {
                        "props": {
                            "fill": true,
                            "content": {
                                "props": {
                                    "fitContentWidth": true,
                                    "items": [
                                        {
                                            "props": {
                                                "component": {
                                                    "props": {
                                                        "spacing": "spacing_half",
                                                        "items": [
                                                            {
                                                                "props": {
                                                                    "text": [
                                                                        {
                                                                            "font": "body_2",
                                                                            "text": "Commission paid and other benefits may affect an accommodation's ranking."
                                                                        },
                                                                        {
                                                                            "text": "  ",
                                                                            "color": "foreground",
                                                                            "font": "strong_2"
                                                                        },
                                                                        {
                                                                            "linkActions": [
                                                                                {}
                                                                            ],
                                                                            "text": "Find out more",
                                                                            "color": "action_foreground",
                                                                            "font": "body_2"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        },
                                        {},
                                        {
                                            "props": {
                                                "component": {
                                                    "props": {
                                                        "variant": "tertiary_tinted",
                                                        "tertiaryTintedColor": "foreground",
                                                        "accessibilityLabel": "Close",
                                                        "icon": "close"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                {},
                {
                    "id": "signin_now",
                    "component": {
                        "props": {
                            "title": "Sign in and save money",
                            "text": "Get instant access to our Genius loyalty programme and enjoy discounts at properties worldwide."
                        }
                    }
                },
                {
                    "component": {
                        "props": {
                            "text": "Properties with these icons have been awarded Booking.com's quality rating for homes"
                        }
                    },
                    "id": "banner_qualityrating"
                }
            ]
        }
    }
]

2025-08-25 12:35:25,622 - evaluation_logger_Hotels-27 - INFO - Function Calls: 
[
    {
        "name": "Get_Hotel_Reviews(Tips)",
        "arguments": {
            "hotel_id": "280911"
        }
    }
]

2025-08-25 12:35:25,623 - evaluation_logger_Hotels-27 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Hotel_Reviews(Tips)",
        "arguments": {
            "hotel_id": "280911"
        }
    }
]

2025-08-25 12:35:25,623 - evaluation_logger_Hotels-27 - INFO - Start compare_single_call: 
{'name': 'Get_Hotel_Reviews(Tips)', 'arguments': {'hotel_id': '280911'}}
{'name': 'Get_Hotel_Reviews(Tips)', 'arguments': {'hotel_id': '280911'}}
2025-08-25 12:35:25,623 - evaluation_logger_Hotels-27 - INFO - Rule-based compare success.
2025-08-25 12:35:25,623 - evaluation_logger_Hotels-27 - INFO - Success matched: [{'name': 'Get_Hotel_Reviews(Tips)', 'arguments': {'hotel_id': '280911'}}]
2025-08-25 12:35:25,624 - evaluation_logger_Hotels-27 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "count": 25,
            "result": [
                {
                    "languagecode": "en-us",
                    "countrycode": "ca",
                    "hotel_id": 280911,
                    "helpful_vote_count": 0,
                    "is_incentivised": 0,
                    "no_user_title": 0,
                    "review_hash": "25c33d48154b5906",
                    "stayed_room_info": {
                        "checkout": "2024-08-04",
                        "room_name": "Queen Room with Two Queen Beds",
                        "checkin": "2024-08-02",
                        "num_nights": 2,
                        "room_id": 28091112
                    },
                    "average_score": 4,
                    "pros": "Great stay\nGreat staff\nMade me feel welcomed",
                    "is_moderated": 0,
                    "date": "2024-10-12 21:49:16",
                    "title": "I will tell any one to go stay there",
                    "reviewng": 1,
                    "travel_purpose": "leisure",
                    "author": {
                        "name": "Marie",
                        "helpful_vote_count": 0,
                        "countrycode": "ca",
                        "user_id": 285074897,
                        "type": "review_category_group_of_friends",
                        "type_string": "Group of friends",
                        "nr_reviews": 0
                    },
                    "cons": "Very clean",
                    "review_id": 5093136179
                },
                {
                    "no_user_title": 0,
                    "review_hash": "790a8001cbcfac03",
                    "languagecode": "en-us",
                    "countrycode": "ca",
                    "hotel_id": 280911,
                    "is_incentivised": 0,
                    "helpful_vote_count": 0,
                    "pros": "Quiet.  Super clean.  Friendly staff.  Amazing breakfast.  Cookies at the. Check  in desk!",
                    "is_moderated": 0,
                    "average_score": 4,
                    "stayed_room_info": {
                        "checkin": "2024-10-04",
                        "room_name": "Queen Room with Two Queen Beds",
                        "checkout": "2024-10-07",
                        "num_nights": 3,
                        "room_id": 28091112
                    },
                    "travel_purpose": "leisure",
                    "reviewng": 1,
                    "title": "This is an outstanding hotel!  I felt totally pampered.",
                    "date": "2024-10-08 05:04:55",
                    "review_id": 5091657479,
                    "author": {
                        "type": "solo_traveller",
                        "type_string": "Solo traveller",
                        "nr_reviews": 0,
                        "name": "Truth",
                        "helpful_vote_count": 0,
                        "countrycode": "ca",
                        "user_id": 510920294
                    }
                },
                {
                    "languagecode": "en-us",
                    "countrycode": "ca",
                    "hotel_id": 280911,
                    "is_incentivised": 0,
                    "helpful_vote_count": 0,
                    "no_user_title": 0,
                    "review_hash": "9af5ad7bacf055f7",
                    "stayed_room_info": {
                        "num_nights": 2,
                        "room_id": 28091112,
                        "room_name": "Queen Room with Two Queen Beds",
                        "checkout": "2024-09-29",
                        "checkin": "2024-09-27"
                    },
                    "average_score": 4,
                    "pros": "The kids loved the swimming pool.\nThe front personnel were exceptionally awesome and courteous🤗",
                    "is_moderated": 0,
                    "reviewng": 1,
                    "travel_purpose": "leisure",
                    "date": "2024-09-30 05:06:55",
                    "title": "Absolutely friendly environment and awesome customer service.",
                    "review_id": 5088615575,
                    "author": {
                        "helpful_vote_count": 0,
                        "countrycode": "ca",
                        "user_id": 0,
                        "name": "Angie",
                        "nr_reviews": 0,
                        "type": "family_with_children",
                        "type_string": "Family"
                    },
                    "cons": "No benches to go enjoy some fresh air."
                },
                {
                    "title": "Very good",
                    "date": "2024-09-27 09:16:17",
                    "travel_purpose": "business",
                    "reviewng": 1,
                    "cons": "Swimming Pool was a bit cold",
                    "author": {
                        "nr_reviews": 0,
                        "type": "solo_traveller",
                        "type_string": "Solo traveller",
                        "user_id": 162581851,
                        "helpful_vote_count": 0,
                        "countrycode": "rs",
                        "name": "Frederic"
                    },
                    "review_id": 5087559229,
                    "no_user_title": 1,
                    "review_hash": "75f9e7761e2b98f9",
                    "languagecode": "en-gb",
                    "hotel_id": 280911,
                    "countrycode": "rs",
                    "helpful_vote_count": 0,
                    "is_incentivised": 0,
                    "pros": "Room comfortable",
                    "is_moderated": 0,
                    "average_score": 3.20000004768372,
                    "stayed_room_info": {
                        "room_id": 28091112,
                        "num_nights": 4,
                        "checkin": "2024-09-22",
                        "room_name": "Queen Room with Two Queen Beds",
                        "checkout": "2024-09-26"
                    }
                },
                {
                    "title": "Relaxing vacay",
                    "date": "2024-08-31 06:22:19",
                    "travel_purpose": "leisure",
                    "reviewng": 1,
                    "cons": "Nothing",
                    "author": {
                        "nr_reviews": 0,
                        "type": "review_category_group_of_friends",
                        "type_string": "Group of friends",
                        "user_id": 13104615,
                        "helpful_vote_count": 0,
                        "countrycode": "ca",
                        "name": "Lynette"
                    },
                    "review_id": 5076304717,
                    "review_hash": "d47ba827854e6060",
                    "no_user_title": 0,
                    "hotel_id": 280911,
                    "countrycode": "ca",
                    "helpful_vote_count": 0,
                    "is_incentivised": 0,
                    "languagecode": "en-us",
                    "pros": "Everything.  It was only for one night but we were very happy with the quality an roominess of the rooms.",
                    "is_moderated": 0,
                    "stayed_room_info": {
                        "num_nights": 1,
                        "room_id": 28091112,
                        "room_name": "Queen Room with Two Queen Beds",
                        "checkout": "2024-08-30",
                        "checkin": "2024-08-29"
                    },
                    "average_score": 4
                }
            ],
            "sort_options": [
                {
                    "sort_option_id": "sort_most_relevant",
                    "title": "Most relevant",
                    "sort_option_default": 1
                },
                {
                    "sort_option_id": "sort_recent_desc",
                    "sort_option_default": 0,
                    "title": "Date (newer to older)"
                },
                {
                    "sort_option_id": "proximity_to_hotel_average",
                    "title": "Close to property score",
                    "sort_option_default": 0
                },
                {
                    "sort_option_id": "sort_score_desc",
                    "sort_option_default": 0,
                    "title": "Review score (high to low)"
                },
                {
                    "sort_option_id": "user_country",
                    "sort_option_default": 0,
                    "title": "From your country"
                }
            ]
        }
    }
]

2025-08-25 12:37:32,387 - evaluation_logger_Hotels-27 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [MyBatis 的日志模块](https://github.com/YunaiV/mybatis-3/tree/master/src/main/java/org/apache/ibatis/logging) ，对应 `logging` 包。如下图所示：[![`logging` 包](http://static.iocoder.cn/images/MyBatis/2020_01_31/01.png)](http://static.iocoder.cn/images/MyBatis/2020_01_31/01.png)`logging` 包

在 [《精尽 MyBatis 源码解析 —— 项目结构一览》](http://svip.iocoder.cn/MyBatis/intro) 中，简单介绍了这个模块如下：

> 无论在开发测试环境中，还是在线上生产环境中，日志在整个系统中的地位都是非常重要的。良好的日志功能可以帮助开发人员和测试人员快速定位 Bug 代码，也可以帮助运维人员快速定位性能瓶颈等问题。目前的 Java 世界中存在很多优秀的日志框架，例如 Log4j、 Log4j2、Slf4j 等。
>
> MyBatis 作为一个设计优良的框架，除了提供详细的日志输出信息，还要能够集成多种日志框架，其日志模块的一个主要功能就是**集成第三方日志框架**。

本文涉及的类如下图所示：![类图](http://static.iocoder.cn/images/MyBatis/2020_01_31/02.png)

- 从图的**上面**部分，我们可以看到，MyBatis 直接使用了多种第三方日志框架。但是，这样导致一个问题，使用 MyBatis 的项目，可能会使用多种日志框架，就会导致日志的统一管理非常麻烦。为了解决这个问题，MyBatis 提供了 `Log` 接口，**统一封装了多种日志框架的实现**。这样，使用 MyBatis 的项目，只需要选择想要的日志框架，而不会和 MyBatis 所选择的日志框架产生冲突。
- 从图的**下面**部分，我们可以看到，MyBatis 提供了多种 `Log` 的实现，每个实现对应第三方的日志框架。并且，提供了 `LogFactory` 工厂，可以创建对应的 `Log` 实现。
- 另外，`Jdk14LoggingImpl`、`Log4jImpl` 等等 `Log` 实现，都是使用**适配器模式**，将每个第三方日志框架的**接口**，统一适配到 `Log` 接口上。

下面，我们开始看看 `Log` 等类的代码实现。

# 2. Log 接口

`org.apache.ibatis.logging.Log` ，MyBatis Log 接口。代码如下：

```java
// Log.java

public interface Log {

    boolean isDebugEnabled();

    boolean isTraceEnabled();

    void error(String s, Throwable e);

    void error(String s);

    void debug(String s);

    void trace(String s);

    void warn(String s);

}
```

- 定义了日志的接口。

# 3. LogFactory

`org.apache.ibatis.logging.LogFactory` ，Log 工厂类。代码如下：

```java
// LogFactory.java

public final class LogFactory {

    /**
     * Marker to be used by logging implementations that support markers.
     */
    public static final String MARKER = "MYBATIS";

    /**
     * 使用的 Log 的构造方法
     */
    private static Constructor<? extends Log> logConstructor;

    static {
        // <1> 尝试依次使用各个日志框架
        tryImplementation(LogFactory::useSlf4jLogging);
        tryImplementation(LogFactory::useCommonsLogging);
        tryImplementation(LogFactory::useLog4J2Logging);
        tryImplementation(LogFactory::useLog4JLogging);
        tryImplementation(LogFactory::useJdkLogging);
        tryImplementation(LogFactory::useNoLogging);
    }

    private LogFactory() {
        // disable construction
    }

    public static Log getLog(Class<?> aClass) {
        return getLog(aClass.getName());
    }

    public static Log getLog(String logger) {
        try {
            return logConstructor.newInstance(logger);
        } catch (Throwable t) {
            throw new LogException("Error creating logger for logger " + logger + ".  Cause: " + t, t);
        }
    }

    public static synchronized void useCustomLogging(Class<? extends Log> clazz) {
        setImplementation(clazz);
    }

    public static synchronized void useSlf4jLogging() {
        setImplementation(org.apache.ibatis.logging.slf4j.Slf4jImpl.class);
    }

    public static synchronized void useCommonsLogging() {
        setImplementation(org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl.class);
    }

    public static synchronized void useLog4JLogging() {
        setImplementation(org.apache.ibatis.logging.log4j.Log4jImpl.class);
    }

    public static synchronized void useLog4J2Logging() {
        setImplementation(org.apache.ibatis.logging.log4j2.Log4j2Impl.class);
    }

    public static synchronized void useJdkLogging() {
        setImplementation(org.apache.ibatis.logging.jdk14.Jdk14LoggingImpl.class);
    }

    public static synchronized void useStdOutLogging() {
        setImplementation(org.apache.ibatis.logging.stdout.StdOutImpl.class);
    }

    public static synchronized void useNoLogging() {
        setImplementation(org.apache.ibatis.logging.nologging.NoLoggingImpl.class);
    }

    private static void tryImplementation(Runnable runnable) {
        if (logConstructor == null) {
            try {
                runnable.run();
            } catch (Throwable t) {
                // ignore
            }
        }
    }

    private static void setImplementation(Class<? extends Log> implClass) {
        try {
            // 获得参数为 String 的构造方法
            Constructor<? extends Log> candidate = implClass.getConstructor(String.class);
            // 创建 Log 对象
            Log log = candidate.newInstance(LogFactory.class.getName());
            if (log.isDebugEnabled()) {
                log.debug("Logging initialized using '" + implClass + "' adapter.");
            }
            // 创建成功，意味着可以使用，设置为 logConstructor
            logConstructor = candidate;
        } catch (Throwable t) {
            throw new LogException("Error setting Log implementation.  Cause: " + t, t);
        }
    }

}
```

- `logConstructor` 静态属性，使用的 Log 的构造方法。通过 `#setImplementation(...)` 方法，进行设置。
- `<1>` 处，在类加载时，通过 `#tryImplementation(Runnable runnable)` 方法，尝试依次使用各个日志框架。因为，`#tryImplementation(Runnable runnable)` 方法中，会判断 `logConstructor` 为空时，才会执行。所以，按照 `useSlf4jLogging => useCommonsLogging => useLog4J2Logging => useLog4JLogging => useJdkLogging => useNoLogging` 的顺序，尝试使用对应的日志框架。
- `#setImplementation(Class<? extends Log> implClass)` 方法，创建指定类的 Log 对象，并设置为 `logConstructor` 。并且，在创建成功后，会打印日志，表示使用的日志框架。例如：[![日志](http://static.iocoder.cn/images/MyBatis/2020_01_31/03.png)](http://static.iocoder.cn/images/MyBatis/2020_01_31/03.png)日志
- 其它方法，比较简单，胖友自己看。

# 4. Log 实现类

在 `logging` 包下，MyBatis 提供了多种 Log 的实现类。如下图所示：[![Log 的实现类](http://static.iocoder.cn/images/MyBatis/2020_01_31/04.png)](http://static.iocoder.cn/images/MyBatis/2020_01_31/04.png)Log 的实现类

- 每个实现类，对应一个第三方的日志框架。以 `Slf4jImpl` 举例子，代码如下：

  ```java
  // Slf4jImpl.java
  
  public class Slf4jImpl implements Log {
  
      private Log log;
  
      public Slf4jImpl(String clazz) {
          // 使用 SLF4J 的 LoggerFactory 创建 org.slf4j.Logger 对象
          Logger logger = LoggerFactory.getLogger(clazz);
  
          // 如果使用 log4j 的实现
          if (logger instanceof LocationAwareLogger) {
              try {
                  // check for slf4j >= 1.6 method signature
                  logger.getClass().getMethod("log", Marker.class, String.class, int.class, String.class, Object[].class, Throwable.class);
                  log = new Slf4jLocationAwareLoggerImpl((LocationAwareLogger) logger);
                  return;
              } catch (SecurityException | NoSuchMethodException e) {
                  // fail-back to Slf4jLoggerImpl
              }
          }
  
          // Logger is not LocationAwareLogger or slf4j version < 1.6
          log = new Slf4jLoggerImpl(logger);
      }
  
      @Override
      public boolean isDebugEnabled() {
          return log.isDebugEnabled();
      }
  
      @Override
      public boolean isTraceEnabled() {
          return log.isTraceEnabled();
      }
  
      @Override
      public void error(String s, Throwable e) {
          log.error(s, e);
      }
  
      @Override
      public void error(String s) {
          log.error(s);
      }
  
      @Override
      public void debug(String s) {
          log.debug(s);
      }
  
      @Override
      public void trace(String s) {
          log.trace(s);
      }
  
      @Override
      public void warn(String s) {
          log.warn(s);
      }
  
  }
  ```

  - 在构造方法中，使用 SLF4J 的 `LoggerFactory` 创建 `org.slf4j.Logger` 对象。然后，根据情况，创建 `Slf4jLocationAwareLoggerImpl` 或 `Slf4jLoggerImpl` 对象。
  - 而在 `Slf4jLocationAwareLoggerImpl` 和 `Slf4jLoggerImpl` 中，会调用 `org.slf4j.Logger` 的对应的方法。代码如下：

  ```java
  // Slf4jLocationAwareLoggerImpl.java
  
  class Slf4jLocationAwareLoggerImpl implements Log {
  
      // 省略部分代码
  
      @Override
      public void debug(String s) {
          logger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, s, null, null);
      }
  
      // 省略部分代码
      
  }
  
  // Slf4jLoggerImpl.java
  
  class Slf4jLoggerImpl implements Log {
  
      // 省略部分代码
  
      @Override
      public void debug(String s) {
          logger.debug(s);
      }
  
      // 省略部分代码
      
  }
  ```

  - 如此，`Slf4jImpl` 就将 SLF4J 的 Logger 适配到了 MyBatis 的 Log 接口上。

- 其它 Log 实现类，也是类似的思路。感兴趣的胖友，可以自己看看。

# 5. 使用示例

我们来看一个 BaseExecutor 使用 Log 的示例。代码如下：

```java
// BaseExecutor.java

public abstract class BaseExecutor implements Executor {

    private static final Log log = LogFactory.getLog(BaseExecutor.class);

    // ... 省略无关代码

    @Override
    public int update(MappedStatement ms, Object parameter) throws SQLException {
        ErrorContext.instance().resource(ms.getResource()).activity("executing an update").object(ms.getId());
        if (closed) {
            throw new ExecutorException("Executor is closed.");
        }
        // 清空本地缓存
        clearLocalCache();
        // 执行 update
        return doUpdate(ms, parameter);
    }

    // ... 省略无关代码

    protected abstract int doUpdate(MappedStatement ms, Object parameter) throws SQLException;

}
```

- 通过 `LogFactory#getLog(Class<?> aClass)` 方法，创建 Log 对象。

# 666. 彩蛋

比较简单的一篇文章，主要目的是对 MyBatis 日志模块有一个整体的了解。

参考和推荐如下文章：

- 徐郡明 [《MyBatis 技术内幕》](https://item.jd.com/12125531.html) 的 [「2.1 日志模块」](http://svip.iocoder.cn/MyBatis/logging-package/#) 小节

2025-08-25 12:37:37,656 - evaluation_logger_Hotels-27 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about user reviews for the Best Western Blairmore hotel in Saskatoon.'}
2025-08-25 12:37:43,304 - evaluation_logger_Hotels-27 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:37:43,304 - evaluation_logger_Hotels-27 - INFO - Message: Success.
2025-08-25 12:37:43,304 - evaluation_logger_Hotels-27 - INFO - Success turn num = 3
2025-08-25 12:37:43,304 - evaluation_logger_Hotels-27 - INFO - ----------------------------------------------------------------------------------------------------
