2025-08-25 11:55:28,167 - evaluation_logger_Cross-175 - INFO - Test Example Cross-175
2025-08-25 11:55:28,167 - evaluation_logger_Cross-175 - INFO - Query: Aden is going to stay at HOTEL NOIR Kagoshima Chuo Station in Kagoshima (hotel_id is 11259864). Could you recommend some attractions near the hotel and provide detailed descriptions of the attractions?
2025-08-25 11:55:36,434 - evaluation_logger_Cross-175 - INFO - Function Calls: 
[
    {
        "name": "Get_Popular_Attraction_Near_By",
        "arguments": {
            "hotel_id": "11259864"
        }
    }
]

2025-08-25 11:55:36,434 - evaluation_logger_Cross-175 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Popular_Attraction_Near_By",
        "arguments": {
            "hotel_id": "11259864"
        }
    }
]

2025-08-25 11:55:36,434 - evaluation_logger_Cross-175 - INFO - Start compare_single_call: 
{'name': 'Get_Popular_Attraction_Near_By', 'arguments': {'hotel_id': '11259864'}}
{'name': 'Get_Popular_Attraction_Near_By', 'arguments': {'hotel_id': '11259864'}}
2025-08-25 11:55:36,434 - evaluation_logger_Cross-175 - INFO - Rule-based compare success.
2025-08-25 11:55:36,434 - evaluation_logger_Cross-175 - INFO - Success matched: [{'name': 'Get_Popular_Attraction_Near_By', 'arguments': {'hotel_id': '11259864'}}]
2025-08-25 11:55:36,434 - evaluation_logger_Cross-175 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "closest_landmarks": [
                {
                    "tag": "Kagoshima City Museum of Art",
                    "average_out_of_10": 8.1,
                    "distance": 1.2009503933353,
                    "longitude": 130.55332,
                    "total_votes": 84,
                    "latitude": 31.595786
                }
            ]
        }
    }
]

2025-08-25 11:55:44,628 - evaluation_logger_Cross-175 - INFO - Function Calls: 
[
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Kagoshima City Museum of Art"
        }
    }
]

2025-08-25 11:55:44,628 - evaluation_logger_Cross-175 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Kagoshima City Museum of Art"
        }
    },
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "prbfuwoy3xfv-character-obento-workshop-in-kagoshima"
        }
    }
]

2025-08-25 11:55:44,628 - evaluation_logger_Cross-175 - INFO - Start compare_single_call: 
{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Kagoshima City Museum of Art'}}
{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Kagoshima City Museum of Art'}}
2025-08-25 11:55:44,628 - evaluation_logger_Cross-175 - INFO - Rule-based compare success.
2025-08-25 11:55:44,628 - evaluation_logger_Cross-175 - INFO - Success matched: [{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Kagoshima City Museum of Art'}}]
2025-08-25 11:55:44,628 - evaluation_logger_Cross-175 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "products": [
                {
                    "id": "eyJwaW5uZWRQcm9kdWN0IjoiUFJiRnVXb3kzWGZWIiwidWZpIjotMjMxNTU0fQ==",
                    "__typename": "AttractionsSearchProductSuggestion",
                    "title": "Character Obento Workshop in Kagoshima",
                    "productId": "PRbFuWoy3XfV",
                    "productSlug": "prbfuwoy3xfv-character-obento-workshop-in-kagoshima",
                    "taxonomySlug": "activities",
                    "cityUfi": -231554,
                    "cityName": "Kagoshima",
                    "countryCode": "jp"
                }
            ]
        }
    }
]

2025-08-25 11:55:57,901 - evaluation_logger_Cross-175 - INFO - Function Calls: 
[
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "prbfuwoy3xfv-character-obento-workshop-in-kagoshima"
        }
    }
]

2025-08-25 11:55:57,901 - evaluation_logger_Cross-175 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "prbfuwoy3xfv-character-obento-workshop-in-kagoshima"
        }
    }
]

2025-08-25 11:55:57,901 - evaluation_logger_Cross-175 - INFO - Start compare_single_call: 
{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'prbfuwoy3xfv-character-obento-workshop-in-kagoshima'}}
{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'prbfuwoy3xfv-character-obento-workshop-in-kagoshima'}}
2025-08-25 11:55:57,901 - evaluation_logger_Cross-175 - INFO - Rule-based compare success.
2025-08-25 11:55:57,901 - evaluation_logger_Cross-175 - INFO - Success matched: [{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'prbfuwoy3xfv-character-obento-workshop-in-kagoshima'}}]
2025-08-25 11:55:57,901 - evaluation_logger_Cross-175 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "__typename": "AttractionsProduct",
            "additionalInfo": "Wheelchair accessible\n\nInfants and small children can ride in a pram or stroller\n\nPublic transportation options are available nearby\n\nInfants are required to sit on an adult’s lap\n\nTransportation options are wheelchair accessible\n\nAll areas and surfaces are wheelchair accessible\n\nPlease bring your ticket with you to the attraction.\n\nBe aware that operators may cancel for unforeseen reasons.\n\nYou need to be 18 years or older to book or be accompanied by an adult. ",
            "applicableTerms": [
                {
                    "__typename": "TermsConditions",
                    "policyProvider": "Booking.com"
                },
                {
                    "__typename": "TermsConditions",
                    "policyProvider": "Viator"
                }
            ],
            "cancellationPolicy": {
                "__typename": "AttractionsCancellationPolicy",
                "hasFreeCancellation": true
            },
            "description": "With the help of your native host, you will get hands-on training from a professional chef. You'll learn how to cut and make food into animal shapes. Also, you'll learn the correct colors needed to make an eye appealing obento. When the obento is finished you can take pictures for your SNS. You can eat the obento in the restaurant or take it with you to eat later.",
            "id": "PRbFuWoy3XfV",
            "isBookable": true,
            "labels": [
                {
                    "__typename": "AttractionsLabel",
                    "text": "Free cancellation",
                    "type": "free_cancellation"
                }
            ],
            "name": "Character Obento Workshop in Kagoshima",
            "notIncluded": [
                "Bottled water",
                "Coffee and/or Tea",
                "Alcoholic Beverages"
            ],
            "offers": [
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFdSIxAIgw0l"
                }
            ],
            "onSiteRequirements": {
                "__typename": "OnSiteRequirements"
            },
            "operatedBy": "Melinda Kawahara Chief Tour Coordinator for Kagoshima Adventure Tours @thejapandiscovery",
            "representativePrice": {
                "__typename": "AttractionsPrice",
                "chargeAmount": 61.71,
                "currency": "USD",
                "publicAmount": 61.71
            },
            "reviews": {
                "__typename": "AttractionsGetReviewsResponse",
                "total": 0
            },
            "slug": "prbfuwoy3xfv-character-obento-workshop-in-kagoshima",
            "supportedFeatures": {
                "__typename": "AttractionsProductSupportedFeatures",
                "nativeApp": true,
                "nativeAppBookProcess": true,
                "liveAvailabilityCheckSupported": true
            },
            "ufiDetails": {
                "__typename": "AttractionLocationResponse",
                "ufi": -231554,
                "bCityName": "Kagoshima"
            },
            "whatsIncluded": [
                "Lunch"
            ]
        }
    }
]

2025-08-25 11:57:26,648 - evaluation_logger_Cross-175 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 前言

在上一篇文章中，我们实现了`axios`的请求和响应配置化，即用户可以配置`url`、`method`、`params`、`data`、`headers`、`timeout`、`responseType`等等。但是在实际使用中，我们使用`axios`发送请求的时候，只需要`axios({...})`即可，并没有显示的去调用`request`函数，那么`axios`函数是怎么来的呢？另外，我们不仅可以使用`axios({...})`这种方式发送请求，还可以使用`axios.get()`、`axios.post()`等方式，那么这些方式又是如何来的呢？

接下来，我们就为我们的`axios`库添加这些功能。

# 2. 混合对象实现

## 2.1 接口类型定义

根据需求，我们的`axios`既是一个函数，又是一个对象，并且这个对象上有`get`、`post`等方法，那么我们可以先为`axios`这个混合对象定义接口类型。

我们在`src/types/index.ts`中为`axios`混合对象定义接口类型，如下：

```typescript
export interface Axios {
  request(config: AxiosRequestConfig): AxiosPromise;

  get(url: string, config?: AxiosRequestConfig): AxiosPromise;

  delete(url: string, config?: AxiosRequestConfig): AxiosPromise;

  head(url: string, config?: AxiosRequestConfig): AxiosPromise;

  options(url: string, config?: AxiosRequestConfig): AxiosPromise;

  post(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;

  put(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;

  patch(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;
}

export interface AxiosInstance extends Axios {
  (config: AxiosRequestConfig): AxiosPromise;
}
```

我们首先定义了一个`Axios`接口类型，它描述了`axios`对象上的方法，然后又定义了`AxiosInstance`接口继承`Axios`，并且它本身是一个函数类型，这样`AxiosInstance`就是一个混合类型。

## 2.2 创建 axios 混合对象

根据上面定义的接口类型，我们接下来要去实现它。我们创建一个`axios`混合对象，它既可以当作函数使用，又可以当作对象使用。

我们在`src/core/Axios.ts`中实现：

```typescript
import { AxiosRequestConfig, AxiosPromise, Method } from "../types";
import dispatchRequest from "./dispatchRequest";

export default class Axios {
  request(config: AxiosRequestConfig): AxiosPromise {
    return dispatchRequest(config);
  }

  get(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("get", url, config);
  }

  delete(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("delete", url, config);
  }

  head(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("head", url, config);
  }

  options(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("options", url, config);
  }

  post(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithData("post", url, data, config);
  }

  put(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithData("put", url, data, config);
  }

  patch(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithData("patch", url, data, config);
  }

  _requestMethodWithoutData(method: Method, url: string, config?: AxiosRequestConfig) {
    return this.request(
      Object.assign(config || {}, {
        method,
        url
      })
    );
  }

  _requestMethodWithData(method: Method, url: string, data?: any, config?: AxiosRequestConfig) {
    return this.request(
      Object.assign(config || {}, {
        method,
        url,
        data
      })
    );
  }
}
```

我们创建了一个`Axios`类，来实现接口定义的公共方法。首先我们实现`request`方法，内部调用了我们之前写的`dispatchRequest`方法。另外，我们还实现`get`、`delete`、`head`、`options`、`post`、`put`、`patch`这些方法，这些方法内部都是通过调用`request`方法实现发送请求的，只不过在调用之前会把对应的`method`、`url`，以及`data`(如果有的话)合并到`config`中。

## 2.3 创建 axios 函数

我们虽然实现了`Axios`类，但是离目标还差一点，我们的目标是让`axios`本身是一个函数，再在这个函数上扩展方法。所以接下来我们创建一个`axios`函数，并让这个函数指向`Axios`类的`request`方法，然后再把`Axios`类的原型属性和实例属性全部拷贝到`axios`函数上。

我们在`src/index.ts`中实现：

```typescript
import { AxiosInstance } from "./types";
import Axios from "./core/Axios";
import { extend } from "./helpers/util";

function createInstance(): AxiosInstance {
  const context = new Axios();
  const instance = Axios.prototype.request.bind(context);

  extend(instance, context);

  return instance as AxiosInstance;
}

const axios = createInstance();

export default axios;
```

首先，我们定义一个`createInstance`工厂函数，内部首先实例化了`Axios`类，接着创建了一个`instance`变量指向`Axios.prototype.request`方法，并绑定了上下文`context`；接着通过`extend`方法把`context`中的原型方法和实例方法全部拷贝到`instance`上，这样就实现了一个混合对象：`instance`本身是一个函数，又拥有了`Axios`类的所有原型和实例属性，最终把这个`instance`返回。由于这里`TypeScript`不能正确推断`instance`的类型，我们把它断言成`AxiosInstance`类型。

# 3. 编写 demo

```javascript
import axios from "../../src/index";

axios({
  url: "/api/base/get",
  method: "get",
  params: {
    a: 1,
    b: 2
  }
});

axios
  .get("/api/base/get", {
    params: {
      a: 1,
      b: 2
    }
  })
  .then(res => {
    console.log(res);
  });

axios
  .post("/api/base/post", {
    a: 1,
    b: 2
  })
  .then(res => {
    console.log(res);
  });
```

我们通过三种方式调用`axios`发送请求，在浏览器中运行`demo`，打开`network`，发现三个请求都成功发出，并且`axios.get`和`axios.post`都分别正确的使用了`get`和`post`方法，并且`axios.post`还正确的传入了`data`数据。

![](~@/axios/05/01.png)

OK，以上就是为`axios`添加混合对象实现。


2025-08-25 11:57:32,103 - evaluation_logger_Cross-175 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about attractions near the hotel in Kagoshima.'}
2025-08-25 11:57:38,646 - evaluation_logger_Cross-175 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 11:57:38,646 - evaluation_logger_Cross-175 - INFO - Message: Success.
2025-08-25 11:57:38,646 - evaluation_logger_Cross-175 - INFO - Success turn num = 3
2025-08-25 11:57:38,646 - evaluation_logger_Cross-175 - INFO - ----------------------------------------------------------------------------------------------------
