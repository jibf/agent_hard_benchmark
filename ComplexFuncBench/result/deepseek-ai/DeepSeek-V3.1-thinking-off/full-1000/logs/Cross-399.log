2025-08-25 12:30:40,852 - evaluation_logger_Cross-399 - INFO - Test Example Cross-399
2025-08-25 12:30:40,852 - evaluation_logger_Cross-399 - INFO - Query: It's 7 o'clock in the morning on November 30, 2024. I just had breakfast at the InterContinental the Willard Washington D.C. All local flights in Washington D.C. have been canceled due to heavy rain. I need to catch a taxi to an airport in a nearby city to fly to Dallas right away. Could you find a taxi for me and check the corresponding flight information?
2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Function Calls: 
[
    {
        "name": "Location_to_Lat_Long",
        "arguments": {
            "query": "InterContinental the Willard Washington D.C."
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "InterContinental the Willard Washington D.C."
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Dallas"
        }
    }
]

2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Golden Function Call: 
[
    {
        "name": "Location_to_Lat_Long",
        "arguments": {
            "query": "InterContinental the Willard Washington D.C."
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "InterContinental the Willard Washington D.C."
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Dallas"
        }
    },
    {
        "name": "Get_Nearby_Cities",
        "arguments": {
            "latitude": "38.8968125",
            "longitude": "-77.0322812"
        }
    }
]

2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Start compare_single_call: 
{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'InterContinental the Willard Washington D.C.'}}
{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'InterContinental the Willard Washington D.C.'}}
2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Rule-based compare success.
2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'InterContinental the Willard Washington D.C.'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'InterContinental the Willard Washington D.C.'}}
2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Rule-based compare success.
2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Dallas'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Dallas'}}
2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Rule-based compare success.
2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Success matched: [{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'InterContinental the Willard Washington D.C.'}}, {'name': 'Taxi_Search_Location', 'arguments': {'query': 'InterContinental the Willard Washington D.C.'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Dallas'}}]
2025-08-25 12:30:51,222 - evaluation_logger_Cross-399 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "business_status": "OPERATIONAL",
                "formatted_address": "1401 Pennsylvania Avenue NW, Washington, DC 20004, United States",
                "geometry": {
                    "location": {
                        "lat": 38.8968125,
                        "lng": -77.0322812
                    },
                    "viewport": {
                        "northeast": {
                            "lat": 38.89789247989272,
                            "lng": -77.03108077010728
                        },
                        "southwest": {
                            "lat": 38.89519282010727,
                            "lng": -77.03378042989273
                        }
                    }
                },
                "name": "InterContinental the Willard Washington D.C., an IHG Hotel",
                "place_id": "ChIJadN45Ze3t4kRWCQ-wotG1Ss",
                "plus_code": {
                    "compound_code": "VXW9+P3 Washington, District of Columbia",
                    "global_code": "87C4VXW9+P3"
                },
                "rating": 4.6,
                "reference": "ChIJadN45Ze3t4kRWCQ-wotG1Ss",
                "types": [
                    "lodging",
                    "point_of_interest",
                    "establishment"
                ],
                "user_ratings_total": 3313
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "latitude": 38.8968125,
                "countryCode": "us",
                "description": "1401 Pennsylvania Avenue NW, Washington, DC 20004, USA",
                "longitude": -77.0322812,
                "country": "United States",
                "name": "InterContinental the Willard Washington D.C., an IHG Hotel",
                "googlePlaceId": "ChIJadN45Ze3t4kRWCQ-wotG1Ss",
                "types": "establishment",
                "city": "Washington"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "DFW.AIRPORT",
                "type": "AIRPORT",
                "name": "Dallas-Fort Worth International Airport",
                "code": "DFW",
                "city": "DFW",
                "cityName": "Dallas",
                "regionName": "Texas",
                "country": "US",
                "countryName": "United States",
                "countryNameShort": "US",
                "distanceToCity": {
                    "value": 25.903681159530844,
                    "unit": "km"
                },
                "parent": "DFW"
            }
        ]
    }
]

2025-08-25 12:31:03,323 - evaluation_logger_Cross-399 - INFO - Function Calls: 
[
    {
        "name": "Get_Nearby_Cities",
        "arguments": {
            "latitude": "38.8968125",
            "longitude": "-77.0322812"
        }
    }
]

2025-08-25 12:31:03,323 - evaluation_logger_Cross-399 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Nearby_Cities",
        "arguments": {
            "latitude": "38.8968125",
            "longitude": "-77.0322812"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Baltimore"
        }
    }
]

2025-08-25 12:31:03,323 - evaluation_logger_Cross-399 - INFO - Start compare_single_call: 
{'name': 'Get_Nearby_Cities', 'arguments': {'latitude': '38.8968125', 'longitude': '-77.0322812'}}
{'name': 'Get_Nearby_Cities', 'arguments': {'latitude': '38.8968125', 'longitude': '-77.0322812'}}
2025-08-25 12:31:03,323 - evaluation_logger_Cross-399 - INFO - Rule-based compare success.
2025-08-25 12:31:03,323 - evaluation_logger_Cross-399 - INFO - Success matched: [{'name': 'Get_Nearby_Cities', 'arguments': {'latitude': '38.8968125', 'longitude': '-77.0322812'}}]
2025-08-25 12:31:03,324 - evaluation_logger_Cross-399 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "dest_id": 20053799,
                "longitude": -76.6125030517578,
                "country": "United States",
                "nr_hotels": 144,
                "cc1": "us",
                "region": "Maryland",
                "latitude": 39.2902984619141,
                "dest_type": "city",
                "name": "Baltimore"
            }
        ]
    }
]

2025-08-25 12:31:10,764 - evaluation_logger_Cross-399 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Baltimore"
        }
    }
]

2025-08-25 12:31:10,764 - evaluation_logger_Cross-399 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Baltimore"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Baltimore - Washington International Airport"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "BWI.AIRPORT",
            "toId": "DFW.AIRPORT",
            "departDate": "2024-11-30"
        }
    }
]

2025-08-25 12:31:10,764 - evaluation_logger_Cross-399 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Baltimore'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Baltimore'}}
2025-08-25 12:31:10,764 - evaluation_logger_Cross-399 - INFO - Rule-based compare success.
2025-08-25 12:31:10,764 - evaluation_logger_Cross-399 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Baltimore'}}]
2025-08-25 12:31:10,764 - evaluation_logger_Cross-399 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "BWI.AIRPORT",
                "type": "AIRPORT",
                "name": "Baltimore - Washington International Airport",
                "code": "BWI",
                "city": "BWI",
                "cityName": "Baltimore",
                "region": "MD",
                "regionName": "Maryland",
                "country": "US",
                "countryName": "United States",
                "countryNameShort": "US",
                "distanceToCity": {
                    "value": 13.315841171478306,
                    "unit": "km"
                },
                "parent": "BWI"
            }
        ]
    }
]

2025-08-25 12:31:22,219 - evaluation_logger_Cross-399 - INFO - Function Calls: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Baltimore - Washington International Airport"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "BWI.AIRPORT",
            "toId": "DFW.AIRPORT",
            "departDate": "2024-11-30"
        }
    }
]

2025-08-25 12:31:22,219 - evaluation_logger_Cross-399 - INFO - Golden Function Call: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Baltimore - Washington International Airport"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "departDate": "2024-11-30",
            "fromId": "BWI.AIRPORT",
            "toId": "DFW.AIRPORT"
        }
    },
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJadN45Ze3t4kRWCQ-wotG1Ss",
            "drop_off_place_id": "ChIJC-DCu_zit4kRQBeX-gwVAAA",
            "pick_up_date": "2024-11-30",
            "pick_up_time": "07:00"
        }
    }
]

2025-08-25 12:31:22,219 - evaluation_logger_Cross-399 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Baltimore - Washington International Airport'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Baltimore - Washington International Airport'}}
2025-08-25 12:31:22,220 - evaluation_logger_Cross-399 - INFO - Rule-based compare success.
2025-08-25 12:31:22,220 - evaluation_logger_Cross-399 - INFO - Start compare_single_call: 
{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-30', 'fromId': 'BWI.AIRPORT', 'toId': 'DFW.AIRPORT'}}
{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-30', 'fromId': 'BWI.AIRPORT', 'toId': 'DFW.AIRPORT'}}
2025-08-25 12:31:22,220 - evaluation_logger_Cross-399 - INFO - Rule-based compare success.
2025-08-25 12:31:22,220 - evaluation_logger_Cross-399 - INFO - Success matched: [{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Baltimore - Washington International Airport'}}, {'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-30', 'fromId': 'BWI.AIRPORT', 'toId': 'DFW.AIRPORT'}}]
2025-08-25 12:31:22,221 - evaluation_logger_Cross-399 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "longitude": -76.6702,
                "name": "Baltimore - Washington International Airport",
                "googlePlaceId": "ChIJC-DCu_zit4kRQBeX-gwVAAA",
                "types": "airport",
                "countryCode": "us",
                "country": "United States",
                "city": "Baltimore",
                "iata": "BWI",
                "latitude": 39.1792
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": {
            "flightOffers": [
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QbW-DIBSFf033TQTRWZaQRduuaRZkm33zE1FKre02FmGr9deP1oabc55zLwHCwdof8-T7-8-mPljj_RpQa6vr0iog9Ze_b51UWp-a79ovm9ZPN4vpywbDjK995HtuyafiWXXWM62kD02lQEk9QsiARtK3ZHznlj6CcJ6mccSzW0tqS0MQYRxztt5u0dBs6bxI-Xw4YUfZ1Jw5tIz3C8wvKF8dDWI9w0uINqueQd7PUDbThi1XMG-6IkMzx-v3LD932TpB_AJhnp8t6xPDJs7zbvtRj_DU1e0KJSVFAIQxGR6gS0Pj8Z2lpQgOuLM0Z1GO-BDdICYkuoWOIozH0YNRn0raRn-_qgvNXgMYE8_9lf4LQq8YBZPK6F2nHIxw4qoW0OnhpqWYjJ1VgqTO5GA7EZBKKUdKBBhe9-1F6LQRCEBwzUex2DjrBbE_8nT8B6HznovRAQAA",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "BWI",
                                "name": "Baltimore - Washington International Airport",
                                "city": "BWI",
                                "cityName": "Baltimore",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Maryland",
                                "provinceCode": "MD"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "DFW",
                                "name": "Dallas-Fort Worth International Airport",
                                "city": "DFW",
                                "cityName": "Dallas",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Texas",
                                "provinceCode": "TX"
                            },
                            "departureTime": "2024-11-30T07:20:00",
                            "arrivalTime": "2024-11-30T09:53:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-30T07:20:00",
                                    "arrivalTime": "2024-11-30T09:53:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "BWI",
                                        "name": "Baltimore - Washington International Airport",
                                        "city": "BWI",
                                        "cityName": "Baltimore",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Maryland",
                                        "provinceCode": "MD"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "DFW",
                                        "name": "Dallas-Fort Worth International Airport",
                                        "city": "DFW",
                                        "cityName": "Dallas",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Texas",
                                        "provinceCode": "TX"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 2079,
                                        "carrierInfo": {
                                            "operatingCarrier": "NK",
                                            "marketingCarrier": "NK"
                                        }
                                    },
                                    "carriers": [
                                        "NK",
                                        "NK"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Spirit Airlines",
                                            "code": "NK"
                                        },
                                        {
                                            "name": "Spirit Airlines",
                                            "code": "NK"
                                        }
                                    ],
                                    "totalTime": 12780,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "32N"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "paid",
                                            "type": "snack"
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 12780,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QW4-CMBCFf42-UagFEZNm4z1m07IGxctLA7Ugu641tC7Ir98KppNzvplJm5NetL6rsW1n1yK_aGU9FMillnmiBeDy185KI6mUP8Utt5OitKf79Xy5Rw4NYxvaljl8fPwQtbZUyXG_SAVIsBUEQYeKY_imEg-Bu5pOfS-k7YhLjV3gIeSHJD58nbphiVfk5B02bXfGZK6qsJn4dKsGdK4gaQjaOnC_a8gzbBaQLqQi250TFfWRxi-ONzSqahpPYPh0nCiqNGkmisyMR_WOVj00N9U-L7iJB4DrB11Imah3XMk1hk6HZ40j4kUw7FqzGCF_1DY1hgiNvL4SV8F1IW-f4omXgYsC3zJ_JP8GrrXoDWZp-mjcu4EempjKmWP00mrCjktjKQumxnhnZzZIsiE3JBgU_shAxlyjBYPAAa9732y9N9awNK2yrPgH05kmbMkBAAA.",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "BWI",
                                "name": "Baltimore - Washington International Airport",
                                "city": "BWI",
                                "cityName": "Baltimore",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Maryland",
                                "provinceCode": "MD"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "DFW",
                                "name": "Dallas-Fort Worth International Airport",
                                "city": "DFW",
                                "cityName": "Dallas",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Texas",
                                "provinceCode": "TX"
                            },
                            "departureTime": "2024-11-30T20:39:00",
                            "arrivalTime": "2024-11-30T23:10:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-30T20:39:00",
                                    "arrivalTime": "2024-11-30T23:10:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "BWI",
                                        "name": "Baltimore - Washington International Airport",
                                        "city": "BWI",
                                        "cityName": "Baltimore",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Maryland",
                                        "provinceCode": "MD"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "DFW",
                                        "name": "Dallas-Fort Worth International Airport",
                                        "city": "DFW",
                                        "cityName": "Dallas",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Texas",
                                        "provinceCode": "TX"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 4397,
                                        "planeType": "32N",
                                        "carrierInfo": {
                                            "operatingCarrier": "F9",
                                            "marketingCarrier": "F9"
                                        }
                                    },
                                    "carriers": [
                                        "F9",
                                        "F9"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Frontier Airlines",
                                            "code": "F9"
                                        },
                                        {
                                            "name": "Frontier Airlines",
                                            "code": "F9"
                                        }
                                    ],
                                    "totalTime": 12660,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "32N"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "paid",
                                            "type": "snack"
                                        }
                                    ],
                                    "arrivalTerminal": "E"
                                }
                            ],
                            "totalTime": 12660,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QbW_CIBSFf41-K4XSWjEhi51uMRswg6-fSMVaO91YCpu1v36sXe7NOc-5yQ3hnp37spMwPF2r8uxs8G1BaZwpc1cAbT7CU-3lYMyl-izDvKrDbLuYPW0x5GITojDwpSf7h6Jxga01HVaHAuQ0IIT0aDV9m47_uaYjED9nWZoI3o20cTQGCcapYJvdLuqHNX3eLV551qUjZTN7E9Ax0S6wuCO5freItQyvINquWwZFO0d8bixbraGsmj1Hc8-bJZe3hm-mSNwhlPLmWDu17NG7bJbyNsAz390ThdYUARCnBHXZ5Jam43_WjiLY49FRyRKJRB8djWIY939rKMJ4nAxtcS20q8znS3Gn_AURnAT-VuYnioP9IHo8OPw9yj0M8NR3qaDXc6e5WnJvB0Uyb7q3o8IkgiNPhUIkyT2cVOy1UghA8Lf3rhZbb60aXXRM0l-THCEt0QEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "BWI",
                                "name": "Baltimore - Washington International Airport",
                                "city": "BWI",
                                "cityName": "Baltimore",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Maryland",
                                "provinceCode": "MD"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "DFW",
                                "name": "Dallas-Fort Worth International Airport",
                                "city": "DFW",
                                "cityName": "Dallas",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Texas",
                                "provinceCode": "TX"
                            },
                            "departureTime": "2024-11-30T15:59:00",
                            "arrivalTime": "2024-11-30T18:30:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-30T15:59:00",
                                    "arrivalTime": "2024-11-30T18:30:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "BWI",
                                        "name": "Baltimore - Washington International Airport",
                                        "city": "BWI",
                                        "cityName": "Baltimore",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Maryland",
                                        "provinceCode": "MD"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "DFW",
                                        "name": "Dallas-Fort Worth International Airport",
                                        "city": "DFW",
                                        "cityName": "Dallas",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Texas",
                                        "provinceCode": "TX"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 1935,
                                        "carrierInfo": {
                                            "operatingCarrier": "NK",
                                            "marketingCarrier": "NK"
                                        }
                                    },
                                    "carriers": [
                                        "NK",
                                        "NK"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Spirit Airlines",
                                            "code": "NK"
                                        },
                                        {
                                            "name": "Spirit Airlines",
                                            "code": "NK"
                                        }
                                    ],
                                    "totalTime": 12660,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "32N"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "paid",
                                            "type": "snack"
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 12660,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d7699_H4sIAAAAAAAA_y2Q3Y6CMBCFn0bvKNSCiEmz4Wc1RBANirI3BAoC6lpD64o8_VYwnZzznZmmmbTi_M7msny61mXFmfRgoKSclikvAKG_8qkRklF6qW-lnNaNbB1cZ3FAyjqIZChL4pB5_FW0XGINweM6K0CKJcMwBmQEb8zZhxs8BerSsnQtWPctQjlWgYaQHvjR8bgamg1euuHW9vqUY99hz6CLtkHnoqCLlaDbd36Xb3bRz87vYt3fxW34erbr82Ll2TDcn9nTs5XWc75HyOkfKQjBEABVN2CfacqwPvsw4RgqA-Ych74WwmCIHCNdVYftWwwRmmljVlwLwmt6WxUvbJpQVZAkfoP-TVTJG03sbDq7k4uAETJFlYkitOo1TUwkLEsMSxgZLE-0bJq_x0V_6ZSoQusEAgW88zlxD8K6BL6qS_4o_wGn-1S3sQEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "BWI",
                                "name": "Baltimore - Washington International Airport",
                                "city": "BWI",
                                "cityName": "Baltimore",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Maryland",
                                "provinceCode": "MD"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "DFW",
                                "name": "Dallas-Fort Worth International Airport",
                                "city": "DFW",
                                "cityName": "Dallas",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Texas",
                                "provinceCode": "TX"
                            },
                            "departureTime": "2024-11-30T06:03:00",
                            "arrivalTime": "2024-11-30T08:53:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-30T06:03:00",
                                    "arrivalTime": "2024-11-30T08:53:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "BWI",
                                        "name": "Baltimore - Washington International Airport",
                                        "city": "BWI",
                                        "cityName": "Baltimore",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Maryland",
                                        "provinceCode": "MD"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "DFW",
                                        "name": "Dallas-Fort Worth International Airport",
                                        "city": "DFW",
                                        "cityName": "Dallas",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Texas",
                                        "provinceCode": "TX"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 1403,
                                        "carrierInfo": {
                                            "operatingCarrier": "AA",
                                            "marketingCarrier": "AA"
                                        }
                                    },
                                    "carriers": [
                                        "AA",
                                        "AA"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "American Airlines",
                                            "code": "AA"
                                        },
                                        {
                                            "name": "American Airlines",
                                            "code": "AA"
                                        }
                                    ],
                                    "totalTime": 13800,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "737"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "free",
                                            "type": "snack"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 13800,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_0WQbW_CIBRGf41-Ky1SxZqQxYpzRks3ra1-IpW-2OmGKWxqf_3QmiyQe85zww2Bg9ZnNbLt4lSVB62sHwVKqWWZ6hwI-WUXtSl7KY_Vd2mnVW37yZy-JshhYWxD2zJLjHYv-VVbqhakW-1zkBLL87xWlSDv4-HTazIA7sz3cT9kj5aQmrigjxAOg3i7fWubNZnF_jrGj5SRYHK5hM1YBVQvI6purFF6c5pjFgUNczwWnwypurJotVjSKWRTqRKare6-oRsVRPEHi5Rm06NaRsFlSceGUxVFxw6ij0tyIQgEwMUefGSZKoKHTxeaQKfVTJN10F_DsI2a9DDE7euuBCI07HdVfsqFruT3Ir8RtoAIIsv8lvztudaOs8UQ4f_c6U3gYFDcBthYB43NLrkDHMPDkylPGIC9xOiee76BaJFxFzrF_UjOobt3jRT8XisOQTv7yef3uYbjc6bP5z_xiUEJ7AEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "BWI",
                                "name": "Baltimore - Washington International Airport",
                                "city": "BWI",
                                "cityName": "Baltimore",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Maryland",
                                "provinceCode": "MD"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "DFW",
                                "name": "Dallas-Fort Worth International Airport",
                                "city": "DFW",
                                "cityName": "Dallas",
                                "country": "US",
                                "countryName": "United States",
                                "province": "Texas",
                                "provinceCode": "TX"
                            },
                            "departureTime": "2024-11-30T19:35:00",
                            "arrivalTime": "2024-12-01T00:49:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-30T19:35:00",
                                    "arrivalTime": "2024-11-30T21:35:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "BWI",
                                        "name": "Baltimore - Washington International Airport",
                                        "city": "BWI",
                                        "cityName": "Baltimore",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Maryland",
                                        "provinceCode": "MD"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "ATL",
                                        "name": "Hartsfield–Jackson Atlanta International Airport",
                                        "city": "ATL",
                                        "cityName": "Atlanta",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Georgia",
                                        "provinceCode": "GA"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 1313,
                                        "carrierInfo": {
                                            "operatingCarrier": "NK",
                                            "marketingCarrier": "NK"
                                        }
                                    },
                                    "carriers": [
                                        "NK",
                                        "NK"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Spirit Airlines",
                                            "code": "NK"
                                        },
                                        {
                                            "name": "Spirit Airlines",
                                            "code": "NK"
                                        }
                                    ],
                                    "totalTime": 7200,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A321"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "paid",
                                            "type": "snack"
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ]
                                },
                                {
                                    "departureTime": "2024-11-30T23:20:00",
                                    "arrivalTime": "2024-12-01T00:49:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "ATL",
                                        "name": "Hartsfield–Jackson Atlanta International Airport",
                                        "city": "ATL",
                                        "cityName": "Atlanta",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Georgia",
                                        "provinceCode": "GA"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "DFW",
                                        "name": "Dallas-Fort Worth International Airport",
                                        "city": "DFW",
                                        "cityName": "Dallas",
                                        "country": "US",
                                        "countryName": "United States",
                                        "province": "Texas",
                                        "provinceCode": "TX"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 837,
                                        "carrierInfo": {
                                            "operatingCarrier": "NK",
                                            "marketingCarrier": "NK"
                                        }
                                    },
                                    "carriers": [
                                        "NK",
                                        "NK"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Spirit Airlines",
                                            "code": "NK"
                                        },
                                        {
                                            "name": "Spirit Airlines",
                                            "code": "NK"
                                        }
                                    ],
                                    "totalTime": 8940,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "32N"
                                        },
                                        {
                                            "category": "FOOD",
                                            "cost": "paid",
                                            "type": "snack"
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ]
                                }
                            ],
                            "totalTime": 22440,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                }
            ],
            "flightDeals": [
                {
                    "key": "CHEAPEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2QbW-DIBSFf033TQTRWZaQRduuaRZkm33zE1FKre02FmGr9deP1oabc55zLwHCwdof8-T7-8-mPljj_RpQa6vr0iog9Ze_b51UWp-a79ovm9ZPN4vpywbDjK995HtuyafiWXXWM62kD02lQEk9QsiARtK3ZHznlj6CcJ6mccSzW0tqS0MQYRxztt5u0dBs6bxI-Xw4YUfZ1Jw5tIz3C8wvKF8dDWI9w0uINqueQd7PUDbThi1XMG-6IkMzx-v3LD932TpB_AJhnp8t6xPDJs7zbvtRj_DU1e0KJSVFAIQxGR6gS0Pj8Z2lpQgOuLM0Z1GO-BDdICYkuoWOIozH0YNRn0raRn-_qgvNXgMYE8_9lf4LQq8YBZPK6F2nHIxw4qoW0OnhpqWYjJ1VgqTO5GA7EZBKKUdKBBhe9-1F6LQRCEBwzUex2DjrBbE_8nT8B6HznovRAQAA",
                    "price": {
                        "currencyCode": "USD",
                        "units": 179,
                        "nanos": 950000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 179,
                                    "nanos": 950000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 141,
                                    "nanos": 860000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 38,
                                    "nanos": 90000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 180
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 179,
                                    "nanos": 950000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 180
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "FASTEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2QW4-CMBCFf42-UagFEZNm4z1m07IGxctLA7Ugu641tC7Ir98KppNzvplJm5NetL6rsW1n1yK_aGU9FMillnmiBeDy185KI6mUP8Utt5OitKf79Xy5Rw4NYxvaljl8fPwQtbZUyXG_SAVIsBUEQYeKY_imEg-Bu5pOfS-k7YhLjV3gIeSHJD58nbphiVfk5B02bXfGZK6qsJn4dKsGdK4gaQjaOnC_a8gzbBaQLqQi250TFfWRxi-ONzSqahpPYPh0nCiqNGkmisyMR_WOVj00N9U-L7iJB4DrB11Imah3XMk1hk6HZ40j4kUw7FqzGCF_1DY1hgiNvL4SV8F1IW-f4omXgYsC3zJ_JP8GrrXoDWZp-mjcu4EempjKmWP00mrCjktjKQumxnhnZzZIsiE3JBgU_shAxlyjBYPAAa9732y9N9awNK2yrPgH05kmbMkBAAA.",
                    "price": {
                        "currencyCode": "USD",
                        "units": 183,
                        "nanos": 780000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 183,
                                    "nanos": 780000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 157,
                                    "nanos": 460000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 26,
                                    "nanos": 320000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 184
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 183,
                                    "nanos": 780000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 184
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "BEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2QbW-DIBSFf033TQTRWZaQRduuaRZkm33zE1FKre02FmGr9deP1oabc55zLwHCwdof8-T7-8-mPljj_RpQa6vr0iog9Ze_b51UWp-a79ovm9ZPN4vpywbDjK995HtuyafiWXXWM62kD02lQEk9QsiARtK3ZHznlj6CcJ6mccSzW0tqS0MQYRxztt5u0dBs6bxI-Xw4YUfZ1Jw5tIz3C8wvKF8dDWI9w0uINqueQd7PUDbThi1XMG-6IkMzx-v3LD932TpB_AJhnp8t6xPDJs7zbvtRj_DU1e0KJSVFAIQxGR6gS0Pj8Z2lpQgOuLM0Z1GO-BDdICYkuoWOIozH0YNRn0raRn-_qgvNXgMYE8_9lf4LQq8YBZPK6F2nHIxw4qoW0OnhpqWYjJ1VgqTO5GA7EZBKKUdKBBhe9-1F6LQRCEBwzUex2DjrBbE_8nT8B6HznovRAQAA",
                    "price": {
                        "currencyCode": "USD",
                        "units": 179,
                        "nanos": 950000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 179,
                                    "nanos": 950000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 141,
                                    "nanos": 860000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 38,
                                    "nanos": 90000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 180
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 179,
                                    "nanos": 950000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 180
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                }
            ],
            "atolProtectedStatus": "NONE",
            "searchId": "7747B1AD9EA7A5B9C78273E79DE26E48",
            "displayOptions": {
                "brandedFaresShownByDefault": false,
                "directFlightsOnlyFilterIgnored": false,
                "hideFlexiblePricesBanner": false
            },
            "isOffersCabinClassExtended": false,
            "searchCriteria": {
                "cabinClass": "ECONOMY"
            }
        }
    }
]

2025-08-25 12:31:39,194 - evaluation_logger_Cross-399 - INFO - Function Calls: 
[
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJadN45Ze3t4kRWCQ-wotG1Ss",
            "drop_off_place_id": "ChIJC-DCu_zit4kRQBeX-gwVAAA",
            "pick_up_date": "2024-11-30",
            "pick_up_time": "07:00"
        }
    }
]

2025-08-25 12:31:39,194 - evaluation_logger_Cross-399 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Taxi",
        "arguments": {
            "drop_off_place_id": "ChIJC-DCu_zit4kRQBeX-gwVAAA",
            "pick_up_date": "2024-11-30",
            "pick_up_place_id": "ChIJadN45Ze3t4kRWCQ-wotG1Ss",
            "pick_up_time": "07:00"
        }
    }
]

2025-08-25 12:31:39,194 - evaluation_logger_Cross-399 - INFO - Start compare_single_call: 
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJC-DCu_zit4kRQBeX-gwVAAA', 'pick_up_date': '2024-11-30', 'pick_up_place_id': 'ChIJadN45Ze3t4kRWCQ-wotG1Ss', 'pick_up_time': '07:00'}}
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJC-DCu_zit4kRQBeX-gwVAAA', 'pick_up_date': '2024-11-30', 'pick_up_place_id': 'ChIJadN45Ze3t4kRWCQ-wotG1Ss', 'pick_up_time': '07:00'}}
2025-08-25 12:31:39,194 - evaluation_logger_Cross-399 - INFO - Rule-based compare success.
2025-08-25 12:31:39,194 - evaluation_logger_Cross-399 - INFO - Success matched: [{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJC-DCu_zit4kRQBeX-gwVAAA', 'pick_up_date': '2024-11-30', 'pick_up_place_id': 'ChIJadN45Ze3t4kRWCQ-wotG1Ss', 'pick_up_time': '07:00'}}]
2025-08-25 12:31:39,194 - evaluation_logger_Cross-399 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "journeys": [
                {
                    "journeyDirection": "OUTBOUND",
                    "requestedPickupDateTime": "2024-11-30T07:00:00",
                    "dropOffLocation": {
                        "name": "Baltimore/Washington Intl Thurgood Marshal Airport (BWI), 7050 Friendship Rd, Baltimore, MD 21240, USA",
                        "country": "US",
                        "postcode": "21240",
                        "locationId": "ChIJC-DCu_zit4kRQBeX-gwVAAA",
                        "city": "Baltimore",
                        "description": "7050 Friendship Rd, Baltimore, MD 21240, USA",
                        "establishment": "Baltimore/Washington Intl Thurgood Marshal Airport (BWI)",
                        "airportCode": "BWI",
                        "locationType": "AIRPORT"
                    },
                    "pickupLocation": {
                        "postcode": "20004",
                        "country": "US",
                        "name": "InterContinental the Willard Washington D.C., an IHG Hotel, 1401 Pennsylvania Avenue NW, Washington, DC 20004, USA",
                        "locationType": "GEO",
                        "timezone": "America/New_York",
                        "establishment": "InterContinental the Willard Washington D.C., an IHG Hotel",
                        "city": "Washington",
                        "description": "1401 Pennsylvania Avenue NW, Washington, DC 20004, USA",
                        "locationId": "ChIJadN45Ze3t4kRWCQ-wotG1Ss"
                    },
                    "janusSearchReference": "96524e27-7098-4618-8974-ff2d9d2acb68"
                }
            ],
            "results": [
                {
                    "legPriceBreakdown": [
                        {
                            "price": {
                                "amount": "102.72",
                                "currencyCode": "USD"
                            },
                            "supplierName": "E-Life Limo",
                            "supplierLocationId": 4929,
                            "journeyDirection": "OUTBOUND",
                            "supplierId": 668
                        }
                    ],
                    "janusResultReference": "1",
                    "supplierId": 668,
                    "bags": 3,
                    "categoryLocalised": "Standard",
                    "geniusDiscount": false,
                    "drivingDistance": 54.99,
                    "vehicleType": "STANDARD",
                    "priceRuleId": 19305,
                    "discountType": "NONE",
                    "category": "Standard",
                    "supplierName": "E-Life Limo",
                    "resultId": "06f68784-12f4-4922-86a4-51c4de35d903",
                    "passengerCapacity": 3,
                    "description": "Standard",
                    "duration": 44,
                    "cancellationLeadTimeMinutes": 1440,
                    "nonRefundable": false,
                    "descriptionLocalised": "Perfect for solo travellers, couples and small families.",
                    "meetGreet": false,
                    "price": {
                        "currencyCode": "USD",
                        "amount": "102.72"
                    }
                },
                {
                    "bags": 3,
                    "categoryLocalised": "Executive",
                    "geniusDiscount": false,
                    "legPriceBreakdown": [
                        {
                            "supplierId": 668,
                            "price": {
                                "amount": "150.05",
                                "currencyCode": "USD"
                            },
                            "supplierName": "E-Life Limo",
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 4929
                        }
                    ],
                    "janusResultReference": "2",
                    "supplierId": 668,
                    "discountType": "NONE",
                    "category": "Executive",
                    "supplierName": "E-Life Limo",
                    "drivingDistance": 54.99,
                    "vehicleType": "EXECUTIVE",
                    "priceRuleId": 19306,
                    "duration": 44,
                    "cancellationLeadTimeMinutes": 1440,
                    "resultId": "d9caffc5-ea28-487f-9032-8f41779ca0fa",
                    "passengerCapacity": 3,
                    "description": "Executive",
                    "meetGreet": false,
                    "price": {
                        "amount": "150.05",
                        "currencyCode": "USD"
                    },
                    "nonRefundable": false,
                    "descriptionLocalised": "Plenty of space to travel in comfort."
                },
                {
                    "janusResultReference": "5",
                    "legPriceBreakdown": [
                        {
                            "price": {
                                "currencyCode": "USD",
                                "amount": "167.70"
                            },
                            "supplierName": "E-Life Limo",
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 4929,
                            "supplierId": 668
                        }
                    ],
                    "supplierId": 668,
                    "bags": 4,
                    "categoryLocalised": "People carrier",
                    "geniusDiscount": false,
                    "drivingDistance": 54.99,
                    "priceRuleId": 19309,
                    "vehicleType": "LARGE",
                    "category": "People Carrier",
                    "discountType": "NONE",
                    "supplierName": "E-Life Limo",
                    "resultId": "52d199b6-dbaa-42c4-a648-79a58b8c39af",
                    "passengerCapacity": 4,
                    "description": "People Carrier",
                    "cancellationLeadTimeMinutes": 1440,
                    "duration": 44,
                    "nonRefundable": false,
                    "descriptionLocalised": "Great choice for families.",
                    "meetGreet": false,
                    "price": {
                        "amount": "167.70",
                        "currencyCode": "USD"
                    }
                },
                {
                    "resultId": "711641b8-636e-4c15-8188-f8c9b7959903",
                    "passengerCapacity": 5,
                    "description": "Large People Carrier",
                    "cancellationLeadTimeMinutes": 1440,
                    "duration": 44,
                    "nonRefundable": false,
                    "descriptionLocalised": "Ideal for small groups.",
                    "meetGreet": false,
                    "price": {
                        "currencyCode": "USD",
                        "amount": "173.13"
                    },
                    "janusResultReference": "6",
                    "legPriceBreakdown": [
                        {
                            "supplierId": 2544,
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 6183,
                            "supplierName": "Carzen+",
                            "price": {
                                "amount": "173.13",
                                "currencyCode": "USD"
                            }
                        }
                    ],
                    "supplierId": 2544,
                    "bags": 5,
                    "categoryLocalised": "Large people carrier",
                    "geniusDiscount": false,
                    "drivingDistance": 54.99,
                    "vehicleType": "LARGE",
                    "priceRuleId": 19310,
                    "category": "Large People Carrier",
                    "discountType": "NONE",
                    "supplierName": "Carzen+"
                },
                {
                    "price": {
                        "amount": "195.57",
                        "currencyCode": "USD"
                    },
                    "meetGreet": false,
                    "descriptionLocalised": "Perfect for groups that want a touch of luxury.",
                    "nonRefundable": false,
                    "cancellationLeadTimeMinutes": 120,
                    "duration": 44,
                    "description": "Executive People Carrier",
                    "passengerCapacity": 6,
                    "resultId": "ae9d53a2-eec7-43d0-b46d-b4a1cfceafad",
                    "supplierName": "ING Limo",
                    "category": "Executive People Carrier",
                    "discountType": "NONE",
                    "vehicleType": "LARGE_EXECUTIVE",
                    "priceRuleId": 19307,
                    "drivingDistance": 54.99,
                    "geniusDiscount": false,
                    "bags": 6,
                    "categoryLocalised": "Executive people carrier",
                    "supplierId": 546,
                    "janusResultReference": "3",
                    "legPriceBreakdown": [
                        {
                            "supplierName": "ING Limo",
                            "price": {
                                "currencyCode": "USD",
                                "amount": "195.57"
                            },
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 1912,
                            "supplierId": 546
                        }
                    ]
                }
            ]
        }
    }
]

2025-08-25 12:33:49,782 - evaluation_logger_Cross-399 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [《精尽 Spring Boot 源码分析 —— SpringApplication》](http://svip.iocoder.cn/Spring-Boot/SpringApplication/) 的**初始化**的源码解析。

在 SpringApplication 实例初始化的过程中，它会做如下几件事情：

1. 推断当前 WEB 应用类型
2. 设置 `applicationContextInitializers` 属性
3. 设置 `applicationListeners` 属性
4. 推断入口类

# 2. 构造方法

SpringApplication 的构造方法，用于初始化。代码如下：

```java
// SpringApplication.java

/**
 * 应用上下文初始化器（ApplicationContextInitializer）数组
 */
private List<ApplicationContextInitializer<?>> initializers;
/**
 * 应用事件监听器（ApplicationListener）数组
 */
private List<ApplicationListener<?>> listeners;
/**
 * 项目类型
 */
private WebApplicationType webApplicationType;
/**
 * 入口类
 */
private Class<?> mainApplicationClass;

public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
    this.resourceLoader = resourceLoader;
    Assert.notNull(primarySources, "PrimarySources must not be null");
    this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
    // <1> 推断当前 WEB 应用类型
    this.webApplicationType = WebApplicationType.deduceFromClasspath();
    // <2> 设置应用上下文初始化器（ApplicationContextInitializer）
    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
    // <3> 设置应用事件监听器（ApplicationListener）
    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
    // <4> 推断入口类
    this.mainApplicationClass = deduceMainApplicationClass();
}
```

- `primarySources` 参数，是启动的入口类，一般是我们使用 `SpringApplication#run(Class primarySource, String... args)` 方法，传递进来的第一个参数。关于这个方法，我们会在下一篇文章，详细解析。

- `<1>` 处，调用 `WebApplicationType#deduceFromClasspath()` 方法，推断当前 WEB 应用类型。详细解析，见 [「2.1 推断应用类型」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `<2>` 处，设置 `applicationContextInitializers` 属性。详细解析，见 [「2.2 设置 initializers」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `<3>` 处，设置 `applicationListeners` 属性。详细解析，见 [「2.3 设置 listeners」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `<4>` 处，调用 `#deduceMainApplicationClass()` 方法，推断入口类。详细解析，见 [「2.4 推断入口类」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

## 2.1 推断应用类型

`WebApplicationType#deduceFromClasspath()` 方法，推断当前 WEB 应用类型。代码如下：

```java
// WebApplicationType.java

private static final String[] SERVLET_INDICATOR_CLASSES = { "javax.servlet.Servlet",
		"org.springframework.web.context.ConfigurableWebApplicationContext" };

private static final String WEBMVC_INDICATOR_CLASS = "org.springframework.web.servlet.DispatcherServlet";
private static final String WEBFLUX_INDICATOR_CLASS = "org.springframework.web.reactive.DispatcherHandler";
private static final String JERSEY_INDICATOR_CLASS = "org.glassfish.jersey.servlet.ServletContainer";

public static WebApplicationType deduceFromClasspath() {
    // 如果存在 org.springframework.web.reactive.DispatcherHandler ，并且不存在 org.springframework.web.servlet.DispatcherServlet 和 org.glassfish.jersey.servlet.ServletContainer ，则定义为 WebApplicationType.REACTIVE 类型
	if (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, null) && !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, null)
			&& !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, null)) {
		return WebApplicationType.REACTIVE;
	}
    // 如果不存在 javax.servlet.Servlet 和 org.springframework.web.context.ConfigurableWebApplicationContext 任何一个类，则定义为 WebApplicationType.NONE 类型
	for (String className : SERVLET_INDICATOR_CLASSES) {
		if (!ClassUtils.isPresent(className, null)) {
			return WebApplicationType.NONE;
		}
	}
    // 以上都不是，则定义为 WebApplicationType.SERVLET 类型
	return WebApplicationType.SERVLET;
}
```

- 根据不同的条件，判断类型，返回不同的 WebApplicationType 枚举值。
- WebApplicationType 枚举，代码如下：

  ```java
  // WebApplicationType.java
  
  public enum WebApplicationType {
  
  	/**
  	 * 非 WEB 项目
  	 */
  	NONE,
  
  	/**
  	 * SERVLET WEB 项目
  	 */
  	SERVLET,
  
  	/**
  	 * 响应式 WEB 项目
  	 */
  	REACTIVE;
  
  }
  ```

## 2.2 设置 initializers

`#getSpringFactoriesInstances(Class<T> type)` 方法，获得指定类对应的对象们。代码如下：

```java
// SpringApplication.java

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type) {
    return getSpringFactoriesInstances(type, new Class<?>[] {});
}

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
    ClassLoader classLoader = getClassLoader();
    // Use names and ensure unique to protect against duplicates
    // <1> 加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组
    Set<String> names = new LinkedHashSet<>(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    // <2> 创建对象们
    List<T> instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    // <3> 排序对象们
    AnnotationAwareOrderComparator.sort(instances);
    return instances;
}
```

- `<1>` 处，调用 `SpringFactoriesLoader#loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader)` 方法，加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组。

  - 在 `spring-boot` 项目中的 `META-INF/spring.factories` 文件中，`ApplicationContextInitializer` 的配置如下：

    ```properties
    # Application Context Initializers
    org.springframework.context.ApplicationContextInitializer=\
    org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\
    org.springframework.boot.context.ContextIdApplicationContextInitializer,\
    org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\
    org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer
    ```

  - 在 `spring-boot-autoconfigure` 项目中的 `META-INF/spring.factories` 文件中，`ApplicationContextInitializer` 的配置如下：

    ```properties
    # Initializers
    org.springframework.context.ApplicationContextInitializer=\
    org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\
    org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener
    ```

  - 所以，`names` 的结果是以上 6 个类。

- `<2>` 处，调用 `#createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names)` 方法，创建对象们。代码如下：

  ```java
  // SpringApplication.java
  
  private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes,
  		ClassLoader classLoader, Object[] args, Set<String> names) {
  	List<T> instances = new ArrayList<>(names.size());
  	for (String name : names) {
  		try {
  			Class<?> instanceClass = ClassUtils.forName(name, classLoader);
  			Assert.isAssignable(type, instanceClass);
  			Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
  			T instance = (T) BeanUtils.instantiateClass(constructor, args);
  			instances.add(instance);
  		} catch (Throwable ex) {
  			throw new IllegalArgumentException("Cannot instantiate " + type + " : " + name, ex);
  		}
  	}
  	return instances;
  }
  ```

  - 反射创建类对应的对象。

- `<3>` 处，调用 `AnnotationAwareOrderComparator#sort(List<?> list)` 方法，排序对象们。因为 `ApplicationContextInitializer` 可能有顺序，所以需要排序。

- 最后，调用 `#setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers)` 方法，设置到 `initializers` 中。代码如下：

  ```java
  // SpringApplication.java
  
  public void setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers) {
  	this.initializers = new ArrayList<>();
  	this.initializers.addAll(initializers);
  }
  ```

## 2.3 设置 listeners

和 [「2.2 设置 initializers」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 一样，也是 `#getSpringFactoriesInstances(Class<T> type)` 方法，获得 `ApplicationListener` 类型的对象们。

- 在 `spring-boot` 项目中的 `META-INF/spring.factories` 文件中，`ApplicationListener` 的配置如下：

  ```properties
  # Application Listeners
  org.springframework.context.ApplicationListener=\
  org.springframework.boot.ClearCachesApplicationListener,\
  org.springframework.boot.builder.ParentContextCloserApplicationListener,\
  org.springframework.boot.context.FileEncodingApplicationListener,\
  org.springframework.boot.context.config.AnsiOutputApplicationListener,\
  org.springframework.boot.context.config.ConfigFileApplicationListener,\
  org.springframework.boot.context.config.DelegatingApplicationListener,\
  org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\
  org.springframework.boot.context.logging.LoggingApplicationListener,\
  org.springframework.boot.liquibase.LiquibaseServiceApplicationListener
  ```

- 在 `spring-boot-autoconfigure` 项目中的 `META-INF/spring.factories` 文件中，`ApplicationListener` 没有配置。

所以，最终 `listeners` 的结果是以上 9 个类。

## 2.4 推断入口类

`#deduceMainApplicationClass()` 方法，推断入口类。代码如下：

```java
// SpringApplication.java

private Class<?> deduceMainApplicationClass() {
	try {
		// 获得当前 StackTraceElement 数组
		StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();
		// 遍历 StackTraceElement 数组，找到方法名为 main 的 StackTraceElement 元素，从而推断入口类
		for (StackTraceElement stackTraceElement : stackTrace) {
			if ("main".equals(stackTraceElement.getMethodName())) {
				return Class.forName(stackTraceElement.getClassName());
			}
		}
	} catch (ClassNotFoundException ex) {
		// Swallow and continue
	}
	return null;
}
```

- 通过构造一个 RuntimeException 异常，从而获取到当前线程的调用栈。然后，遍历调用栈，判断哪个执行 `main` 方法，从而推断出入类类。

# 3. 小结

至此，SpringApplication 的初始化已经完成。下一篇文章，我们来分享 `SpringApplication#run(String... args)` 方法的执行流程。

另外，本文涉及到的 ApplicationContextInitializer 和 ApplicationListener 的类，暂时不详细解析。等我们后续文章，需要的时候，再进行详细解析。

2025-08-25 12:33:56,961 - evaluation_logger_Cross-399 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any of the requested information in the user's query."}
2025-08-25 12:34:03,321 - evaluation_logger_Cross-399 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:34:03,321 - evaluation_logger_Cross-399 - INFO - Message: Success.
2025-08-25 12:34:03,321 - evaluation_logger_Cross-399 - INFO - Success turn num = 5
2025-08-25 12:34:03,321 - evaluation_logger_Cross-399 - INFO - ----------------------------------------------------------------------------------------------------
