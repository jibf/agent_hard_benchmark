2025-08-25 12:28:14,264 - evaluation_logger_Cross-379 - INFO - Test Example Cross-379
2025-08-25 12:28:14,264 - evaluation_logger_Cross-379 - INFO - Query: Today is November 4th, 2024. Check the sightseeing routes for attractions near the Hyatt Regency Long Beach for tomorrow. Also, reserve a taxi to pick me up from the hotel two hours after the tour ends and take me to Los Angeles International Airport.
2025-08-25 12:28:23,695 - evaluation_logger_Cross-379 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Hyatt Regency Long Beach"
        }
    }
]

2025-08-25 12:28:23,695 - evaluation_logger_Cross-379 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Hyatt Regency Long Beach"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Hyatt Regency Long Beach"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Los Angeles International Airport"
        }
    },
    {
        "name": "Get_Popular_Attraction_Near_By",
        "arguments": {
            "hotel_id": "183115"
        }
    }
]

2025-08-25 12:28:23,695 - evaluation_logger_Cross-379 - INFO - Start compare_single_call: 
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Hyatt Regency Long Beach'}}
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Hyatt Regency Long Beach'}}
2025-08-25 12:28:23,695 - evaluation_logger_Cross-379 - INFO - Rule-based compare success.
2025-08-25 12:28:23,695 - evaluation_logger_Cross-379 - INFO - Success matched: [{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Hyatt Regency Long Beach'}}]
2025-08-25 12:28:23,696 - evaluation_logger_Cross-379 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "dest_id": "183115",
                "search_type": "hotel",
                "country": "United States",
                "name": "Hyatt Regency Long Beach",
                "dest_type": "hotel",
                "lc": "en",
                "roundtrip": "GgEwIAAoATICZW46GEh5YXR0IFJlZ2VuY3kgTG9uZyBCZWFjaEAASgBQAA==",
                "cc1": "us",
                "region": "California",
                "longitude": -118.19147,
                "latitude": 33.763523,
                "label": "Hyatt Regency Long Beach, Long Beach, California, United States",
                "city_ufi": 20014160,
                "city_name": "Long Beach",
                "nr_hotels": 1,
                "type": "ho",
                "hotels": 1
            }
        ]
    }
]

2025-08-25 12:28:34,860 - evaluation_logger_Cross-379 - INFO - Function Calls: 
[
    {
        "name": "Get_Popular_Attraction_Near_By",
        "arguments": {
            "hotel_id": "183115"
        }
    }
]

2025-08-25 12:28:34,861 - evaluation_logger_Cross-379 - INFO - Golden Function Call: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Hyatt Regency Long Beach"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Los Angeles International Airport"
        }
    },
    {
        "name": "Get_Popular_Attraction_Near_By",
        "arguments": {
            "hotel_id": "183115"
        }
    },
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Shoreline Village"
        }
    }
]

2025-08-25 12:28:34,861 - evaluation_logger_Cross-379 - INFO - Start compare_single_call: 
{'name': 'Get_Popular_Attraction_Near_By', 'arguments': {'hotel_id': '183115'}}
{'name': 'Get_Popular_Attraction_Near_By', 'arguments': {'hotel_id': '183115'}}
2025-08-25 12:28:34,861 - evaluation_logger_Cross-379 - INFO - Rule-based compare success.
2025-08-25 12:28:34,861 - evaluation_logger_Cross-379 - INFO - Success matched: [{'name': 'Get_Popular_Attraction_Near_By', 'arguments': {'hotel_id': '183115'}}]
2025-08-25 12:28:34,861 - evaluation_logger_Cross-379 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "popular_landmarks": [
                {
                    "longitude": -118.189346,
                    "distance": 0.175892812693251,
                    "tag": "Shoreline Village",
                    "average_out_of_10": "9.0",
                    "total_votes": 163,
                    "latitude": 33.761693
                },
                {
                    "distance": 0.304658970414226,
                    "tag": "Aquarium of the Pacific",
                    "average_out_of_10": 9.2,
                    "total_votes": 144,
                    "latitude": 33.763343,
                    "longitude": -118.196774
                },
                {
                    "longitude": -118.191107,
                    "distance": 0.783260912119602,
                    "latitude": 33.752206,
                    "tag": "Queen Mary",
                    "average_out_of_10": 8.7,
                    "total_votes": 225
                },
                {
                    "distance": 1.02733686091156,
                    "latitude": 33.774604,
                    "tag": "Museum of Latin American Art",
                    "total_votes": 8,
                    "average_out_of_10": 8.2,
                    "longitude": -118.179552
                },
                {
                    "longitude": -118.164867,
                    "latitude": 33.763821,
                    "total_votes": 58,
                    "tag": "Long Beach Museum of Art",
                    "average_out_of_10": 9.2,
                    "distance": 1.52723963087688
                }
            ]
        }
    }
]

2025-08-25 12:28:44,718 - evaluation_logger_Cross-379 - INFO - Function Calls: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Hyatt Regency Long Beach"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Los Angeles International Airport"
        }
    }
]

2025-08-25 12:28:44,719 - evaluation_logger_Cross-379 - INFO - Golden Function Call: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Hyatt Regency Long Beach"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Los Angeles International Airport"
        }
    },
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Shoreline Village"
        }
    },
    {
        "name": "Get_Availability",
        "arguments": {
            "slug": "proj865ogs44-uss-iowa-ship-shoreline-village-queen-mary-private-day-trip"
        }
    }
]

2025-08-25 12:28:44,719 - evaluation_logger_Cross-379 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Hyatt Regency Long Beach'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Hyatt Regency Long Beach'}}
2025-08-25 12:28:44,719 - evaluation_logger_Cross-379 - INFO - Rule-based compare success.
2025-08-25 12:28:44,719 - evaluation_logger_Cross-379 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Los Angeles International Airport'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Los Angeles International Airport'}}
2025-08-25 12:28:44,719 - evaluation_logger_Cross-379 - INFO - Rule-based compare success.
2025-08-25 12:28:44,719 - evaluation_logger_Cross-379 - INFO - Success matched: [{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Hyatt Regency Long Beach'}}, {'name': 'Taxi_Search_Location', 'arguments': {'query': 'Los Angeles International Airport'}}]
2025-08-25 12:28:44,719 - evaluation_logger_Cross-379 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "googlePlaceId": "ChIJd_XJujkx3YARgnik5iZf8bc",
                "city": "Long Beach",
                "country": "United States",
                "types": "hotel",
                "latitude": 33.763523,
                "longitude": -118.19147,
                "countryCode": "us",
                "name": "Hyatt Regency Long Beach"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "types": "airport",
                "latitude": 33.9441,
                "city": "Los Angeles",
                "iata": "LAX",
                "country": "United States",
                "longitude": -118.402,
                "googlePlaceId": "ChIJtU-yE9KwwoAR8a2LaVd7qHc",
                "name": "Los Angeles International Airport",
                "countryCode": "us"
            }
        ]
    }
]

2025-08-25 12:30:55,988 - evaluation_logger_Cross-379 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [《精尽 Spring Boot 源码分析 —— SpringApplication》](http://svip.iocoder.cn/Spring-Boot/SpringApplication/) 的**初始化**的源码解析。

在 SpringApplication 实例初始化的过程中，它会做如下几件事情：

1. 推断当前 WEB 应用类型
2. 设置 `applicationContextInitializers` 属性
3. 设置 `applicationListeners` 属性
4. 推断入口类

# 2. 构造方法

`org.springframework.boot.SpringApplication` 的构造方法，用于初始化 SpringApplication 对象。代码如下：

```java
// SpringApplication.java

/**
 * Create a new {@link SpringApplication} instance. The application context will load
 * beans from the specified primary sources (see {@link SpringApplication class-level}
 * documentation for details. The instance can be customized before calling
 * {@link #run(String...)}.
 * @param resourceLoader the resource loader to use
 * @param primarySources the primary bean sources
 * @see #run(Class, String[])
 * @see #setSources(Set)
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
    // <1> 设置 resourceLoader 属性
    this.resourceLoader = resourceLoader;
    Assert.notNull(primarySources, "PrimarySources must not be null");
    // <2> 设置 primarySources 属性
    this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
    // <3> 推断当前 WEB 应用类型
    this.webApplicationType = WebApplicationType.deduceFromClasspath();
    // <4> 设置 applicationContextInitializers 属性
    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
    // <5> 设置 applicationListeners 属性
    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
    // <6> 推断入口类
    this.mainApplicationClass = deduceMainApplicationClass();
}
```

- `<1>` 处，设置 `resourceLoader` 属性。
- `<2>` 处，设置 `primarySources` 属性。一般情况下，就是启动类。
- `<3>` 处，调用 `WebApplicationType#deduceFromClasspath()` 方法，推断当前 WEB 应用类型。详细解析，见 [「2.1 推断当前 WEB 应用类型」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。
- `<4>` 处，设置 `applicationContextInitializers` 属性。详细解析，见 [「2.2 设置 applicationContextInitializers 属性」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。
- `<5>` 处，设置 `applicationListeners` 属性。详细解析，见 [「2.3 设置 applicationListeners 属性」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。
- `<6>` 处，调用 `#deduceMainApplicationClass()` 方法，推断入口类。详细解析，见 [「2.4 推断入口类」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

## 2.1 推断当前 WEB 应用类型

`WebApplicationType#deduceFromClasspath()` 方法，推断当前 WEB 应用类型。代码如下：

```java
// WebApplicationType.java

private static final String[] SERVLET_INDICATOR_CLASSES = { "javax.servlet.Servlet",
		"org.springframework.web.context.ConfigurableWebApplicationContext" };

private static final String WEBMVC_INDICATOR_CLASS = "org.springframework.web.servlet.DispatcherServlet";

private static final String WEBFLUX_INDICATOR_CLASS = "org.springframework.web.reactive.DispatcherHandler";

private static final String JERSEY_INDICATOR_CLASS = "org.glassfish.jersey.servlet.ServletContainer";

private static final String SERVLET_APPLICATION_CONTEXT_CLASS = "org.springframework.web.context.WebApplicationContext";

private static final String REACTIVE_APPLICATION_CONTEXT_CLASS = "org.springframework.boot.web.reactive.context.ReactiveWebApplicationContext";

public static WebApplicationType deduceFromClasspath() {
    // 如果存在 REACTIVE 相关的类，且不存在 SERVLET 相关的类，且不存在 Spring MVC 相关的类，则返回 REACTIVE 类型
	if (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, null) && !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, null)
			&& !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, null)) {
		return WebApplicationType.REACTIVE;
	}
    // 如果不存在 SERVLET 相关的类，则返回 NONE 类型
	for (String className : SERVLET_INDICATOR_CLASSES) {
		if (!ClassUtils.isPresent(className, null)) {
			return WebApplicationType.NONE;
		}
	}
    // 如果存在 SERVLET 相关的类，则返回 SERVLET 类型
	return WebApplicationType.SERVLET;
}
```

- 根据不同的条件，返回不同的 `org.springframework.boot.WebApplicationType` 枚举对象。WebApplicationType 枚举，一共有三种类型。代码如下：

  ```java
  // WebApplicationType.java
  
  public enum WebApplicationType {
  
  	/**
  	 * The application should not run as a web application and should not start an
  	 * embedded web server.
  	 */
  	NONE,
  
  	/**
  	 * The application should run as a servlet-based web application and should start an
  	 * embedded servlet web server.
  	 */
  	SERVLET,
  
  	/**
  	 * The application should run as a reactive web application and should start an
  	 * embedded reactive web server.
  	 */
  	REACTIVE;
  
  }
  ```

  - `NONE`：非 WEB 项目
  - `SERVLET`：基于 Servlet 的 WEB 项目
  - `REACTIVE`：基于 Reactive 的 WEB 项目

- 具体的推断逻辑，看下代码注释，比较简单。

## 2.2 设置 applicationContextInitializers 属性

`#getSpringFactoriesInstances(Class<T> type)` 方法，获得指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组。代码如下：

```java
// SpringApplication.java

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type) {
	return getSpringFactoriesInstances(type, new Class<?>[] {});
}

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
	ClassLoader classLoader = getClassLoader();
	// Use names and ensure unique to protect against duplicates
    // 加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组
	Set<String> names = new LinkedHashSet<>(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    // 创建对象
	List<T> instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    // 排序
	AnnotationAwareOrderComparator.sort(instances);
	return instances;
}
```

- 关于 `SpringFactoriesLoader#loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader)` 方法，在 [《精尽 Spring 源码分析 —— 应用程序上下文 ApplicationContext 相关》](http://svip.iocoder.cn/Spring/ApplicationContext-related) 的 [「7. SpringFactoriesLoader」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 中，有详细解析。
- 关于 `#createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names)` 方法，创建对象。代码如下：

  ```java
  // SpringApplication.java
  
  @SuppressWarnings("unchecked")
  private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes,
  		ClassLoader classLoader, Object[] args, Set<String> names) {
  	List<T> instances = new ArrayList<>(names.size());
  	for (String name : names) {
  		try {
  			Class<?> instanceClass = ClassUtils.forName(name, classLoader);
  			Assert.isAssignable(type, instanceClass);
  			Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
  			T instance = (T) BeanUtils.instantiateClass(constructor, args);
  			instances.add(instance);
  		} catch (Throwable ex) {
  			throw new IllegalArgumentException("Cannot instantiate " + type + " : " + name, ex);
  		}
  	}
  	return instances;
  }
  ```

  - 反射创建对象。

- 关于 `AnnotationAwareOrderComparator#sort(List<?> list)` 方法，排序。在 [《精尽 Spring 源码分析 —— 应用程序上下文 ApplicationContext 相关》](http://svip.iocoder.cn/Spring/ApplicationContext-related) 的 [「8. OrderComparator」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 中，有详细解析。

- 在 `#setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class))` 代码段中，加载的是类型为 `org.springframework.context.ApplicationContextInitializer` 的类。在 `META-INF/spring.factories` 中，定义如下：

  ```properties
  # Application Context Initializers
  org.springframework.context.ApplicationContextInitializer=\
  org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\
  org.springframework.boot.context.ContextIdApplicationContextInitializer,\
  org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\
  org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer
  ```

  - 关于每个 ApplicationContextInitializer 的实现类，我们在后续的文章中，详细解析。

## 2.3 设置 applicationListeners 属性

同 [「2.2 设置 applicationContextInitializers 属性」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 一样，`#setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class))` 代码段，加载的是类型为 `org.springframework.context.ApplicationListener` 的类。在 `META-INF/spring.factories` 中，定义如下：

```properties
# Application Listeners
org.springframework.context.ApplicationListener=\
org.springframework.boot.ClearCachesApplicationListener,\
org.springframework.boot.builder.ParentContextCloserApplicationListener,\
org.springframework.boot.context.FileEncodingApplicationListener,\
org.springframework.boot.context.config.AnsiOutputApplicationListener,\
org.springframework.boot.context.config.ConfigFileApplicationListener,\
org.springframework.boot.context.config.DelegatingApplicationListener,\
org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\
org.springframework.boot.context.logging.LoggingApplicationListener,\
org.springframework.boot.liquibase.LiquibaseServiceApplicationListener
```

- 关于每个 ApplicationListener 的实现类，我们在后续的文章中，详细解析。

## 2.4 推断入口类

`#deduceMainApplicationClass()` 方法，推断入口类。代码如下：

```java
// SpringApplication.java

private Class<?> deduceMainApplicationClass() {
	try {
		// 获得当前 StackTraceElement 数组
		StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();
		// 遍历每个 StackTraceElement ，通过方法名是否为 main 方法，从而判断入口类
		for (StackTraceElement stackTraceElement : stackTrace) {
			if ("main".equals(stackTraceElement.getMethodName())) {
				return Class.forName(stackTraceElement.getClassName());
			}
		}
	} catch (ClassNotFoundException ex) {
		// Swallow and continue
	}
	return null;
}
```

- 通过方法名是否为 `"main"` 方法，从而判断入口类。

# 3. 小结

至此，SpringApplication 对象的初始化，就已经完成。整个过程，如下图：

![SpringApplication 构造方法](SpringApplication 构造方法.png)

2025-08-25 12:30:55,988 - evaluation_logger_Cross-379 - INFO - turn id  = 4; len(golden_answer) = 5
2025-08-25 12:30:55,988 - evaluation_logger_Cross-379 - INFO - golden_function_calls = [{'name': 'Get_Availability', 'arguments': {'slug': 'proj865ogs44-uss-iowa-ship-shoreline-village-queen-mary-private-day-trip'}}, {'name': 'Search_Taxi', 'arguments': {'pick_up_place_id': 'ChIJd_XJujkx3YARgnik5iZf8bc', 'drop_off_place_id': 'ChIJtU-yE9KwwoAR8a2LaVd7qHc', 'pick_up_date': '2024-11-05', 'pick_up_time': '16:00'}}]
2025-08-25 12:31:01,700 - evaluation_logger_Cross-379 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any of the requested information in the user's query."}
2025-08-25 12:31:08,520 - evaluation_logger_Cross-379 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:31:08,520 - evaluation_logger_Cross-379 - INFO - Message: {'error_type': 'stop_early', 'content': 'Stop early.'}
2025-08-25 12:31:08,520 - evaluation_logger_Cross-379 - INFO - Success turn num = 3
2025-08-25 12:31:08,520 - evaluation_logger_Cross-379 - INFO - ----------------------------------------------------------------------------------------------------
