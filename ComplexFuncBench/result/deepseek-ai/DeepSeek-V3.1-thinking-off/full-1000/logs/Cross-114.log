2025-08-25 11:47:41,152 - evaluation_logger_Cross-114 - INFO - Test Example Cross-114
2025-08-25 11:47:41,153 - evaluation_logger_Cross-114 - INFO - Query: I'd like to book a hotel within 30 kilometers of the Miami International Airport for one night on November 14, 2024. I also need to reserve a car to be picked up from the airport at 9 AM the same day and returned at 4 PM on the third day at the hotel.
2025-08-25 11:47:49,695 - evaluation_logger_Cross-114 - INFO - Function Calls: 
[
    {
        "name": "Location_to_Lat_Long",
        "arguments": {
            "query": "Miami International Airport"
        }
    }
]

2025-08-25 11:47:49,695 - evaluation_logger_Cross-114 - INFO - Golden Function Call: 
[
    {
        "name": "Location_to_Lat_Long",
        "arguments": {
            "query": "Miami International Airport"
        }
    },
    {
        "name": "Search_Hotels_By_Coordinates",
        "arguments": {
            "latitude": "25.7923496",
            "longitude": "-80.28230590000001",
            "arrival_date": "2024-11-14",
            "departure_date": "2024-11-15",
            "radius": 30
        }
    }
]

2025-08-25 11:47:49,695 - evaluation_logger_Cross-114 - INFO - Start compare_single_call: 
{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'Miami International Airport'}}
{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'Miami International Airport'}}
2025-08-25 11:47:49,695 - evaluation_logger_Cross-114 - INFO - Rule-based compare success.
2025-08-25 11:47:49,695 - evaluation_logger_Cross-114 - INFO - Success matched: [{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'Miami International Airport'}}]
2025-08-25 11:47:49,696 - evaluation_logger_Cross-114 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "business_status": "OPERATIONAL",
                "formatted_address": "2100 NW 42nd Ave, Miami, FL 33142, United States",
                "geometry": {
                    "location": {
                        "lat": 25.7923496,
                        "lng": -80.28230590000001
                    },
                    "viewport": {
                        "northeast": {
                            "lat": 25.79872055,
                            "lng": -80.26454035
                        },
                        "southwest": {
                            "lat": 25.79022595,
                            "lng": -80.28822775000002
                        }
                    }
                },
                "name": "Miami International Airport",
                "place_id": "ChIJwUq5Tk232YgR4fiiy-Dan5g",
                "plus_code": {
                    "compound_code": "QPR9+W3 Miami, Florida",
                    "global_code": "76QXQPR9+W3"
                },
                "rating": 3.9,
                "reference": "ChIJwUq5Tk232YgR4fiiy-Dan5g",
                "types": [
                    "airport",
                    "point_of_interest",
                    "establishment"
                ],
                "user_ratings_total": 56307
            }
        ]
    }
]

2025-08-25 11:48:05,796 - evaluation_logger_Cross-114 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotels_By_Coordinates",
        "arguments": {
            "latitude": "25.7923496",
            "longitude": "-80.28230590000001",
            "arrival_date": "2024-11-14",
            "departure_date": "2024-11-15",
            "radius": 30
        }
    },
    {
        "name": "Search_Car_Rentals",
        "arguments": {
            "pick_up_latitude": 25.7923496,
            "pick_up_longitude": -80.28230590000001,
            "drop_off_latitude": 25.7923496,
            "drop_off_longitude": -80.28230590000001,
            "pick_up_date": "2024-11-14",
            "drop_off_date": "2024-11-16",
            "pick_up_time": "09:00",
            "drop_off_time": "16:00"
        }
    }
]

2025-08-25 11:48:05,796 - evaluation_logger_Cross-114 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels_By_Coordinates",
        "arguments": {
            "arrival_date": "2024-11-14",
            "departure_date": "2024-11-15",
            "latitude": "25.7923496",
            "longitude": "-80.28230590000001",
            "radius": 30
        }
    },
    {
        "name": "Search_Car_Rentals",
        "arguments": {
            "pick_up_latitude": 25.7923496,
            "pick_up_longitude": -80.28230590000001,
            "drop_off_latitude": 25.7725664736298,
            "drop_off_longitude": -80.1862585544586,
            "pick_up_date": "2024-11-14",
            "drop_off_date": "2024-11-16",
            "pick_up_time": "09:00",
            "drop_off_time": "16:00"
        }
    }
]

2025-08-25 11:48:06,778 - evaluation_logger_Cross-114 - INFO - Start compare_single_call: 
{'name': 'Search_Hotels_By_Coordinates', 'arguments': {'arrival_date': '2024-11-14', 'departure_date': '2024-11-15', 'latitude': '25.7923496', 'longitude': '-80.28230590000001', 'radius': 30}}
{'name': 'Search_Hotels_By_Coordinates', 'arguments': {'arrival_date': '2024-11-14', 'departure_date': '2024-11-15', 'latitude': '25.7923496', 'longitude': '-80.28230590000001', 'radius': 30}}
2025-08-25 11:48:06,779 - evaluation_logger_Cross-114 - INFO - Rule-based compare success.
2025-08-25 11:48:06,779 - evaluation_logger_Cross-114 - INFO - Start compare_single_call: 
{'name': 'Search_Car_Rentals', 'arguments': {'drop_off_date': '2024-11-16', 'drop_off_latitude': 25.7923496, 'drop_off_longitude': -80.28230590000001, 'drop_off_time': '16:00', 'pick_up_date': '2024-11-14', 'pick_up_latitude': 25.7923496, 'pick_up_longitude': -80.28230590000001, 'pick_up_time': '09:00'}}
{'name': 'Search_Car_Rentals', 'arguments': {'drop_off_date': '2024-11-16', 'drop_off_latitude': 25.7725664736298, 'drop_off_longitude': -80.1862585544586, 'drop_off_time': '16:00', 'pick_up_date': '2024-11-14', 'pick_up_latitude': 25.7923496, 'pick_up_longitude': -80.28230590000001, 'pick_up_time': '09:00'}}
2025-08-25 11:48:06,779 - evaluation_logger_Cross-114 - INFO - {'error_type': 'value_error', 'content': 'Parameter drop_off_latitude value is not correct in prediction.'}
2025-08-25 11:48:06,779 - evaluation_logger_Cross-114 - INFO - Success matched: [{'name': 'Search_Hotels_By_Coordinates', 'arguments': {'arrival_date': '2024-11-14', 'departure_date': '2024-11-15', 'latitude': '25.7923496', 'longitude': '-80.28230590000001', 'radius': 30}}]
2025-08-25 11:48:06,779 - evaluation_logger_Cross-114 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "count": 1347,
            "filters": [
                {
                    "field": "previous",
                    "title": "Your previous filters"
                },
                {
                    "field": "price",
                    "title": "Your budget (for 1 night)"
                },
                {
                    "field": "tdb",
                    "title": "Bed preference"
                },
                {
                    "title": "Room facilities",
                    "field": "roomfacility"
                },
                {
                    "title": "Free cancellation ",
                    "field": "fc"
                }
            ],
            "result": [
                {
                    "hotel_id": 182493,
                    "composite_price_breakdown": {
                        "all_inclusive_amount_hotel_currency": {
                            "currency": "USD",
                            "value": 715.29,
                            "amount_rounded": "US$715",
                            "amount_unrounded": "US$715.29"
                        },
                        "charges_details": {
                            "amount": {
                                "value": 117,
                                "currency": "USD"
                            },
                            "mode": "extra_charges"
                        },
                        "has_long_stays_weekly_rate_price": 0,
                        "excluded_amount": {
                            "amount_unrounded": "US$117.29",
                            "amount_rounded": "US$117",
                            "value": 117.29,
                            "currency": "USD"
                        },
                        "has_long_stays_monthly_rate_price": 0,
                        "price_display_config": [
                            {
                                "value": 0,
                                "key": "use_nightly_prices"
                            }
                        ],
                        "included_taxes_and_charges_amount": {
                            "value": 0,
                            "amount_rounded": "US$0",
                            "currency": "USD",
                            "amount_unrounded": "US$0"
                        },
                        "gross_amount_hotel_currency": {
                            "amount_unrounded": "US$598",
                            "currency": "USD",
                            "amount_rounded": "US$598",
                            "value": 598
                        },
                        "all_inclusive_amount": {
                            "amount_unrounded": "US$715.29",
                            "value": 715.29,
                            "amount_rounded": "US$715",
                            "currency": "USD"
                        },
                        "items": [
                            {
                                "details": "13 % Tax",
                                "inclusion_type": "excluded",
                                "item_amount": {
                                    "amount_rounded": "US$82",
                                    "value": 82.29,
                                    "currency": "USD",
                                    "amount_unrounded": "US$82.29"
                                },
                                "name": "Tax",
                                "base": {
                                    "kind": "percentage",
                                    "percentage": 13
                                },
                                "kind": "charge"
                            },
                            {
                                "kind": "charge",
                                "base": {
                                    "base_amount": 35,
                                    "kind": "per_night"
                                },
                                "inclusion_type": "excluded",
                                "item_amount": {
                                    "amount_unrounded": "US$35",
                                    "currency": "USD",
                                    "amount_rounded": "US$35",
                                    "value": 35
                                },
                                "name": "Service charge"
                            }
                        ],
                        "gross_amount_per_night": {
                            "amount_unrounded": "US$598",
                            "currency": "USD",
                            "amount_rounded": "US$598",
                            "value": 598
                        },
                        "client_translations": {
                            "tooltip_total_text": "Total"
                        },
                        "net_amount": {
                            "currency": "USD",
                            "value": 598,
                            "amount_rounded": "US$598",
                            "amount_unrounded": "US$598"
                        },
                        "gross_amount": {
                            "amount_unrounded": "US$598",
                            "currency": "USD",
                            "value": 598,
                            "amount_rounded": "US$598"
                        }
                    },
                    "city": "Miami (Florida)",
                    "accommodation_type": 204,
                    "hotel_has_vb_boost": 0,
                    "preferred": 1,
                    "main_photo_id": 560810029,
                    "has_swimming_pool": 1,
                    "timezone": "America/New_York",
                    "longitude": -80.1862585544586,
                    "type": "property_card",
                    "review_score": 8.5,
                    "class": 5,
                    "is_tpi_exclusive_property": 0,
                    "class_is_estimated": 0,
                    "currencycode": "USD",
                    "preferred_plus": 0,
                    "hotel_include_breakfast": 0,
                    "is_no_prepayment_block": 1,
                    "review_score_word": "Very good",
                    "id": "property_card_182493",
                    "city_in_trans": "in Miami",
                    "review_nr": 2103,
                    "hotel_name_trans": "InterContinental Miami, an IHG Hotel",
                    "checkin": {
                        "from": "15:00"
                    },
                    "checkout": {
                        "until": "12:00"
                    },
                    "soldout": 0,
                    "default_wishlist_name": "Miami",
                    "unit_configuration_label": "<b>Hotel room</b>: 2 beds",
                    "genius_discount_percentage": 0,
                    "latitude": 25.7725664736298,
                    "extended": 0,
                    "is_genius_deal": 0,
                    "bwallet": {
                        "hotel_eligibility": 0
                    },
                    "ufi": 20023181,
                    "hotel_name": "InterContinental Miami, an IHG Hotel",
                    "is_smart_deal": 0,
                    "last_reservation_data": {
                        "last_reservation_ellapsed_months": 1
                    },
                    "default_language": "en",
                    "min_total_price": 598,
                    "countrycode": "us",
                    "is_free_cancellable": 1,
                    "block_ids": [
                        "18249336_333294300_2_42_0"
                    ]
                }
            ],
            "room_distribution": [
                {
                    "adults": "1"
                }
            ],
            "b_max_los_data": {
                "experiment": "long_stays_ios_extend_los_2",
                "is_fullon": 0,
                "extended_los": 90,
                "default_los": 45,
                "max_allowed_los": 90,
                "has_extended_los": 1
            },
            "extended_count": 0,
            "primary_count": 1347,
            "unfiltered_count": 5255,
            "page_loading_threshold": 10,
            "unfiltered_primary_count": 5255
        }
    },
    {
        "api_status": true,
        "content": "There is a problem with your api call, please double-check for possible problems."
    }
]

2025-08-25 11:49:56,289 - evaluation_logger_Cross-114 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [《精尽 Spring Boot 源码分析 —— SpringApplication》](http://svip.iocoder.cn/Spring-Boot/SpringApplication/) 的**初始化**的源码解析。

在 SpringApplication 实例初始化的过程中，它会做如下几件事情：

1. 推断当前 WEB 应用类型
2. 设置 `applicationContextInitializers` 属性
3. 设置 `applicationListeners` 属性
4. 推断入口类

# 2. 构造方法

SpringApplication 的构造方法，用于初始化。代码如下：

```java
// SpringApplication.java

/**
 * 资源加载器
 */
private ResourceLoader resourceLoader;
/**
 * 主要的 JavaConfig 类们
 */
private Set<Class<?>> primarySources;
/**
 * Web 应用类型
 */
private WebApplicationType webApplicationType;
/**
 * ApplicationContext 初始化器数组
 */
private List<ApplicationContextInitializer<?>> initializers;
/**
 * Application 监听器数组
 */
private List<ApplicationListener<?>> listeners;

public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
	this.resourceLoader = resourceLoader;
	Assert.notNull(primarySources, "PrimarySources must not be null");
	this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
	// 推断 Web 应用类型
	this.webApplicationType = WebApplicationType.deduceFromClasspath();
	// 设置 ApplicationContext 初始化器
	setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
	// 设置 Application 监听器
	setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
	// 推断入口类
	this.mainApplicationClass = deduceMainApplicationClass();
}
```

# 3. 推断 Web 应用类型

`#deduceFromClasspath()` 方法，通过 `classpath` 中，判断是否存在指定的类，从而推断 Web 应用类型。代码如下：

```java
// WebApplicationType.java

private static final String[] SERVLET_INDICATOR_CLASSES = { "javax.servlet.Servlet",
		"org.springframework.web.context.ConfigurableWebApplicationContext" };

private static final String WEBMVC_INDICATOR_CLASS = "org.springframework.web.servlet.DispatcherServlet";

private static final String WEBFLUX_INDICATOR_CLASS = "org.springframework.web.reactive.DispatcherHandler";

private static final String JERSEY_INDICATOR_CLASS = "org.glassfish.jersey.servlet.ServletContainer";

static WebApplicationType deduceFromClasspath() {
	// 如果存在 org.springframework.web.reactive.DispatcherHandler ，并且不存在 org.springframework.web.servlet.DispatcherServlet 和 org.glassfish.jersey.servlet.ServletContainer ，则定义为 WebApplicationType.REACTIVE
	if (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, null) && !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, null)
			&& !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, null)) {
		return WebApplicationType.REACTIVE;
	}
	// 如果不存在 javax.servlet.Servlet 和 org.springframework.web.context.ConfigurableWebApplicationContext 任意一个，则定义为 WebApplicationType.NONE
	for (String className : SERVLET_INDICATOR_CLASSES) {
		if (!ClassUtils.isPresent(className, null)) {
			return WebApplicationType.NONE;
		}
	}
	// 否则，定义为 WebApplicationType.SERVLET
	return WebApplicationType.SERVLET;
}
```

Web 应用类型，通过 `org.springframework.boot.WebApplicationType` 枚举，一共有三种：

- `NONE`：非 Web 项目
- `SERVLET`：基于 Servlet 的 Web 项目
- `REACTIVE`：基于 Reactive 的 Web 项目

# 4. 加载 ApplicationContextInitializer

`#getSpringFactoriesInstances(Class<T> type)` 方法，获得指定类型的数组。代码如下：

```java
// SpringApplication.java

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type) {
	return getSpringFactoriesInstances(type, new Class<?>[] {});
}

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
	ClassLoader classLoader = getClassLoader();
	// Use names and ensure unique to protect against duplicates
	// 加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组
	Set<String> names = new LinkedHashSet<>(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
	// 创建对象们
	List<T> instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
	// 排序
	AnnotationAwareOrderComparator.sort(instances);
	return instances;
}
```

`#getSpringFactoriesInstances(Class<T> type, ...)` 方法，可以拆分成三步：

- 第一步，`SpringFactoriesLoader.loadFactoryNames(type, classLoader)` 方法，加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组。
- 第二步，`#createSpringFactoriesInstances(...)` 方法，创建对象们。
- 第三步，`AnnotationAwareOrderComparator.sort(instances)` 方法，排序对象们。

## 4.1 SpringFactoriesLoader

`org.springframework.core.io.support.SpringFactoriesLoader` ，Spring 工厂加载器。因为 Spring Boot 的 `META-INF/spring.factories` 配置文件，和 Spring 的是一样的，所以 Spring Boot 可以直接使用该工具类。

`#loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader)` 方法，加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组。代码如下：

```java
// SpringFactoriesLoader.java

public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";

public static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {
	String factoryClassName = factoryClass.getName();
	// 加载指定 FACTORIES_RESOURCE_LOCATION 配置，获得 properties
	// 然后，获得 factoryClassName 对应的值，然后进行分割成数组
	return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());
}

private static Map<String, List<String>> loadSpringFactories(ClassLoader classLoader) {
	Map<String, List<String>> result = cache.get(classLoader);
	if (result != null) {
		return result;
	}

	result = new HashMap<>();
	try {
		// 加载 FACTORIES_RESOURCE_LOCATION
		Enumeration<URL> urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);
		while (urls.hasMoreElements()) {
			URL url = urls.nextElement();
			UrlResource resource = new UrlResource(url);
			Properties properties = PropertiesLoaderUtils.loadProperties(resource);
			for (Map.Entry<?, ?> entry : properties.entrySet()) {
				String factoryClassName = ((String) entry.getKey()).trim();
				// 分割
				String[] factoryClassNames = StringUtils.commaDelimitedListToStringArray((String) entry.getValue());
				for (String factoryName : factoryClassNames) {
					result.computeIfAbsent(factoryClassName, key -> new ArrayList<>()).add(factoryName.trim());
				}
			}
		}
		// 去重
		result.replaceAll((factoryClass, implementations) -> implementations.stream().distinct()
				.collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList)));
		cache.put(classLoader, result);
	} catch (IOException ex) {
		throw new IllegalArgumentException("Unable to load factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex);
	}
	return result;
}
```

- 比较简单，胖友自己瞅瞅。

## 4.2 createSpringFactoriesInstances

`#createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names)` 方法，创建对象们。代码如下：

```java
// SpringApplication.java

private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes,
		ClassLoader classLoader, Object[] args, Set<String> names) {
	// 创建对象数组
	List<T> instances = new ArrayList<>(names.size());
	// 遍历 names 数组
	for (String name : names) {
		try {
			// 获得 name 对应的类
			Class<?> instanceClass = ClassUtils.forName(name, classLoader);
			// 判断类是否实现自 type
			Assert.isAssignable(type, instanceClass);
			// 获得构造方法
			Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
			// 创建对象
			T instance = (T) BeanUtils.instantiateClass(constructor, args);
			instances.add(instance);
		} catch (Throwable ex) {
			throw new IllegalArgumentException("Cannot instantiate " + type + " : " + name, ex);
		}
	}
	return instances;
}
```

- 比较简单，胖友自己瞅瞅。

## 4.3 排序

`org.springframework.core.annotation.AnnotationAwareOrderComparator` ，排序器。因为 `ApplicationContextInitializer` 可能设置了 `@Order` 注解，所以需要进行排序。

# 5. 加载 ApplicationListener

和 [「4. 加载 ApplicationContextInitializer」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 一样，也是使用 `#getSpringFactoriesInstances(Class<T> type)` 方法。

# 6. 推断入口类

`#deduceMainApplicationClass()` 方法，通过当前调用栈，推断入口类。代码如下：

```java
// SpringApplication.java

private Class<?> deduceMainApplicationClass() {
	try {
		// 获得当前调用栈
		StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();
		// 遍历，判断哪个执行 main 方法
		for (StackTraceElement stackTraceElement : stackTrace) {
			if ("main".equals(stackTraceElement.getMethodName())) {
				return Class.forName(stackTraceElement.getClassName());
			}
		}
	} catch (ClassNotFoundException ex) {
		// Swallow and continue
	}
	return null;
}
```

# 7. 小结

至此，SpringApplication 的初始化完成。后续，我们开始看看 `#run(String... args)` 方法，SpringApplication 的启动。

另外，本文涉及到的类，胖友可以后续再去看看：

- `ApplicationContextInitializer`
- `ApplicationListener`

2025-08-25 11:50:00,947 - evaluation_logger_Cross-114 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about booking a hotel or reserving a car.'}
2025-08-25 11:50:07,660 - evaluation_logger_Cross-114 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 11:50:07,660 - evaluation_logger_Cross-114 - INFO - Message: [{'error_type': 'value_error', 'content': 'Parameter drop_off_latitude value is not correct in prediction.'}]
2025-08-25 11:50:07,660 - evaluation_logger_Cross-114 - INFO - Success turn num = 2
2025-08-25 11:50:07,660 - evaluation_logger_Cross-114 - INFO - ----------------------------------------------------------------------------------------------------
