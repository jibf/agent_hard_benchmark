2025-08-25 12:55:17,183 - evaluation_logger_Attraction-21 - INFO - Test Example Attraction-21
2025-08-25 12:55:17,183 - evaluation_logger_Attraction-21 - INFO - Query: I came across the Arc de Triomphe on social media. That's dope. Could you provide me with more detailed information about it?
2025-08-25 12:55:25,417 - evaluation_logger_Attraction-21 - INFO - Function Calls: 
[
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Arc de Triomphe"
        }
    }
]

2025-08-25 12:55:25,417 - evaluation_logger_Attraction-21 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Arc de Triomphe"
        }
    },
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "pr7jepixwlvr-private-guided-tour-orsay-museum-rare-languages"
        }
    }
]

2025-08-25 12:55:25,417 - evaluation_logger_Attraction-21 - INFO - Start compare_single_call: 
{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Arc de Triomphe'}}
{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Arc de Triomphe'}}
2025-08-25 12:55:25,417 - evaluation_logger_Attraction-21 - INFO - Rule-based compare success.
2025-08-25 12:55:25,417 - evaluation_logger_Attraction-21 - INFO - Success matched: [{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Arc de Triomphe'}}]
2025-08-25 12:55:25,417 - evaluation_logger_Attraction-21 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "products": [
                {
                    "id": "eyJwaW5uZWRQcm9kdWN0IjoiUFI3SkVQaVh3TFZyIiwidWZpIjotMTQ1NjkyOH0=",
                    "__typename": "AttractionsSearchProductSuggestion",
                    "title": "Arc de Triomphe : Private guided tour with ticket included",
                    "productId": "PR7JEPiXwLVr",
                    "productSlug": "pr7jepixwlvr-private-guided-tour-orsay-museum-rare-languages",
                    "taxonomySlug": "tours",
                    "cityUfi": -1456928,
                    "cityName": "Paris",
                    "countryCode": "fr"
                }
            ]
        }
    }
]

2025-08-25 12:55:35,488 - evaluation_logger_Attraction-21 - INFO - Function Calls: 
[
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "pr7jepixwlvr-private-guided-tour-orsay-museum-rare-languages"
        }
    }
]

2025-08-25 12:55:35,488 - evaluation_logger_Attraction-21 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "pr7jepixwlvr-private-guided-tour-orsay-museum-rare-languages"
        }
    }
]

2025-08-25 12:55:35,488 - evaluation_logger_Attraction-21 - INFO - Start compare_single_call: 
{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'pr7jepixwlvr-private-guided-tour-orsay-museum-rare-languages'}}
{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'pr7jepixwlvr-private-guided-tour-orsay-museum-rare-languages'}}
2025-08-25 12:55:35,488 - evaluation_logger_Attraction-21 - INFO - Rule-based compare success.
2025-08-25 12:55:35,488 - evaluation_logger_Attraction-21 - INFO - Success matched: [{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'pr7jepixwlvr-private-guided-tour-orsay-museum-rare-languages'}}]
2025-08-25 12:55:35,488 - evaluation_logger_Attraction-21 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "__typename": "AttractionsProduct",
            "additionalInfo": "Service animals allowed\n\nPublic transportation options are available nearby\n\nSuitable for all physical fitness levels\n\nStairs of 284 steps to access the terrace. An elevator is available only to those who need it, without the need to reserve in advance.\n\nNot wheelchair accessible\n\nPlease bring your ticket with you to the attraction.\n\nBe aware that operators may cancel for unforeseen reasons.\n\nYou need to be 18 years or older to book or be accompanied by an adult. ",
            "applicableTerms": [
                {
                    "__typename": "TermsConditions",
                    "policyProvider": "Booking.com"
                },
                {
                    "__typename": "TermsConditions",
                    "policyProvider": "Viator"
                }
            ],
            "cancellationPolicy": {
                "__typename": "AttractionsCancellationPolicy",
                "hasFreeCancellation": true
            },
            "description": "Embark on a captivating journey through the heart of Paris with our exclusive Private Guided Tour of the Arc de Triomphe. This immersive 2-hour experience offers a deep dive into the history, significance, and architectural brilliance of one of the city's most iconic landmarks.\n\nThe tour extends to the pinnacle of the monument, granting you access to breathtaking panoramic views of the City of Light. From this vantage point, capture the splendor of Paris as it unfolds before you, with landmarks like the Eiffel Tower, Champs-Élysées, and more painting a picturesque skyline.\n\nWhether you're a history enthusiast, architecture lover, or simply seeking to immerse yourself in the cultural richness of Paris, our Private Guided Tour of the Arc de Triomphe promises a memorable and enriching experience. Book now to secure your spot and create lasting memories in the heart of this enchanting city.",
            "id": "PR7JEPiXwLVr",
            "isBookable": true,
            "labels": [
                {
                    "__typename": "AttractionsLabel",
                    "text": "Free cancellation",
                    "type": "free_cancellation"
                }
            ],
            "name": "Arc de Triomphe : Private guided tour with ticket included",
            "notIncluded": [
                "Transportation - food and beverages - amenities - tips"
            ],
            "offers": [
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFFMvbM4kUBj"
                },
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFRYkXlbMnGi"
                }
            ],
            "onSiteRequirements": {
                "__typename": "OnSiteRequirements"
            },
            "operatedBy": "AKOPSO",
            "representativePrice": {
                "__typename": "AttractionsPrice",
                "chargeAmount": 410.38,
                "currency": "USD",
                "publicAmount": 410.38
            },
            "reviews": {
                "__typename": "AttractionsGetReviewsResponse",
                "total": 0
            },
            "slug": "pr7jepixwlvr-private-guided-tour-orsay-museum-rare-languages",
            "supportedFeatures": {
                "__typename": "AttractionsProductSupportedFeatures",
                "nativeApp": true,
                "nativeAppBookProcess": false,
                "liveAvailabilityCheckSupported": true
            },
            "ufiDetails": {
                "__typename": "AttractionLocationResponse",
                "ufi": -1456928,
                "bCityName": "Paris"
            },
            "whatsIncluded": [
                "Entrance ticket to the rooftop",
                "Services of an expert guide"
            ]
        }
    }
]

2025-08-25 12:57:53,353 - evaluation_logger_Attraction-21 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [《精尽 Spring Boot 源码分析 —— SpringApplication》](http://svip.iocoder.cn/Spring-Boot/SpringApplication/) 的**初始化**的源码解析。

在 SpringApplication 实例初始化的过程中，它会进行一些初始化的动作。本质上，就是**收集各种配置信息到其属性**，为后续的进一步初始化做准备。

# 2. 构造方法

SpringApplication 的构造方法，主要代码如下：

```java
// SpringApplication.java

/**
 * 资源加载器
 */
private ResourceLoader resourceLoader;
/**
 * 主要的 Java Config 类的数组
 */
private Set<Class<?>> primarySources;
/**
 * Web 应用类型
 */
private WebApplicationType webApplicationType;
/**
 * 应用上下文初始化器（ApplicationContextInitializer）数组
 */
private List<ApplicationContextInitializer<?>> initializers;
/**
 * 应用事件监听器（ApplicationListener）数组
 */
private List<ApplicationListener<?>> listeners;

public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
    this.resourceLoader = resourceLoader;
    Assert.notNull(primarySources, "PrimarySources must not be null");
    this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
    // <1> 判断 Web 应用类型
    this.webApplicationType = WebApplicationType.deduceFromClasspath();
    // <2> 设置初始化器（ApplicationContextInitializer）
    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
    // <3> 设置监听器（ApplicationListener）
    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
    // <4> 推导主类（main class）
    this.mainApplicationClass = deduceMainApplicationClass();
}
```

- `resourceLoader` 属性，资源加载器。可以暂时不理解，后续文章会详细解析。

- `primarySources` 属性，主要的 Java Config 类的数组。在文初提供的示例中，就是 `DemoApplication` 类。

- `webApplicationType` 属性，调用 `WebApplicationType#deduceFromClasspath()` 方法，判断 Web 应用类型。详细解析，见 [「2.1 WebApplicationType」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `initializers` 属性，应用上下文初始化器（ApplicationContextInitializer）数组。通过 `<2>` 处，进行初始化。详细解析，见 [「2.2 设置初始化器」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `listeners` 属性，应用事件监听器（ApplicationListener）数组。通过 `<3>` 处，进行初始化。详细解析，见 [「2.3 设置监听器」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `mainApplicationClass` 属性，调用 `#deduceMainApplicationClass()` 方法，推导主类（main class）。详细解析，见 [「2.4 推导主类」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

## 2.1 WebApplicationType

`org.springframework.boot.WebApplicationType` ，Web 应用类型枚举。代码如下：

```java
// WebApplicationType.java

public enum WebApplicationType {

    /**
     * 非 Web 项目
     */
    NONE,
    /**
     * 基于 Servlet 的 Web 项目
     */
    SERVLET,
    /**
     * 基于 Reactive 的 Web 项目
     */
    REACTIVE;

    private static final String[] SERVLET_INDICATOR_CLASSES = { "javax.servlet.Servlet",
            "org.springframework.web.context.ConfigurableWebApplicationContext" };

    private static final String WEBMVC_INDICATOR_CLASS = "org.springframework.web.servlet.DispatcherServlet";
    private static final String WEBFLUX_INDICATOR_CLASS = "org.springframework.web.reactive.DispatcherHandler";
    private static final String JERSEY_INDICATOR_CLASS = "org.glassfish.jersey.servlet.ServletContainer";
    private static final String SERVLET_APPLICATION_CONTEXT_CLASS = "org.springframework.web.context.WebApplicationContext";
    private static final String REACTIVE_APPLICATION_CONTEXT_CLASS = "org.springframework.boot.web.reactive.context.ReactiveWebApplicationContext";

    /**
     * 通过 classpath ，判断 Web 应用类型
     *
     * @return Web 应用类型
     */
    static WebApplicationType deduceFromClasspath() {
        // 如果存在 org.springframework.web.reactive.DispatcherHandler ，并且不存在 org.springframework.web.servlet.DispatcherServlet 和 org.glassfish.jersey.servlet.ServletContainer ，则返回 REACTIVE
        if (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, null) && !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, null)
                && !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, null)) {
            return WebApplicationType.REACTIVE;
        }
        // 如果不存在 javax.servlet.Servlet 和 org.springframework.web.context.ConfigurableWebApplicationContext ，则返回 NONE
        for (String className : SERVLET_INDICATOR_CLASSES) {
            if (!ClassUtils.isPresent(className, null)) {
                return WebApplicationType.NONE;
            }
        }
        // 否则，返回 SERVLET
        return WebApplicationType.SERVLET;
    }

}
```

- 根据 classpath 中，是否存在相应的类，进行判断。
- 三种类型，胖友自己看下代码注释。

## 2.2 设置初始化器

在 `<2>` 处，会设置初始化器（ApplicationContextInitializer）。代码如下：

```java
// SpringApplication.java

public void setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers) {
	this.initializers = new ArrayList<>(initializers);
}
```

- 那么，`getSpringFactoriesInstances(ApplicationContextInitializer.class)` 方法，是如何获得初始化器的呢？详细解析，见 [「2.2.1 getSpringFactoriesInstances」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

### 2.2.1 getSpringFactoriesInstances

`#getSpringFactoriesInstances(Class<T> type)` 方法，获得指定类型的类对应的对象们。代码如下：

```java
// SpringApplication.java

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type) {
    return getSpringFactoriesInstances(type, new Class<?>[] {});
}

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
    ClassLoader classLoader = getClassLoader();
    // Use names and ensure unique to protect against duplicates
    // <1> 加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组
    Set<String> names = new LinkedHashSet<>(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    // <2> 创建对象们
    List<T> instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    // <3> 排序对象们
    AnnotationAwareOrderComparator.sort(instances);
    return instances;
}
```

- `<1>` 处，调用 `SpringFactoriesLoader#loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader)` 方法，加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组。

  - 在 `spring-boot` 项目中的 `META-INF/spring.factories` 文件中，`ApplicationContextInitializer` 对应如下：

    ```properties
    # Application Context Initializers
    org.springframework.context.ApplicationContextInitializer=\
    org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\
    org.springframework.boot.context.ContextIdApplicationContextInitializer,\
    org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\
    org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer
    ```

  - 在 `spring-boot-autoconfigure` 项目中的 `META-INF/spring.factories` 文件中，`ApplicationContextInitializer` 对应如下：

    ```properties
    # Initializers
    org.springframework.context.ApplicationContextInitializer=\
    org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\
    org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener
    ```

  - 这样，我们就获得了 6 个初始化器。

- `<2>` 处，调用 `#createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names)` 方法，创建对象们。代码如下：

  ```java
  // SpringApplication.java
  
  private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes,
  		ClassLoader classLoader, Object[] args, Set<String> names) {
  	List<T> instances = new ArrayList<>(names.size());
  	for (String name : names) {
  		try {
  			Class<?> instanceClass = ClassUtils.forName(name, classLoader);
  			Assert.isAssignable(type, instanceClass);
  			Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
  			T instance = (T) BeanUtils.instantiateClass(constructor, args);
  			instances.add(instance);
  		} catch (Throwable ex) {
  			throw new IllegalArgumentException("Cannot instantiate " + type + " : " + name, ex);
  		}
  	}
  	return instances;
  }
  ```

  - 通过反射，创建对象。

- `<3>` 处，调用 `AnnotationAwareOrderComparator#sort(List<?> list)` 方法，排序对象们。因为，`ApplicationContextInitializer` 是支持排序的，即可以实现 `Ordered` 接口，或者使用 `@Order` 注解。

## 2.3 设置监听器

在 `<3>` 处，会设置监听器（ApplicationListener）。代码如下：

```java
// SpringApplication.java

public void setListeners(Collection<? extends ApplicationListener<?>> listeners) {
	this.listeners = new ArrayList<>(listeners);
}
```

- 那么，`getSpringFactoriesInstances(ApplicationListener.class)` 方法，是如何获得监听器的呢？答案和 [「2.2.1 getSpringFactoriesInstances」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 是**类似**的。

  - 在 `spring-boot` 项目中的 `META-INF/spring.factories` 文件中，`ApplicationListener` 对应如下：

    ```properties
    # Application Listeners
    org.springframework.context.ApplicationListener=\
    org.springframework.boot.ClearCachesApplicationListener,\
    org.springframework.boot.builder.ParentContextCloserApplicationListener,\
    org.springframework.boot.context.FileEncodingApplicationListener,\
    org.springframework.boot.context.config.AnsiOutputApplicationListener,\
    org.springframework.boot.context.config.ConfigFileApplicationListener,\
    org.springframework.boot.context.config.DelegatingApplicationListener,\
    org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\
    org.springframework.boot.context.logging.LoggingApplicationListener,\
    org.springframework.boot.liquibase.LiquibaseServiceApplicationListener
    ```

  - 在 `spring-boot-autoconfigure` 项目中的 `META-INF/spring.factories` 文件中，`ApplicationListener` 没有对应的。

  - 这样，我们就获得了 9 个监听器。

## 2.4 推导主类

在 `<4>` 处，调用 `#deduceMainApplicationClass()` 方法，推导主类（main class）。代码如下：

```java
// SpringApplication.java

private Class<?> deduceMainApplicationClass() {
	try {
		// 获得当前 Stack 中，首个包含 main 方法的类
		StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();
		for (StackTraceElement stackTraceElement : stackTrace) {
			if ("main".equals(stackTraceElement.getMethodName())) {
				return Class.forName(stackTraceElement.getClassName());
			}
		}
	} catch (ClassNotFoundException ex) {
		// Swallow and continue
	}
	return null;
}
```

- 通过获取当前 Stack 中，首个包含 `"main"` 方法的类，获得主类。

# 3. 小结

至此，SpringApplication 实例已经初始化完成。我们来简单总结下：

- 主要是收集各种配置信息到其属性，为后续的进一步初始化做准备。
- 其中，`initializers` 和 `listeners` 这两个属性，是通过 Spring `FactoriesLoader` 机制，进行加载。后续，我们也会看到这个机制在 Spring Boot 里被大量使用。

另外，SpringApplication 还提供了一些 `#run(...)` 方法，用于运行 Spring 应用。我们在下一篇文章，详细解析。

2025-08-25 12:58:00,354 - evaluation_logger_Attraction-21 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about the Arc de Triomphe.'}
2025-08-25 12:58:06,266 - evaluation_logger_Attraction-21 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:58:06,266 - evaluation_logger_Attraction-21 - INFO - Message: Success.
2025-08-25 12:58:06,266 - evaluation_logger_Attraction-21 - INFO - Success turn num = 2
2025-08-25 12:58:06,266 - evaluation_logger_Attraction-21 - INFO - ----------------------------------------------------------------------------------------------------
