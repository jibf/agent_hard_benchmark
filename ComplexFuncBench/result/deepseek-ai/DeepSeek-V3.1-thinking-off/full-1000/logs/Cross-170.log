2025-08-25 11:54:57,801 - evaluation_logger_Cross-170 - INFO - Test Example Cross-170
2025-08-25 11:54:57,801 - evaluation_logger_Cross-170 - INFO - Query: Aden is going to stay at Pudong Shangri-La in Shanghai (hotel_id is 181422). Could you recommend some attractions near the hotel and provide detailed descriptions of the attractions?
2025-08-25 11:55:09,505 - evaluation_logger_Cross-170 - INFO - Function Calls: 
[
    {
        "name": "Get_Popular_Attraction_Near_By",
        "arguments": {
            "hotel_id": "181422"
        }
    }
]

2025-08-25 11:55:09,505 - evaluation_logger_Cross-170 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Popular_Attraction_Near_By",
        "arguments": {
            "hotel_id": "181422"
        }
    }
]

2025-08-25 11:55:09,505 - evaluation_logger_Cross-170 - INFO - Start compare_single_call: 
{'name': 'Get_Popular_Attraction_Near_By', 'arguments': {'hotel_id': '181422'}}
{'name': 'Get_Popular_Attraction_Near_By', 'arguments': {'hotel_id': '181422'}}
2025-08-25 11:55:09,505 - evaluation_logger_Cross-170 - INFO - Rule-based compare success.
2025-08-25 11:55:09,505 - evaluation_logger_Cross-170 - INFO - Success matched: [{'name': 'Get_Popular_Attraction_Near_By', 'arguments': {'hotel_id': '181422'}}]
2025-08-25 11:55:09,505 - evaluation_logger_Cross-170 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "closest_landmarks": [
                {
                    "latitude": 31.239688,
                    "tag": "Oriental Pearl Tower",
                    "total_votes": 326,
                    "longitude": 121.499754,
                    "distance": 0.300347662687368,
                    "average_out_of_10": 8.8
                }
            ]
        }
    }
]

2025-08-25 11:55:19,522 - evaluation_logger_Cross-170 - INFO - Function Calls: 
[
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Oriental Pearl Tower"
        }
    }
]

2025-08-25 11:55:19,522 - evaluation_logger_Cross-170 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Attraction_Location",
        "arguments": {
            "query": "Oriental Pearl Tower"
        }
    },
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "prz1xpmyzjoq-oriental-pearl-tower-tickets-booking"
        }
    }
]

2025-08-25 11:55:19,522 - evaluation_logger_Cross-170 - INFO - Start compare_single_call: 
{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Oriental Pearl Tower'}}
{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Oriental Pearl Tower'}}
2025-08-25 11:55:19,523 - evaluation_logger_Cross-170 - INFO - Rule-based compare success.
2025-08-25 11:55:19,523 - evaluation_logger_Cross-170 - INFO - Success matched: [{'name': 'Search_Attraction_Location', 'arguments': {'query': 'Oriental Pearl Tower'}}]
2025-08-25 11:55:19,523 - evaluation_logger_Cross-170 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "products": [
                {
                    "id": "eyJwaW5uZWRQcm9kdWN0IjoiUFJ6MXhwTXl6Sm9xIiwidWZpIjotMTkyNDQ2NX0=",
                    "__typename": "AttractionsSearchProductSuggestion",
                    "title": "Oriental Pearl Tower Tickets Booking",
                    "productId": "PRz1xpMyzJoq",
                    "productSlug": "prz1xpmyzjoq-oriental-pearl-tower-tickets-booking",
                    "taxonomySlug": "activities",
                    "cityUfi": -1924465,
                    "cityName": "Shanghai",
                    "countryCode": "cn"
                }
            ]
        }
    }
]

2025-08-25 11:55:30,280 - evaluation_logger_Cross-170 - INFO - Function Calls: 
[
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "prz1xpmyzjoq-oriental-pearl-tower-tickets-booking"
        }
    }
]

2025-08-25 11:55:30,280 - evaluation_logger_Cross-170 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Attraction_Details",
        "arguments": {
            "slug": "prz1xpmyzjoq-oriental-pearl-tower-tickets-booking"
        }
    }
]

2025-08-25 11:55:30,280 - evaluation_logger_Cross-170 - INFO - Start compare_single_call: 
{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'prz1xpmyzjoq-oriental-pearl-tower-tickets-booking'}}
{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'prz1xpmyzjoq-oriental-pearl-tower-tickets-booking'}}
2025-08-25 11:55:30,280 - evaluation_logger_Cross-170 - INFO - Rule-based compare success.
2025-08-25 11:55:30,280 - evaluation_logger_Cross-170 - INFO - Success matched: [{'name': 'Get_Attraction_Details', 'arguments': {'slug': 'prz1xpmyzjoq-oriental-pearl-tower-tickets-booking'}}]
2025-08-25 11:55:30,280 - evaluation_logger_Cross-170 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "__typename": "AttractionsProduct",
            "additionalInfo": "Public transportation options are available nearby\n\nSuitable for all physical fitness levels\n\nBook & pay online, get confirmation with QR code later, show QR code at the entrance.\n\nOpening Hours: The Tower: 08:00-22:00 (stop admission at 21:30)\n\nEntrance Location: The Tower: 4.2M Entrance\n\nFree of charge for children under 100cm. Children between 100cm and 140cm enjoy discounted price.\n\nFor the buffet dinner, please be on time. Reservation would be cancelled 30 mins after the starting time if you don’t show up, and no cancelation, refund, or change can be made.\n\nNot wheelchair accessible\n\nPlease bring your ticket with you to the attraction.\n\nBe aware that operators may cancel for unforeseen reasons.\n\nYou need to be 18 years or older to book or be accompanied by an adult. ",
            "applicableTerms": [
                {
                    "__typename": "TermsConditions",
                    "policyProvider": "Booking.com"
                },
                {
                    "__typename": "TermsConditions",
                    "policyProvider": "Viator"
                }
            ],
            "cancellationPolicy": {
                "__typename": "AttractionsCancellationPolicy",
                "hasFreeCancellation": true
            },
            "description": "Oriental Pearl Tower is the most-visited attraction in Shanghai, which has the functions of urban tourism, fashion catering, shopping, entertainment and historical exhibitions.\n\nThere is the magical space capsule makes you feel like in space and the Sky Galleria to have a visual enjoyment in high place of the tower. There is also the completely transparent observatory. \n\nThe indoor VR roller coaster, with the theme of flying over Shanghai, breaks through the limitations on vision and senses of traditional roller coaster, and is more exciting, more shocking and more interesting.\n\nRevolving Restaurant in the tower is the Asia's largest aerial revolving restaurant, offering buffets with Southeast Asian, Japanese, Chinese, European and American cuisines. Overlooking from a high altitude while enjoy dishes, you can have a clear sweeping view of Huangpu River.\n\nYou can also have a chance to learn the 700-year history of the city at the Shanghai History Museum at the 0M Hall.",
            "id": "PRz1xpMyzJoq",
            "isBookable": true,
            "labels": [
                {
                    "__typename": "AttractionsLabel",
                    "text": "Free cancellation",
                    "type": "free_cancellation"
                }
            ],
            "name": "Oriental Pearl Tower Tickets Booking",
            "offers": [
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFTdj56RqcBa"
                },
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFQagMOtVabX"
                },
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFLD1LKC73Sx"
                },
                {
                    "__typename": "Offer",
                    "availabilityType": "date_time",
                    "id": "OFJp3CXL3qZC"
                }
            ],
            "onSiteRequirements": {
                "__typename": "OnSiteRequirements"
            },
            "operatedBy": "Travel China Guide",
            "representativePrice": {
                "__typename": "AttractionsPrice",
                "chargeAmount": 43,
                "currency": "USD",
                "publicAmount": 43
            },
            "reviews": {
                "__typename": "AttractionsGetReviewsResponse",
                "total": 0
            },
            "slug": "prz1xpmyzjoq-oriental-pearl-tower-tickets-booking",
            "supportedFeatures": {
                "__typename": "AttractionsProductSupportedFeatures",
                "nativeApp": true,
                "nativeAppBookProcess": false,
                "liveAvailabilityCheckSupported": true
            },
            "ufiDetails": {
                "__typename": "AttractionLocationResponse",
                "ufi": -1924465,
                "bCityName": "Shanghai"
            },
            "whatsIncluded": [
                "0M - Shanghai History Museum",
                "259M - Transparent Observatory",
                "351M - Space Capsule, for Three Balls Ticket only",
                "263M - Sightseeing Galleria",
                "78M - Updating City Dynamic Ring Multimedia Show"
            ]
        }
    }
]

2025-08-25 11:57:39,205 - evaluation_logger_Cross-170 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 前言

在上一篇文章中，我们实现了`axios`的请求和响应拦截器功能，并且为它们编写了对应的测试用例。接下来，我们就来实现`axios`的配置化，所谓配置化，就是可以让用户在使用的时候可以传入一些我们预先定义好的配置，生成一个`axios`实例，后续所有通过该实例发送的请求都会应用这些配置。

# 2. 需求分析

我们希望`axios`对象上有一个`create`方法，该方法可以接受一个配置对象，然后根据该配置生成一个新的`axios`实例，该实例拥有和`axios`对象上一样的方法，但是每个方法发送请求的时候都会应用传入的配置。例如：

```javascript
// 创建一个axios实例instance，该实例的配置为传入的配置对象
const instance = axios.create({
  baseURL: "https://some-domain.com/api/",
  timeout: 1000,
  headers: { "X-Custom-Header": "foobar" },
});
```

然后，我们通过该实例发送请求的时候，都会应用这些配置：

```javascript
instance.get("/user", {
  timeout: 5000,
});
```

那么，这个请求的配置就是：

```javascript
{
  baseURL: "https://some-domain.com/api/",
  timeout: 5000,
  headers: { "X-Custom-Header": "foobar" },
  url: "/user",
  method: "get"
}
```

注意：如果我们在发送请求的时候也传入了配置，那么该配置会与创建实例时的配置进行合并，并且请求传入的配置会覆盖创建实例时的配置。

# 3. 实现思路

根据需求分析，我们需要在`axios`对象上添加一个`create`方法，该方法返回一个函数，该函数就是`axios`实例，并且该函数上还有`axios`对象上的所有方法，例如`get`、`post`等。

那么，我们该如何实现呢？其实，我们之前创建的`axios`对象本身就是一个函数，并且该函数上还有`get`、`post`等方法。所以，我们只需要创建一个函数，然后将`axios`对象上的所有方法都复制到该函数上，并且该函数在发送请求的时候会合并默认配置和请求配置即可。

# 4. 代码实现

## 4.1 创建`create`接口类型

首先，我们在`src/types/index.ts`中为`axios`对象添加`create`静态接口。

```typescript
export interface AxiosStatic extends AxiosInstance {
  create(config?: AxiosRequestConfig): AxiosInstance;
}
```

## 4.2 实现`create`方法

然后，我们在`src/axios.ts`中实现`create`方法。

```typescript
axios.create = function(config) {
  return createInstance(mergeConfig(defaults, config));
};
```

可以看到，`create`方法接收一个配置对象，然后调用`createInstance`函数，并将默认配置和传入的配置合并后传入。`createInstance`函数就是我们之前创建`axios`实例的函数，我们在`src/axios.ts`中将其提取出来。

```typescript
function createInstance(config: AxiosRequestConfig): AxiosInstance {
  const context = new Axios(config);
  const instance = Axios.prototype.request.bind(context);

  extend(instance, context);

  return instance as AxiosInstance;
}

const axios = createInstance(defaults);
```

这样，我们就实现了`create`方法。

## 4.3 默认配置

我们之前定义了一个`defaults`常量，它包含了默认的配置。现在，我们将其提取到`src/defaults.ts`中，方便其他地方使用。

`src/defaults.ts`：

```typescript
import { AxiosRequestConfig } from "./types";

const defaults: AxiosRequestConfig = {
  timeout: 0,
  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
    },
  },
};

const methodsNoData = ["delete", "get", "head", "options"];

methodsNoData.forEach((method) => {
  defaults.headers[method] = {};
});

const methodsWithData = ["post", "put", "patch"];

methodsWithData.forEach((method) => {
  defaults.headers[method] = {
    "Content-Type": "application/x-www-form-urlencoded",
  };
});

export default defaults;
```

然后，在`src/axios.ts`中引入：

```typescript
import defaults from "./defaults";
```

## 4.4 合并配置

我们之前实现了配置的合并，但是之前的合并策略是简单的覆盖，现在我们需要实现更加复杂的合并策略，例如对于`headers`，我们需要进行深度的合并，而不是简单的覆盖。

所以，我们需要修改`mergeConfig`函数，使其能够对`headers`进行深度合并。

我们在`src/helpers/mergeConfig.ts`中实现：

```typescript
import { AxiosRequestConfig } from "../types";
import { deepMerge, isPlainObject } from "./util";

const strats = Object.create(null);

function defaultStrat(val1: any, val2: any): any {
  return typeof val2 !== "undefined" ? val2 : val1;
}

function fromVal2Strat(val1: any, val2: any): any {
  if (typeof val2 !== "undefined") {
    return val2;
  }
}

function deepMergeStrat(val1: any, val2: any): any {
  if (isPlainObject(val2)) {
    return deepMerge(val1, val2);
  } else if (typeof val2 !== "undefined") {
    return val2;
  } else if (isPlainObject(val1)) {
    return deepMerge(val1);
  } else if (typeof val1 !== "undefined") {
    return val1;
  }
}

const stratKeysFromVal2 = ["url", "params", "data"];

stratKeysFromVal2.forEach((key) => {
  strats[key] = fromVal2Strat;
});

const stratKeysDeepMerge = ["headers"];

stratKeysDeepMerge.forEach((key) => {
  strats[key] = deepMergeStrat;
});

export default function mergeConfig(
  config1: AxiosRequestConfig,
  config2?: AxiosRequestConfig
): AxiosRequestConfig {
  if (!config2) {
    config2 = {};
  }

  const config = Object.create(null);

  for (let key in config2) {
    mergeField(key);
  }

  for (let key in config1) {
    if (!config2[key]) {
      mergeField(key);
    }
  }

  function mergeField(key: string): void {
    const strat = strats[key] || defaultStrat;
    config[key] = strat(config1[key], config2![key]);
  }

  return config;
}
```

我们定义了一个`strats`对象，该对象包含了不同属性的合并策略。对于`url`、`params`、`data`，我们使用`fromVal2Strat`策略，即如果`config2`中有该属性，则使用`config2`中的值，否则使用`config1`中的值。对于`headers`，我们使用`deepMergeStrat`策略，即如果`config2`中的`headers`是一个普通对象，则与`config1`中的`headers`进行深度合并，否则使用`config2`中的`headers`。对于其他属性，我们使用`defaultStrat`策略，即如果`config2`中有该属性，则使用`config2`中的值，否则使用`config1`中的值。

## 4.5 修改`Axios`类

我们之前实现的`Axios`类中，`request`方法在发送请求的时候，会合并默认配置和请求配置。现在，我们需要修改`Axios`类，使其在合并配置的时候使用我们新的合并策略。

我们在`src/core/Axios.ts`中修改`request`方法：

```typescript
  request(config: AxiosRequestConfig): AxiosPromise {
    config = mergeConfig(this.defaults, config);
    // ...
  }
```

然后，在`src/core/Axios.ts`中引入`mergeConfig`：

```typescript
import mergeConfig from "../helpers/mergeConfig";
```

# 5. 编写测试用例

我们为`create`方法编写测试用例，在`test/axios.create.spec.ts`中：

```typescript
import axios from "../src/index";

describe("axios.create", () => {
  it("should create a new instance of axios", () => {
    const instance = axios.create();
    expect(instance).toBeDefined();
    expect(instance instanceof Function).toBeTruthy();
    expect(instance.get).toBeDefined();
    expect(instance.post).toBeDefined();
    expect(instance.put).toBeDefined();
    expect(instance.delete).toBeDefined();
    expect(instance.head).toBeDefined();
    expect(instance.options).toBeDefined();
    expect(instance.patch).toBeDefined();
  });

  it("should create a new instance of axios with config", () => {
    const instance = axios.create({
      baseURL: "https://example.com",
      timeout: 1000,
    });
    expect(instance.defaults.baseURL).toBe("https://example.com");
    expect(instance.defaults.timeout).toBe(1000);
  });

  it("should use the config of the instance", () => {
    const instance = axios.create({
      baseURL: "https://example.com",
      timeout: 1000,
    });
    instance.get("/user").then((res) => {
      expect(res.config.baseURL).toBe("https://example.com");
      expect(res.config.timeout).toBe(1000);
    });
  });

  it("should merge the config of the instance and the request", () => {
    const instance = axios.create({
      baseURL: "https://example.com",
      timeout: 1000,
    });
    instance
      .get("/user", {
        timeout: 2000,
      })
      .then((res) => {
        expect(res.config.baseURL).toBe("https://example.com");
        expect(res.config.timeout).toBe(2000);
      });
  });

  it("should merge the headers of the instance and the request", () => {
    const instance = axios.create({
      headers: {
        common: {
          Accept: "application/json",
        },
        get: {
          "X-Test": "test",
        },
      },
    });
    instance.get("/user", {
      headers: {
        "X-Test2": "test2",
      },
    });
    expect(instance.defaults.headers.common.Accept).toBe("application/json");
    expect(instance.defaults.headers.get["X-Test"]).toBe("test");
  });
});
```

然后运行测试：

```bash
npm run test
```

测试结果：

![](~@/axios/15/01.png)

# 6. 总结

至此，我们就实现了`axios`的配置化功能。我们通过`create`方法创建了一个新的`axios`实例，该实例拥有和`axios`对象一样的方法，但是每个方法发送请求的时候都会应用传入的配置。并且，我们在发送请求的时候也可以传入配置，该配置会与创建实例时的配置进行合并，并且请求传入的配置会覆盖创建实例时的配置。

在下一篇文章中，我们将实现`axios`的取消功能。


2025-08-25 11:57:44,948 - evaluation_logger_Cross-170 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about attractions near the hotel or provide detailed descriptions of the attractions.'}
2025-08-25 11:57:50,946 - evaluation_logger_Cross-170 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 11:57:50,946 - evaluation_logger_Cross-170 - INFO - Message: Success.
2025-08-25 11:57:50,946 - evaluation_logger_Cross-170 - INFO - Success turn num = 3
2025-08-25 11:57:50,946 - evaluation_logger_Cross-170 - INFO - ----------------------------------------------------------------------------------------------------
