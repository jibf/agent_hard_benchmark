2025-08-25 13:25:22,586 - evaluation_logger_Flights-75 - INFO - Test Example Flights-75
2025-08-25 13:25:22,586 - evaluation_logger_Flights-75 - INFO - Query: We're planning to leave Miami on December 5th, 2024, and travel to Amsterdam. After staying in Amsterdam for two days, we'll go to Wellington, then return to Miami on December 19th, 2024. I'm looking for the cheapest first class flights for this time period. If the ticket price is over 1600 dollars, we won't stay in Amsterdam. Instead, check the lowest price for a direct round-trip from Miami to Wellington during this time.
2025-08-25 13:25:32,440 - evaluation_logger_Flights-75 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Miami"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Amsterdam"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Wellington"
        }
    }
]

2025-08-25 13:25:32,440 - evaluation_logger_Flights-75 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Miami"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Amsterdam"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Wellington"
        }
    },
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "FIRST",
            "legs": [
                {
                    "fromId": "MIA.CITY",
                    "toId": "AMS.AIRPORT",
                    "date": "2024-12-05"
                },
                {
                    "fromId": "AMS.AIRPORT",
                    "toId": "WLG.AIRPORT",
                    "date": "2024-12-07"
                },
                {
                    "fromId": "WLG.AIRPORT",
                    "toId": "MIA.CITY",
                    "date": "2024-12-19"
                }
            ]
        }
    }
]

2025-08-25 13:25:32,440 - evaluation_logger_Flights-75 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Miami'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Miami'}}
2025-08-25 13:25:32,440 - evaluation_logger_Flights-75 - INFO - Rule-based compare success.
2025-08-25 13:25:32,440 - evaluation_logger_Flights-75 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Amsterdam'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Amsterdam'}}
2025-08-25 13:25:32,440 - evaluation_logger_Flights-75 - INFO - Rule-based compare success.
2025-08-25 13:25:32,440 - evaluation_logger_Flights-75 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Wellington'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Wellington'}}
2025-08-25 13:25:32,440 - evaluation_logger_Flights-75 - INFO - Rule-based compare success.
2025-08-25 13:25:32,440 - evaluation_logger_Flights-75 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Miami'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Amsterdam'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Wellington'}}]
2025-08-25 13:25:32,441 - evaluation_logger_Flights-75 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "MIA.CITY",
                "type": "CITY",
                "name": "Miami",
                "code": "MIA",
                "regionName": "Florida",
                "country": "US",
                "countryName": "United States"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "AMS.AIRPORT",
                "type": "AIRPORT",
                "name": "Schiphol Airport",
                "code": "AMS",
                "city": "AMS",
                "cityName": "Amsterdam",
                "regionName": "Noord-Holland",
                "country": "NL",
                "countryName": "Netherlands",
                "countryNameShort": "Netherlands",
                "distanceToCity": {
                    "value": 11.396990072691436,
                    "unit": "km"
                },
                "parent": "AMS"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "WLG.AIRPORT",
                "type": "AIRPORT",
                "name": "Wellington Airport",
                "code": "WLG",
                "city": "WLG",
                "cityName": "Wellington",
                "regionName": "Wellington",
                "country": "NZ",
                "countryName": "New Zealand",
                "countryNameShort": "New Zealand",
                "distanceToCity": {
                    "value": 5.3442830955984375,
                    "unit": "km"
                },
                "parent": "WLG"
            }
        ]
    }
]

2025-08-25 13:25:46,234 - evaluation_logger_Flights-75 - INFO - Function Calls: 
[
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "FIRST",
            "legs": [
                {
                    "fromId": "MIA.CITY",
                    "toId": "AMS.AIRPORT",
                    "date": "2024-12-05"
                },
                {
                    "fromId": "AMS.AIRPORT",
                    "toId": "WLG.AIRPORT",
                    "date": "2024-12-07"
                },
                {
                    "fromId": "WLG.AIRPORT",
                    "toId": "MIA.CITY",
                    "date": "2024-12-19"
                }
            ]
        }
    }
]

2025-08-25 13:25:46,234 - evaluation_logger_Flights-75 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "FIRST",
            "legs": [
                {
                    "fromId": "MIA.CITY",
                    "toId": "AMS.AIRPORT",
                    "date": "2024-12-05"
                },
                {
                    "fromId": "AMS.AIRPORT",
                    "toId": "WLG.AIRPORT",
                    "date": "2024-12-07"
                },
                {
                    "fromId": "WLG.AIRPORT",
                    "toId": "MIA.CITY",
                    "date": "2024-12-19"
                }
            ]
        }
    },
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "FIRST",
            "fromId": "MIA.CITY",
            "toId": "WLG.AIRPORT",
            "departDate": "2024-12-05",
            "returnDate": "2024-12-19"
        }
    }
]

2025-08-25 13:25:46,234 - evaluation_logger_Flights-75 - INFO - Start compare_single_call: 
{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'FIRST', 'legs': [{'fromId': 'MIA.CITY', 'toId': 'AMS.AIRPORT', 'date': '2024-12-05'}, {'fromId': 'AMS.AIRPORT', 'toId': 'WLG.AIRPORT', 'date': '2024-12-07'}, {'fromId': 'WLG.AIRPORT', 'toId': 'MIA.CITY', 'date': '2024-12-19'}]}}
{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'FIRST', 'legs': [{'fromId': 'MIA.CITY', 'toId': 'AMS.AIRPORT', 'date': '2024-12-05'}, {'fromId': 'AMS.AIRPORT', 'toId': 'WLG.AIRPORT', 'date': '2024-12-07'}, {'fromId': 'WLG.AIRPORT', 'toId': 'MIA.CITY', 'date': '2024-12-19'}]}}
2025-08-25 13:25:46,234 - evaluation_logger_Flights-75 - INFO - Rule-based compare success.
2025-08-25 13:25:46,234 - evaluation_logger_Flights-75 - INFO - Success matched: [{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'FIRST', 'legs': [{'fromId': 'MIA.CITY', 'toId': 'AMS.AIRPORT', 'date': '2024-12-05'}, {'fromId': 'AMS.AIRPORT', 'toId': 'WLG.AIRPORT', 'date': '2024-12-07'}, {'fromId': 'WLG.AIRPORT', 'toId': 'MIA.CITY', 'date': '2024-12-19'}]}}]
2025-08-25 13:25:46,234 - evaluation_logger_Flights-75 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "departureDate": "2024-11-30",
                "returnDate": "2024-12-14",
                "searchDates": [
                    "2024-11-30",
                    "2024-12-02",
                    "2024-12-14"
                ],
                "offsetDays": -5,
                "isCheapest": true,
                "price": {
                    "currencyCode": "USD",
                    "units": 2336,
                    "nanos": 50000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2337,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-01",
                "returnDate": "2024-12-15",
                "searchDates": [
                    "2024-12-01",
                    "2024-12-03",
                    "2024-12-15"
                ],
                "offsetDays": -4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2456,
                    "nanos": 870000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2457,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-02",
                "returnDate": "2024-12-16",
                "searchDates": [
                    "2024-12-02",
                    "2024-12-04",
                    "2024-12-16"
                ],
                "offsetDays": -3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2401,
                    "nanos": 720000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2402,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-03",
                "returnDate": "2024-12-17",
                "searchDates": [
                    "2024-12-03",
                    "2024-12-05",
                    "2024-12-17"
                ],
                "offsetDays": -2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2760,
                    "nanos": 260000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2761,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-04",
                "returnDate": "2024-12-18",
                "searchDates": [
                    "2024-12-04",
                    "2024-12-06",
                    "2024-12-18"
                ],
                "offsetDays": -1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2644,
                    "nanos": 910000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2645,
                    "nanos": 0
                }
            }
        ]
    }
]

2025-08-25 13:25:58,231 - evaluation_logger_Flights-75 - INFO - Function Calls: 
[
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "FIRST",
            "fromId": "MIA.CITY",
            "toId": "WLG.AIRPORT",
            "departDate": "2024-12-05",
            "returnDate": "2024-12-19"
        }
    }
]

2025-08-25 13:25:58,231 - evaluation_logger_Flights-75 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "FIRST",
            "departDate": "2024-12-05",
            "fromId": "MIA.CITY",
            "returnDate": "2024-12-19",
            "toId": "WLG.AIRPORT"
        }
    }
]

2025-08-25 13:25:58,231 - evaluation_logger_Flights-75 - INFO - Start compare_single_call: 
{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'FIRST', 'departDate': '2024-12-05', 'fromId': 'MIA.CITY', 'returnDate': '2024-12-19', 'toId': 'WLG.AIRPORT'}}
{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'FIRST', 'departDate': '2024-12-05', 'fromId': 'MIA.CITY', 'returnDate': '2024-12-19', 'toId': 'WLG.AIRPORT'}}
2025-08-25 13:25:58,231 - evaluation_logger_Flights-75 - INFO - Rule-based compare success.
2025-08-25 13:25:58,231 - evaluation_logger_Flights-75 - INFO - Success matched: [{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'FIRST', 'departDate': '2024-12-05', 'fromId': 'MIA.CITY', 'returnDate': '2024-12-19', 'toId': 'WLG.AIRPORT'}}]
2025-08-25 13:25:58,231 - evaluation_logger_Flights-75 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "timestamp": 1729422428675,
        "data": [
            {
                "departureDate": "2024-11-30",
                "returnDate": "2024-12-14",
                "searchDates": [
                    "2024-11-30",
                    "2024-12-14"
                ],
                "offsetDays": -5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1865,
                    "nanos": 670000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1866,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-01",
                "returnDate": "2024-12-15",
                "searchDates": [
                    "2024-12-01",
                    "2024-12-15"
                ],
                "offsetDays": -4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1939,
                    "nanos": 510000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1940,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-02",
                "returnDate": "2024-12-16",
                "searchDates": [
                    "2024-12-02",
                    "2024-12-16"
                ],
                "offsetDays": -3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1928,
                    "nanos": 810000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1929,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-03",
                "returnDate": "2024-12-17",
                "searchDates": [
                    "2024-12-03",
                    "2024-12-17"
                ],
                "offsetDays": -2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1847,
                    "nanos": 750000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1848,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-04",
                "returnDate": "2024-12-18",
                "searchDates": [
                    "2024-12-04",
                    "2024-12-18"
                ],
                "offsetDays": -1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1818,
                    "nanos": 960000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1819,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-05",
                "returnDate": "2024-12-19",
                "searchDates": [
                    "2024-12-05",
                    "2024-12-19"
                ],
                "offsetDays": 0,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2214,
                    "nanos": 460000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2215,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-06",
                "returnDate": "2024-12-20",
                "searchDates": [
                    "2024-12-06",
                    "2024-12-20"
                ],
                "offsetDays": 1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1964,
                    "nanos": 370000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1965,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-07",
                "returnDate": "2024-12-21",
                "searchDates": [
                    "2024-12-07",
                    "2024-12-21"
                ],
                "offsetDays": 2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2931,
                    "nanos": 410000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2932,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-08",
                "returnDate": "2024-12-22",
                "searchDates": [
                    "2024-12-08",
                    "2024-12-22"
                ],
                "offsetDays": 3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2486,
                    "nanos": 370000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2487,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-09",
                "returnDate": "2024-12-23",
                "searchDates": [
                    "2024-12-09",
                    "2024-12-23"
                ],
                "offsetDays": 4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2106,
                    "nanos": 710000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2107,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-12-10",
                "returnDate": "2024-12-24",
                "searchDates": [
                    "2024-12-10",
                    "2024-12-24"
                ],
                "offsetDays": 5,
                "isCheapest": true,
                "price": {
                    "currencyCode": "USD",
                    "units": 1634,
                    "nanos": 80000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1635,
                    "nanos": 0
                }
            }
        ]
    }
]

2025-08-25 13:29:11,702 - evaluation_logger_Flights-75 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 前言

在上一篇文章中，我们实现了`axios`的请求和响应配置化，即用户可以配置`url`、`method`、`params`、`data`、`headers`、`timeout`、`responseType`等等。另外，我们还实现了配置的默认值以及配置的合并策略。那么接下来，我们就来实现`axios`的核心功能：拦截器。

# 2. 拦截器介绍

`axios` 拦截器的作用是用于我们在发送每次请求或者得到响应后，进行对应的处理。比如：

- 在发送请求之前给请求头添加`token`字段
- 在发送请求之前显示`loading`动画
- 在响应之后隐藏`loading`动画
- 在响应之后对响应数据进行格式化
- ...

`axios` 为我们提供了请求拦截器和响应拦截器来分别处理请求和响应，它们的作用如下：

- **请求拦截器**：该类拦截器的作用是在请求发送前统一执行某些操作，比如在请求头中添加 `token` 字段。
- **响应拦截器**：该类拦截器的作用是在接收到服务器响应后统一执行某些操作，比如发现响应状态码为 `401` 时，自动跳转到登录页。

在具体实现方面，`axios` 的拦截器机制的设计思路如下：

- 在 `axios` 对象上有一个 `interceptors` 对象属性，该属性又有 `request` 和 `response` 2 个属性，它们对外提供了 `use` 方法来注册拦截器函数，其中 `use` 方法支持 2 个参数，第一个参数是处理成功情况的函数，第二个参数是处理失败情况的函数。
- 我们可以设置多个拦截器，拦截器的执行顺序是：对于请求拦截器，后添加的拦截器会在请求前的过程中先执行；对于响应拦截器，先添加的拦截器会在响应后先执行。

# 3. 使用示例

我们先来看下 `axios` 拦截器的使用示例：

```javascript
// 添加一个请求拦截器
axios.interceptors.request.use(
  function(config) {
    // 在发送请求之前可以做一些事情
    return config;
  },
  function(error) {
    // 处理请求错误
    return Promise.reject(error);
  }
);

// 添加一个响应拦截器
axios.interceptors.response.use(
  function(response) {
    // 处理响应数据
    return response;
  },
  function(error) {
    // 处理响应错误
    return Promise.reject(error);
  }
);
```

如果我们想移除已添加的拦截器，可以这样：

```javascript
const myInterceptor = axios.interceptors.request.use(function() {
  /*...*/
});
axios.interceptors.request.eject(myInterceptor);
```

# 4. 实现思路

从上面的示例中，我们可以总结出以下几点：

- `axios` 对象上有一个 `interceptors` 对象属性，该属性又有 `request` 和 `response` 2 个属性；
- `request` 和 `response` 属性对外提供了 `use` 方法来注册拦截器函数，`use` 方法支持 2 个参数，第一个参数是处理成功情况的函数，第二个参数是处理失败情况的函数；
- `use` 方法会返回一个拦截器 `id`，以便后续可以使用 `eject` 方法移除该拦截器；
- 我们可以设置多个拦截器，拦截器的执行顺序是：对于请求拦截器，后添加的拦截器会在请求前的过程中先执行；对于响应拦截器，先添加的拦截器会在响应后先执行。

OK，根据以上总结，我们就可以来动手实现拦截器了。

# 5. 拦截器管理类

由于 `axios` 对象上的 `interceptors` 对象属性中的 `request` 和 `response` 属性都是一个拦截器管理对象，所以我们可以先实现一个拦截器管理类，用来实现添加拦截器和删除拦截器的逻辑。

我们在 `src` 目录下创建一个 `core` 目录，用来存放核心代码，然后在 `core` 目录下创建 `InterceptorManager.ts` 文件，在该文件中实现拦截器管理类。

## 5.1 接口定义

首先，我们先来定义拦截器管理类中的接口。

我们知道，`use` 方法支持 2 个参数，第一个参数是处理成功情况的函数，第二个参数是处理失败情况的函数，并且会返回一个拦截器 `id`，以便后续可以使用 `eject` 方法移除该拦截器。所以，我们先来定义 `use` 方法的参数函数接口：

```typescript
export interface ResolvedFn<T = any> {
  (val: T): T | Promise<T>;
}

export interface RejectedFn {
  (error: any): any;
}
```

然后，再定义单个拦截器的接口：

```typescript
export interface Interceptor<T = any> {
  resolved: ResolvedFn<T>;
  rejected?: RejectedFn;
}
```

最后，定义拦截器管理类的接口：

```typescript
export interface InterceptorManager<T = any> {
  interceptors: Array<Interceptor<T> | null>;
  use(resolved: ResolvedFn<T>, rejected?: RejectedFn): number;
  eject(id: number): void;
}
```

## 5.2 实现

接口定义好之后，我们就可以来实现拦截器管理类了，代码如下：

```typescript
import { ResolvedFn, RejectedFn, Interceptor, InterceptorManager } from "../types";

export default class InterceptorManager<T> implements InterceptorManager<T> {
  // 存储拦截器的数组
  private interceptors: Array<Interceptor<T> | null>;

  constructor() {
    this.interceptors = [];
  }

  // 添加拦截器
  use(resolved: ResolvedFn<T>, rejected?: RejectedFn): number {
    this.interceptors.push({
      resolved,
      rejected
    });
    return this.interceptors.length - 1;
  }

  // 遍历拦截器
  forEach(fn: (interceptor: Interceptor<T>) => void): void {
    this.interceptors.forEach(interceptor => {
      if (interceptor !== null) {
        fn(interceptor);
      }
    });
  }

  // 删除拦截器
  eject(id: number): void {
    if (this.interceptors[id]) {
      this.interceptors[id] = null;
    }
  }
}
```

我们创建了一个 `InterceptorManager` 类，它实现了 `InterceptorManager<T>` 接口。该类内部维护了一个私有属性 `interceptors`，它是一个数组，用来存储拦截器。该类还对外提供了 3 个公共方法：

- `use`：添加拦截器到拦截器数组中，并返回一个 `id` 用于删除；
- `forEach`：遍历拦截器数组；
- `eject`：根据 `id` 删除某个拦截器；

# 6. 修改 Axios 类型定义

由于我们给 `axios` 对象添加了 `interceptors` 属性，所以我们需要在 `Axios` 类型中添加上该属性，我们在 `src/types/index.ts` 中修改 `Axios` 类型，如下：

```typescript
import { InterceptorManager } from "./interceptor";

export interface Axios {
  interceptors: {
    request: InterceptorManager<AxiosRequestConfig>;
    response: InterceptorManager<AxiosResponse>;
  };
  request(config: AxiosRequestConfig): AxiosPromise;

  get(url: string, config?: AxiosRequestConfig): AxiosPromise;

  delete(url: string, config?: AxiosRequestConfig): AxiosPromise;

  head(url: string, config?: AxiosRequestConfig): AxiosPromise;

  options(url: string, config?: AxiosRequestConfig): AxiosPromise;

  post(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;

  put(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;

  patch(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise;
}
```

另外，我们还需要把拦截器相关的接口定义从 `InterceptorManager.ts` 中移到 `src/types/index.ts` 中，以便其他地方使用，如下：

```typescript
export interface ResolvedFn<T = any> {
  (val: T): T | Promise<T>;
}

export interface RejectedFn {
  (error: any): any;
}

export interface Interceptor<T = any> {
  resolved: ResolvedFn<T>;
  rejected?: RejectedFn;
}

export interface InterceptorManager<T = any> {
  interceptors: Array<Interceptor<T> | null>;
  use(resolved: ResolvedFn<T>, rejected?: RejectedFn): number;
  eject(id: number): void;
  forEach(fn: (interceptor: Interceptor<T>) => void): void;
}
```

# 7. 实现 Axios 类

接下来，我们在 `Axios` 类中实现 `interceptors` 逻辑。

首先，我们在 `src/core` 目录下创建 `Axios.ts` 文件，然后在该文件中创建 `Axios` 类，如下：

```typescript
import {
  AxiosPromise,
  AxiosRequestConfig,
  AxiosResponse,
  ResolvedFn,
  RejectedFn
} from "../types";
import dispatchRequest from "./dispatchRequest";
import InterceptorManager from "./InterceptorManager";

interface Interceptors {
  request: InterceptorManager<AxiosRequestConfig>;
  response: InterceptorManager<AxiosResponse>;
}

interface PromiseChain<T> {
  resolved: ResolvedFn<T> | ((config: AxiosRequestConfig) => AxiosPromise);
  rejected?: RejectedFn;
}

export default class Axios {
  defaults: AxiosRequestConfig;
  interceptors: Interceptors;

  constructor(initConfig: AxiosRequestConfig) {
    this.defaults = initConfig;
    this.interceptors = {
      request: new InterceptorManager<AxiosRequestConfig>(),
      response: new InterceptorManager<AxiosResponse>()
    };
  }

  request(config: AxiosRequestConfig): AxiosPromise {
    // 待实现
  }

  get(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("get", url, config);
  }

  delete(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("delete", url, config);
  }

  head(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("head", url, config);
  }

  options(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("options", url, config);
  }

  post(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithData("post", url, data, config);
  }

  put(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithData("put", url, data, config);
  }

  patch(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithData("patch", url, data, config);
  }

  _requestMethodWithoutData(
    method: string,
    url: string,
    config?: AxiosRequestConfig
  ) {
    return this.request(
      Object.assign(config || {}, {
        method,
        url
      })
    );
  }

  _requestMethodWithData(
    method: string,
    url: string,
    data?: any,
    config?: AxiosRequestConfig
  ) {
    return this.request(
      Object.assign(config || {}, {
        method,
        url,
        data
      })
    );
  }
}
```

在 `Axios` 类中，我们定义了 `interceptors` 属性，并且在构造函数中给该属性初始化赋值。

接下来，我们就要实现最核心的 `request` 方法了，该方法不仅要处理请求的发送，还要处理拦截器的执行。

# 8. 实现 request 方法

`request` 方法的实现思路如下：

- 首先，把请求的发送划分为两个阶段：请求拦截器和真正发送请求阶段、响应拦截器和响应数据处理阶段；
- 然后，每个阶段都可以看成是由一个个函数组成的函数链，链上的每个函数都可以在前一个函数执行完成后再执行；
- 最后，我们需要把拦截器中的函数和发送请求的函数组合成一个函数链，然后依次执行。

具体步骤如下：

1. 首先，我们创建一个数组 `chain`，默认存放发送请求的函数 `dispatchRequest`；
2. 然后，把请求拦截器中的函数从后往前依次插入到 `chain` 的前面；
3. 接着，把响应拦截器中的函数依次 `push` 到 `chain` 的后面；
4. 最后，通过 `Promise` 从前往后依次执行 `chain` 中的函数。

另外，我们还要注意：请求拦截器中的函数是异步的，需要返回 `config`，然后传递给下一个函数；响应拦截器中的函数也是异步的，需要返回 `response`，然后传递给下一个函数。

OK，思路理清之后，我们就可以来实现 `request` 方法了，代码如下：

```typescript
request(config: AxiosRequestConfig): AxiosPromise {
  // 初始化执行链数组，默认放置一个发送请求的函数
  let chain: PromiseChain<any>[] = [
    {
      resolved: dispatchRequest,
      rejected: undefined
    }
  ];

  // 请求拦截器：从后往前将拦截器中的函数插入到执行链的前面
  this.interceptors.request.forEach(interceptor => {
    chain.unshift(interceptor);
  });

  // 响应拦截器：从前往后将拦截器中的函数插入到执行链的后面
  this.interceptors.response.forEach(interceptor => {
    chain.push(interceptor);
  });

  // 初始化一个Promise，resolve参数为config
  let promise = Promise.resolve(config);

  // 循环执行链
  while (chain.length) {
    const { resolved, rejected } = chain.shift()!;
    promise = promise.then(resolved, rejected);
  }

  return promise;
}
```

# 9. 修改默认配置

由于我们把 `Axios` 类中 `defaults` 的默认配置移到了 `Axios` 类中，所以我们需要修改创建 `axios` 实例时的默认配置，我们在 `src/axios.ts` 中修改，如下：

```typescript
import { AxiosInstance } from "./types";
import Axios from "./core/Axios";
import { extend } from "./helpers/util";
import defaults from "./defaults";

function createInstance(config: AxiosRequestConfig): AxiosInstance {
  const context = new Axios(config);
  const instance = Axios.prototype.request.bind(context);

  extend(instance, context);

  return instance as AxiosInstance;
}

const axios = createInstance(defaults);

export default axios;
```

我们给 `createInstance` 函数传入 `defaults` 默认配置，然后在 `Axios` 类的构造函数中接收该配置。

# 10. demo 编写

好了，拦截器实现完毕之后，我们就来编写 `demo` 测试下效果。

我们在 `examples` 目录下创建 `interceptor.html`，代码如下：

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>interceptor demo</title>
  </head>
  <body>
    <script src="/__build__/interceptor.js"></script>
  </body>
</html>
```

接着，在 `examples/app.ts` 中引入 `interceptor` 的入口文件：

```javascript
import "./interceptor";
```

然后，在 `examples` 目录下创建 `interceptor.ts`，代码如下：

```typescript
import axios from "../../src/axios";

axios.interceptors.request.use(config => {
  config.headers.test += "1";
  return config;
});
axios.interceptors.request.use(config => {
  config.headers.test += "2";
  return config;
});
axios.interceptors.request.use(config => {
  config.headers.test += "3";
  return config;
});

axios.interceptors.response.use(res => {
  res.data += "1";
  return res;
});
let interceptor = axios.interceptors.response.use(res => {
  res.data += "2";
  return res;
});
axios.interceptors.response.use(res => {
  res.data += "3";
  return res;
});

axios.interceptors.response.eject(interceptor);

axios({
  url: "/api/interceptor",
  method: "get",
  headers: {
    test: ""
  }
}).then(res => {
  console.log(res.data);
});
```

在该 `demo` 中，我们添加了 3 个请求拦截器，分别在请求头 `headers` 的 `test` 字段上添加了 `1`、`2`、`3`，所以最终 `test` 字段的值是 `321`；然后我们又添加了 3 个响应拦截器，分别在响应数据后面添加了 `1`、`2`、`3`，但是随后我们又删除了第二个响应拦截器，所以最终响应数据后面只添加了 `1` 和 `3`。

最后，我们在命令行中执行：

```bash
# 同时开启客户端和服务端
npm run server | npm start
```

接着，我们打开浏览器，访问：http://localhost:8000/，接着点击 `interceptor`，通过 `F12` 的控制台我们可以看到：请求头发送的 `test` 字段的值是 `321`，并且响应数据后面被添加了 `13`，如下：

![](~@/axios/08/01.png)

![](~@/axios/08/02.png)

OK，拦截器测试成功！

# 11. 遗留问题

我们虽然已经实现了拦截器，但是目前还存在一个问题：如果我们把 `Axios` 类中 `request` 方法里的 `chain` 数组打印出来，我们会发现它里面除了有我们添加的拦截器函数外，还有一个 `dispatchRequest` 函数，这个函数就是发送请求的函数，但是目前我们还没有实现，所以接下来我们就来实现这个函数。

# 12. 总结

本篇文章中，我们实现了 `axios` 的拦截器功能。我们首先定义了拦截器管理类 `InterceptorManager`，然后修改了 `Axios` 类的类型定义，接着在 `Axios` 类中实现了 `interceptors` 逻辑，最后实现了 `request` 方法，该方法通过 `Promise` 链式调用实现了拦截器的执行顺序。

另外，我们还编写了 `demo` 测试了拦截器的效果，测试结果符合预期。

下一篇文章，我们将实现 `axios` 的核心功能：发送请求。


2025-08-25 13:29:19,103 - evaluation_logger_Flights-75 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about flights or ticket prices.'}
2025-08-25 13:29:25,388 - evaluation_logger_Flights-75 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 13:29:25,388 - evaluation_logger_Flights-75 - INFO - Message: Success.
2025-08-25 13:29:25,388 - evaluation_logger_Flights-75 - INFO - Success turn num = 3
2025-08-25 13:29:25,388 - evaluation_logger_Flights-75 - INFO - ----------------------------------------------------------------------------------------------------
