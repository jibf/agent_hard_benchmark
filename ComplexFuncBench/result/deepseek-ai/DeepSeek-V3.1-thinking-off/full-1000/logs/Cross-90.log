2025-08-25 11:43:14,369 - evaluation_logger_Cross-90 - INFO - Test Example Cross-90
2025-08-25 11:43:14,369 - evaluation_logger_Cross-90 - INFO - Query: I want to leave Munich for Frankfurt to visit my friends on November 18, 2024. Help me look up the best air tickets. Also, arrange a taxi for me to get to and from the airport. I'm planning to leave Munich Marriott Hotel for the airport at 10 AM. The taxi should wait at the Frankfurt airport when the plane lands and take me to InterContinental Hotel Frankfurt.
2025-08-25 11:43:25,088 - evaluation_logger_Cross-90 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Munich"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Frankfurt"
        }
    }
]

2025-08-25 11:43:25,088 - evaluation_logger_Cross-90 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Munich"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Frankfurt"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Munich Marriott Hotel"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "InterContinental Hotel Frankfurt"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Munich Airport"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Frankfurt Airport"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "MUC.AIRPORT",
            "toId": "FRA.AIRPORT",
            "departDate": "2024-11-18",
            "sort": "BEST"
        }
    }
]

2025-08-25 11:43:25,088 - evaluation_logger_Cross-90 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Munich'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Munich'}}
2025-08-25 11:43:25,088 - evaluation_logger_Cross-90 - INFO - Rule-based compare success.
2025-08-25 11:43:25,088 - evaluation_logger_Cross-90 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Frankfurt'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Frankfurt'}}
2025-08-25 11:43:25,088 - evaluation_logger_Cross-90 - INFO - Rule-based compare success.
2025-08-25 11:43:25,088 - evaluation_logger_Cross-90 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Munich'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Frankfurt'}}]
2025-08-25 11:43:25,088 - evaluation_logger_Cross-90 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "MUC.AIRPORT",
                "type": "AIRPORT",
                "name": "Munich Airport",
                "code": "MUC",
                "city": "MUC",
                "cityName": "Munich",
                "regionName": "Bavaria",
                "country": "DE",
                "countryName": "Germany",
                "countryNameShort": "Germany",
                "distanceToCity": {
                    "value": 28.798998050497513,
                    "unit": "km"
                },
                "parent": "MUC"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "FRA.AIRPORT",
                "type": "AIRPORT",
                "name": "Frankfurt Airport",
                "code": "FRA",
                "city": "FRA",
                "cityName": "Frankfurt/Main",
                "regionName": "Hessen",
                "country": "DE",
                "countryName": "Germany",
                "countryNameShort": "Germany",
                "distanceToCity": {
                    "value": 10.387837882211127,
                    "unit": "km"
                },
                "parent": "FRA"
            }
        ]
    }
]

2025-08-25 11:43:37,260 - evaluation_logger_Cross-90 - INFO - Function Calls: 
[
    {
        "name": "Search_Flights",
        "arguments": {
            "fromId": "MUC.AIRPORT",
            "toId": "FRA.AIRPORT",
            "departDate": "2024-11-18",
            "sort": "BEST"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Munich Marriott Hotel"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Frankfurt Airport"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "InterContinental Hotel Frankfurt"
        }
    }
]

2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Golden Function Call: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Munich Marriott Hotel"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "InterContinental Hotel Frankfurt"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Munich Airport"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Frankfurt Airport"
        }
    },
    {
        "name": "Search_Flights",
        "arguments": {
            "departDate": "2024-11-18",
            "fromId": "MUC.AIRPORT",
            "sort": "BEST",
            "toId": "FRA.AIRPORT"
        }
    },
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJ4WMz6Ep0nkcRWGN3f0Wc7Uw",
            "drop_off_place_id": "ChIJRW3aI1kTnkcRS89WOoV6xeM",
            "pick_up_date": "2024-11-18",
            "pick_up_time": "10:00"
        }
    },
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJeflCVHQLvUcRMfP4IU3YdIo",
            "drop_off_place_id": "ChIJ84g_-AAMvUcR6er9IWN1h4A",
            "pick_up_date": "2024-11-18",
            "pick_up_time": "13:05"
        }
    }
]

2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Start compare_single_call: 
{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-18', 'fromId': 'MUC.AIRPORT', 'sort': 'BEST', 'toId': 'FRA.AIRPORT'}}
{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-18', 'fromId': 'MUC.AIRPORT', 'sort': 'BEST', 'toId': 'FRA.AIRPORT'}}
2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Rule-based compare success.
2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Munich Marriott Hotel'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Munich Marriott Hotel'}}
2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Rule-based compare success.
2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Frankfurt Airport'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Frankfurt Airport'}}
2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Rule-based compare success.
2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'InterContinental Hotel Frankfurt'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'InterContinental Hotel Frankfurt'}}
2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Rule-based compare success.
2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Success matched: [{'name': 'Search_Flights', 'arguments': {'departDate': '2024-11-18', 'fromId': 'MUC.AIRPORT', 'sort': 'BEST', 'toId': 'FRA.AIRPORT'}}, {'name': 'Taxi_Search_Location', 'arguments': {'query': 'Munich Marriott Hotel'}}, {'name': 'Taxi_Search_Location', 'arguments': {'query': 'Frankfurt Airport'}}, {'name': 'Taxi_Search_Location', 'arguments': {'query': 'InterContinental Hotel Frankfurt'}}]
2025-08-25 11:43:37,261 - evaluation_logger_Cross-90 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "flightOffers": [
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QbW-CMBSFf437RqFAeTFpFgK6Lbwsso7NfWmwVsCpNbSbjl-_CqY35zzn3tw2aavUWc5Nc3fomlZJ40eCRijR1IoDJo7mrteyEeK7OzVm3fVm_h4vywgGxWtlQtPQh83Xj_yqDNkz_NBtOKixEYbhhJJhB73duccecJcI2lWZjC0mFHYBgp_kuYoLAqdmj59SgsJ4TFucJ_LyOkR-TnK_2K_8gizX1aL9WA3lV5moz2JxkdVQ5lmygO_JWuakWhV7qfIhkhkp0iy2rno2kGbmJLrGazljGALg-uH0qKgldtw7M4WhNeFW4beMJHkwRT3wkGeP4Yqh4wToQfIDZ6oTp5T_4ewZWsjQ3yN-bdcgMzuuv4_dWWmYOZGuhlpa21Frmt5sQ4MvbWyyLbVR4HFNnNo88DTsqKu1oxBY4Lawpy8f2gZaMx_14h-PPm2SxAEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "MUC",
                                "name": "Munich Airport",
                                "city": "MUC",
                                "cityName": "Munich",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Bayern"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "FRA",
                                "name": "Frankfurt Airport",
                                "city": "FRA",
                                "cityName": "Frankfurt/Main",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Hessen"
                            },
                            "departureTime": "2024-11-18T12:00:00",
                            "arrivalTime": "2024-11-18T13:05:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-18T12:00:00",
                                    "arrivalTime": "2024-11-18T13:05:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "MUC",
                                        "name": "Munich Airport",
                                        "city": "MUC",
                                        "cityName": "Munich",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Bayern"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "FRA",
                                        "name": "Frankfurt Airport",
                                        "city": "FRA",
                                        "cityName": "Frankfurt/Main",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Hessen"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 105,
                                        "planeType": "32A",
                                        "carrierInfo": {
                                            "operatingCarrier": "LH",
                                            "marketingCarrier": "LH"
                                        }
                                    },
                                    "carriers": [
                                        "LH",
                                        "LH"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        },
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        }
                                    ],
                                    "totalTime": 3900,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A320"
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "2",
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 3900,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QW4-CMBSEf42-USh3TJoNAV03AkaseHlpsFbEWze0u7r8-q1gejLzzZy0Dz1J-S1Gun681tVJCu1HgIpLXpWSAcpv-rFRsuf8Ut8rvawbPV1FkzyEfjYvdKhr6tDR9oM9pSYaiob1noESaUEQ9CgospzlmxvkAnviQLPI466iXCIbOHCDp0WUYbsvG_Q5w04QdemA0lg85m3opTj1svPCy_BkW4xP60Wb7_JYbrLxQxRtnibxGK7irUhxscjOQqZtKBKczZLIeKpdi6uBFavpnmWUIgiA7QWwy7wUyLLfTCWCRo8HiZYJjlO_j2rhOq7ZhSeCluU7Q8GujMqa32fsDyVTaASa-h7-a9oaHphRebtfAqhgYIVqKmIoPXVakuzV7om_U0Z7OxDT8V2miBGT-a6CI7GV1gQCA7zuncnXWllLSuo5Df8HtEbXl8QBAAA.",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "MUC",
                                "name": "Munich Airport",
                                "city": "MUC",
                                "cityName": "Munich",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Bayern"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "FRA",
                                "name": "Frankfurt Airport",
                                "city": "FRA",
                                "cityName": "Frankfurt/Main",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Hessen"
                            },
                            "departureTime": "2024-11-18T14:00:00",
                            "arrivalTime": "2024-11-18T15:05:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-18T14:00:00",
                                    "arrivalTime": "2024-11-18T15:05:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "MUC",
                                        "name": "Munich Airport",
                                        "city": "MUC",
                                        "cityName": "Munich",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Bayern"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "FRA",
                                        "name": "Frankfurt Airport",
                                        "city": "FRA",
                                        "cityName": "Frankfurt/Main",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Hessen"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 109,
                                        "planeType": "319",
                                        "carrierInfo": {
                                            "operatingCarrier": "LH",
                                            "marketingCarrier": "LH"
                                        }
                                    },
                                    "carriers": [
                                        "LH",
                                        "LH"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        },
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        }
                                    ],
                                    "totalTime": 3900,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A319"
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "2",
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 3900,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QW4-CMBCFf42-USxQLibNxoCuGwFXrHh5abBWxHXthtbV5ddvBTOTc74zk_ZhTkr9yKFpHi9VeVLSuElQCiXKQnHAxLd5rLXshfiqrqVZVLWZrMJJNoJ-Os9NaBq62HD7xh_KkDXD_WrPQYGNIAg6lAzbaPniGrvAmSBo5VnUjphQ2AEIbsg0D1PidsMav88ICsI2HXASyfu8GXkJSbz0vPBSMtnm49N60WS7LFKbdHyXeZMlcTSGq2grE5Iv0rNUSTOSMUlncTh46F1Dyp4d6W6_5YxhCIDjBbDNopDYdl7MFIaDDg8KL2MSJX4X9cJFrtWGB4a27aO-5BfOVCWuM_6H4ymE0NDnEb-WY5CeFRZnhJybhp490l3SgdZTqwX9fNqe-jttrLMDtZDvck2cWtx3NRypo7WiEAzA88GZfqy1NbRgHqrFPzDxaa3EAQAA",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "MUC",
                                "name": "Munich Airport",
                                "city": "MUC",
                                "cityName": "Munich",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Bayern"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "FRA",
                                "name": "Frankfurt Airport",
                                "city": "FRA",
                                "cityName": "Frankfurt/Main",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Hessen"
                            },
                            "departureTime": "2024-11-18T15:00:00",
                            "arrivalTime": "2024-11-18T16:05:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-18T15:00:00",
                                    "arrivalTime": "2024-11-18T16:05:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "MUC",
                                        "name": "Munich Airport",
                                        "city": "MUC",
                                        "cityName": "Munich",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Bayern"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "FRA",
                                        "name": "Frankfurt Airport",
                                        "city": "FRA",
                                        "cityName": "Frankfurt/Main",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Hessen"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 111,
                                        "planeType": "789",
                                        "carrierInfo": {
                                            "operatingCarrier": "LH",
                                            "marketingCarrier": "LH"
                                        }
                                    },
                                    "carriers": [
                                        "LH",
                                        "LH"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        },
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        }
                                    ],
                                    "totalTime": 3900,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "787"
                                        },
                                        {
                                            "category": "ENTERTAINMENT",
                                            "cost": "free"
                                        },
                                        {
                                            "category": "POWER",
                                            "cost": "free",
                                            "type": [
                                                "power_outlet",
                                                "usb_port"
                                            ]
                                        }
                                    ],
                                    "departureTerminal": "2",
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 3900,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2QW4-CMBCFf42-USx3TJoNAS8bgY1Y8fLSYK1c1rUb2l1dfv1WMDM55zszaR-mkvJbTHX9cq3LSgrtR4CSS14WkgHKv_RLq-TE-Wd9K_WibvVkG86zAHrpR65DXVNFp4c39pCaaCka1ycGCqT5vj-goMi0Ny9ukQOsuQ2NPIv6EeUSWcCGe7zMwxQvhmGLFits-2GfziiJxP2jC9wEJ27arN0Uzw_5rNqtu-yYRXKfzu4i77IkjmZwGx1EgvN12giZdIGIcbqKw8lD7TpcjsxIdf8toxRBACzXh33mhUCm9WIqEZwMeJZoE-Mo8YaoFo7tGH14IGianj0W7MqorPltxf5QvIQG1NR5-K9haXhkhEXDpWkqGJmB6pJMlFa9FuT4tBPxjsroYGdi2J7DFDFiMM9RcCGW0ppAMAHPBw153ynrSEFdu-X_Etxs9sQBAAA.",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "MUC",
                                "name": "Munich Airport",
                                "city": "MUC",
                                "cityName": "Munich",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Bayern"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "FRA",
                                "name": "Frankfurt Airport",
                                "city": "FRA",
                                "cityName": "Frankfurt/Main",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Hessen"
                            },
                            "departureTime": "2024-11-18T21:00:00",
                            "arrivalTime": "2024-11-18T22:05:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-18T21:00:00",
                                    "arrivalTime": "2024-11-18T22:05:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "MUC",
                                        "name": "Munich Airport",
                                        "city": "MUC",
                                        "cityName": "Munich",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Bayern"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "FRA",
                                        "name": "Frankfurt Airport",
                                        "city": "FRA",
                                        "cityName": "Frankfurt/Main",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Hessen"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 121,
                                        "planeType": "321",
                                        "carrierInfo": {
                                            "operatingCarrier": "LH",
                                            "marketingCarrier": "LH"
                                        }
                                    },
                                    "carriers": [
                                        "LH",
                                        "LH"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        },
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        }
                                    ],
                                    "totalTime": 3900,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "A321"
                                        },
                                        {
                                            "category": "WIFI",
                                            "cost": "paid"
                                        }
                                    ],
                                    "departureTerminal": "2",
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 3900,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                },
                {
                    "token": "d6a1f_H4sIAAAAAAAA_y2Qb2-CMBDGP42-o1AKA0yaxYDORcCAiH_eNFgKos4utJvKp18Hppfn-d21d7n0JOW3mOh6dW3qkxTajwA1l7wuJAOUf-lVq-TI-aW51XrRtHq08efpFLrxKtehrqlDJ_t39pCaaCkeN0cGCqx5njegoBjZ6xe3-A1YcxuaeRr0JcoltoANd9ki9-PMHYot_lhmtuf3WYmjQNxX3dSJssiJz4kTZ_N9Pjttky49pIHcxbO7yLs0CoMZ3AR7EWV5Ep-FjLqpCLM4CX3joe6e-X2EAhX9WEYphgBYjgf7nBcCI-vFVGJoDFhKvA6zIBpWU-tC1zSGZw8MEXLtsWBXRmXDb0v2xOECQqSp7-G_pqWtR6ZfXGDtIAUjNFVRE0PpqdeCJCtlR-IelNHBSmJ63pEpYsQsEVVQEUtpQyAwwH_fmXxulXWEtrwyL38rlxD_xAEAAA..",
                    "segments": [
                        {
                            "departureAirport": {
                                "type": "AIRPORT",
                                "code": "MUC",
                                "name": "Munich Airport",
                                "city": "MUC",
                                "cityName": "Munich",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Bayern"
                            },
                            "arrivalAirport": {
                                "type": "AIRPORT",
                                "code": "FRA",
                                "name": "Frankfurt Airport",
                                "city": "FRA",
                                "cityName": "Frankfurt/Main",
                                "country": "DE",
                                "countryName": "Germany",
                                "province": "Hessen"
                            },
                            "departureTime": "2024-11-18T16:00:00",
                            "arrivalTime": "2024-11-18T17:05:00",
                            "legs": [
                                {
                                    "departureTime": "2024-11-18T16:00:00",
                                    "arrivalTime": "2024-11-18T17:05:00",
                                    "departureAirport": {
                                        "type": "AIRPORT",
                                        "code": "MUC",
                                        "name": "Munich Airport",
                                        "city": "MUC",
                                        "cityName": "Munich",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Bayern"
                                    },
                                    "arrivalAirport": {
                                        "type": "AIRPORT",
                                        "code": "FRA",
                                        "name": "Frankfurt Airport",
                                        "city": "FRA",
                                        "cityName": "Frankfurt/Main",
                                        "country": "DE",
                                        "countryName": "Germany",
                                        "province": "Hessen"
                                    },
                                    "cabinClass": "ECONOMY",
                                    "flightInfo": {
                                        "flightNumber": 113,
                                        "planeType": "CR9",
                                        "carrierInfo": {
                                            "operatingCarrier": "LH",
                                            "marketingCarrier": "LH",
                                            "operatingCarrierDisclosureText": "Lufthansa Cityline Gmbh"
                                        }
                                    },
                                    "carriers": [
                                        "LH",
                                        "LH"
                                    ],
                                    "carriersData": [
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        },
                                        {
                                            "name": "Lufthansa",
                                            "code": "LH"
                                        }
                                    ],
                                    "totalTime": 3900,
                                    "amenities": [
                                        {
                                            "category": "AIRCRAFT",
                                            "model": "CR9"
                                        }
                                    ],
                                    "departureTerminal": "2",
                                    "arrivalTerminal": "1"
                                }
                            ],
                            "totalTime": 3900,
                            "isAtolProtected": false,
                            "showWarningDestinationAirport": false,
                            "showWarningOriginAirport": false
                        }
                    ]
                }
            ],
            "flightDeals": [
                {
                    "key": "CHEAPEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2Qb3OiMBDGP419RzAEBDqTuaGC1qvBkyKtvslgjIjtNXckPSif_rbgZDf7_J7M5t_FmD_63rbP73V1Mdr61KhSRlWlkUio3_a5gemo1Fv9Udll3dhsN19kEQ7STWFj24Ih7vc_ZGcs3Qh6Vx8lKqkVhuEotaA4eVreoKEz5C487BRZPFhCGeoiD7_mj8U83fmj2dBlttweioFOlM3bdtNHmuUar-Odz65CQ_ps96Yh_TRf7Ivk8rLts0OW644t9v06TtriyqCn2KZ126VF5Gz6ZJrVbQ_7Gfbcdmw7ITHEcIwUcFOEXD_EA6tSUz9wRi0MxTf7ZOjzOo9ZMCIszLBHBugoJiTw7rR8l8LU6uNJftFkRTzfgv9S_xzX-sWT1cybWjgcOZo4c0w-lWsqUBMSQVR8iqZQL7da8leGHn6COvLgAEXw8Ns_cYcEgQtKciL9GYgz_8aaYzS2XvnqBUrP4VXh36__FSZoHu0BAAA.",
                    "price": {
                        "currencyCode": "USD",
                        "units": 161,
                        "nanos": 530000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 161,
                                    "nanos": 530000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 80,
                                    "nanos": 230000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 15,
                                    "nanos": 990000000
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 65,
                                    "nanos": 310000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 162
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 161,
                                    "nanos": 530000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 162
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "FASTEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2QbW-CMBSFf437RqFAeTFpFgK6Lbwsso7NfWmwVsCpNbSbjl-_CqY35zzn3tw2aavUWc5Nc3fomlZJ40eCRijR1IoDJo7mrteyEeK7OzVm3fVm_h4vywgGxWtlQtPQh83Xj_yqDNkz_NBtOKixEYbhhJJhB73duccecJcI2lWZjC0mFHYBgp_kuYoLAqdmj59SgsJ4TFucJ_LyOkR-TnK_2K_8gizX1aL9WA3lV5moz2JxkdVQ5lmygO_JWuakWhV7qfIhkhkp0iy2rno2kGbmJLrGazljGALg-uH0qKgldtw7M4WhNeFW4beMJHkwRT3wkGeP4Yqh4wToQfIDZ6oTp5T_4ewZWsjQ3yN-bdcgMzuuv4_dWWmYOZGuhlpa21Frmt5sQ4MvbWyyLbVR4HFNnNo88DTsqKu1oxBY4Lawpy8f2gZaMx_14h-PPm2SxAEAAA..",
                    "price": {
                        "currencyCode": "USD",
                        "units": 165,
                        "nanos": 620000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 165,
                                    "nanos": 620000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 86,
                                    "nanos": 720000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 78,
                                    "nanos": 900000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 166
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 165,
                                    "nanos": 620000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 166
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                },
                {
                    "key": "BEST",
                    "offerToken": "d6a1f_H4sIAAAAAAAA_y2QbW-CMBSFf437RqFAeTFpFgK6Lbwsso7NfWmwVsCpNbSbjl-_CqY35zzn3tw2aavUWc5Nc3fomlZJ40eCRijR1IoDJo7mrteyEeK7OzVm3fVm_h4vywgGxWtlQtPQh83Xj_yqDNkz_NBtOKixEYbhhJJhB73duccecJcI2lWZjC0mFHYBgp_kuYoLAqdmj59SgsJ4TFucJ_LyOkR-TnK_2K_8gizX1aL9WA3lV5moz2JxkdVQ5lmygO_JWuakWhV7qfIhkhkp0iy2rno2kGbmJLrGazljGALg-uH0qKgldtw7M4WhNeFW4beMJHkwRT3wkGeP4Yqh4wToQfIDZ6oTp5T_4ewZWsjQ3yN-bdcgMzuuv4_dWWmYOZGuhlpa21Frmt5sQ4MvbWyyLbVR4HFNnNo88DTsqKu1oxBY4Lawpy8f2gZaMx_14h-PPm2SxAEAAA..",
                    "price": {
                        "currencyCode": "USD",
                        "units": 165,
                        "nanos": 620000000
                    },
                    "travellerPrices": [
                        {
                            "travellerPriceBreakdown": {
                                "total": {
                                    "currencyCode": "USD",
                                    "units": 165,
                                    "nanos": 620000000
                                },
                                "baseFare": {
                                    "currencyCode": "USD",
                                    "units": 86,
                                    "nanos": 720000000
                                },
                                "fee": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "tax": {
                                    "currencyCode": "USD",
                                    "units": 78,
                                    "nanos": 900000000
                                },
                                "totalRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 166
                                },
                                "discount": {
                                    "currencyCode": "USD",
                                    "units": 0,
                                    "nanos": 0
                                },
                                "totalWithoutDiscount": {
                                    "currencyCode": "USD",
                                    "units": 165,
                                    "nanos": 620000000
                                },
                                "totalWithoutDiscountRounded": {
                                    "currencyCode": "USD",
                                    "nanos": 0,
                                    "units": 166
                                }
                            },
                            "travellerReference": "1",
                            "travellerType": "ADULT"
                        }
                    ]
                }
            ],
            "atolProtectedStatus": "NONE",
            "searchId": "8574F5641A418B3AE9095B07304DE074",
            "displayOptions": {
                "brandedFaresShownByDefault": false,
                "directFlightsOnlyFilterIgnored": false,
                "hideFlexiblePricesBanner": false
            },
            "isOffersCabinClassExtended": false,
            "searchCriteria": {
                "cabinClass": "ECONOMY"
            }
        }
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "country": "Germany",
                "longitude": 11.592671,
                "countryCode": "de",
                "name": "Munich Marriott Hotel",
                "types": "hotel",
                "city": "Munich",
                "googlePlaceId": "ChIJ4WMz6Ep0nkcRWGN3f0Wc7Uw",
                "latitude": 48.174446
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "googlePlaceId": "ChIJeflCVHQLvUcRMfP4IU3YdIo",
                "name": "Frankfurt Airport",
                "types": "airport",
                "longitude": 8.57182,
                "latitude": 50.0507,
                "city": "Frankfurt/Main",
                "countryCode": "de",
                "iata": "FRA",
                "country": "Germany"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "googlePlaceId": "ChIJ84g_-AAMvUcR6er9IWN1h4A",
                "types": "establishment",
                "longitude": 8.6688588,
                "city": "Frankfurt am Main",
                "description": "Wilhelm-Leuschner-Straße 43, 60329 Frankfurt am Main, Germany",
                "name": "InterContinental Frankfurt, an IHG Hotel",
                "latitude": 50.1045808,
                "country": "Germany",
                "countryCode": "de"
            }
        ]
    }
]

2025-08-25 11:43:55,851 - evaluation_logger_Cross-90 - INFO - Function Calls: 
[
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJ4WMz6Ep0nkcRWGN3f0Wc7Uw",
            "drop_off_place_id": "ChIJeflCVHQLvUcRMfP4IU3YdIo",
            "pick_up_date": "2024-11-18",
            "pick_up_time": "10:00"
        }
    },
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJeflCVHQLvUcRMfP4IU3YdIo",
            "drop_off_place_id": "ChIJ84g_-AAMvUcR6er9IWN1h4A",
            "pick_up_date": "2024-11-18",
            "pick_up_time": "13:05"
        }
    }
]

2025-08-25 11:43:55,851 - evaluation_logger_Cross-90 - INFO - Golden Function Call: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Munich Airport"
        }
    },
    {
        "name": "Search_Taxi",
        "arguments": {
            "drop_off_place_id": "ChIJRW3aI1kTnkcRS89WOoV6xeM",
            "pick_up_date": "2024-11-18",
            "pick_up_place_id": "ChIJ4WMz6Ep0nkcRWGN3f0Wc7Uw",
            "pick_up_time": "10:00"
        }
    },
    {
        "name": "Search_Taxi",
        "arguments": {
            "drop_off_place_id": "ChIJ84g_-AAMvUcR6er9IWN1h4A",
            "pick_up_date": "2024-11-18",
            "pick_up_place_id": "ChIJeflCVHQLvUcRMfP4IU3YdIo",
            "pick_up_time": "13:05"
        }
    }
]

2025-08-25 11:43:57,464 - evaluation_logger_Cross-90 - INFO - Start compare_single_call: 
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJ84g_-AAMvUcR6er9IWN1h4A', 'pick_up_date': '2024-11-18', 'pick_up_place_id': 'ChIJeflCVHQLvUcRMfP4IU3YdIo', 'pick_up_time': '13:05'}}
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJ84g_-AAMvUcR6er9IWN1h4A', 'pick_up_date': '2024-11-18', 'pick_up_place_id': 'ChIJeflCVHQLvUcRMfP4IU3YdIo', 'pick_up_time': '13:05'}}
2025-08-25 11:43:57,465 - evaluation_logger_Cross-90 - INFO - Rule-based compare success.
2025-08-25 11:43:57,465 - evaluation_logger_Cross-90 - INFO - Start compare_single_call: 
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJeflCVHQLvUcRMfP4IU3YdIo', 'pick_up_date': '2024-11-18', 'pick_up_place_id': 'ChIJ4WMz6Ep0nkcRWGN3f0Wc7Uw', 'pick_up_time': '10:00'}}
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJRW3aI1kTnkcRS89WOoV6xeM', 'pick_up_date': '2024-11-18', 'pick_up_place_id': 'ChIJ4WMz6Ep0nkcRWGN3f0Wc7Uw', 'pick_up_time': '10:00'}}
2025-08-25 11:43:57,465 - evaluation_logger_Cross-90 - INFO - {'error_type': 'value_error', 'content': 'Parameter drop_off_place_id value is not correct in prediction.'}
2025-08-25 11:43:57,465 - evaluation_logger_Cross-90 - INFO - Success matched: [{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJ84g_-AAMvUcR6er9IWN1h4A', 'pick_up_date': '2024-11-18', 'pick_up_place_id': 'ChIJeflCVHQLvUcRMfP4IU3YdIo', 'pick_up_time': '13:05'}}]
2025-08-25 11:43:57,465 - evaluation_logger_Cross-90 - INFO - Observations:
[
    {
        "api_status": true,
        "content": "There is a problem with your api call, please double-check for possible problems."
    },
    {
        "status": true,
        "message": "Success",
        "data": {
            "journeys": [
                {
                    "journeyDirection": "OUTBOUND",
                    "requestedPickupDateTime": "2024-11-18T13:05:00",
                    "pickupLocation": {
                        "city": "Frankfurt",
                        "locationType": "AIRPORT",
                        "description": "60547 Frankfurt, Germany",
                        "postcode": "60547",
                        "locationId": "ChIJeflCVHQLvUcRMfP4IU3YdIo",
                        "timezone": "Europe/Berlin",
                        "country": "DE",
                        "establishment": "Frankfurt International Airport (FRA)",
                        "name": "Frankfurt International Airport (FRA), 60547 Frankfurt, Germany",
                        "airportCode": "FRA"
                    },
                    "janusSearchReference": "84e02c3c-3c09-43e7-95db-355f7f092fbb",
                    "dropOffLocation": {
                        "name": "InterContinental Frankfurt, an IHG Hotel, Wilhelm-Leuschner-Straße 43, 60329 Frankfurt am Main, Germany",
                        "postcode": "60329",
                        "description": "Wilhelm-Leuschner-Straße 43, 60329 Frankfurt am Main, Germany",
                        "locationId": "ChIJ84g_-AAMvUcR6er9IWN1h4A",
                        "establishment": "InterContinental Frankfurt, an IHG Hotel",
                        "country": "DE",
                        "city": "Frankfurt am Main",
                        "locationType": "GEO"
                    }
                }
            ],
            "results": [
                {
                    "nonRefundable": false,
                    "bags": 3,
                    "vehicleType": "STANDARD",
                    "legPriceBreakdown": [
                        {
                            "supplierLocationId": 5169,
                            "supplierName": "Talixo",
                            "journeyDirection": "OUTBOUND",
                            "supplierId": 2507,
                            "price": {
                                "currencyCode": "USD",
                                "amount": "52.40"
                            }
                        }
                    ],
                    "resultId": "f243a4ec-d1a2-411e-8d6f-3a18b6fcb975",
                    "drivingDistance": 17.21,
                    "description": "Standard",
                    "geniusDiscount": false,
                    "supplierId": 2507,
                    "categoryLocalised": "Standard",
                    "janusResultReference": "1",
                    "discountType": "NONE",
                    "price": {
                        "amount": "52.40",
                        "currencyCode": "USD"
                    },
                    "meetGreet": true,
                    "supplierName": "Talixo",
                    "category": "Standard",
                    "duration": 22,
                    "priceRuleId": 19217,
                    "cancellationLeadTimeMinutes": 180,
                    "descriptionLocalised": "Perfect for solo travellers, couples and small families.",
                    "passengerCapacity": 3
                },
                {
                    "category": "Executive",
                    "duration": 22,
                    "priceRuleId": 19218,
                    "cancellationLeadTimeMinutes": 1440,
                    "descriptionLocalised": "Plenty of space to travel in comfort.",
                    "passengerCapacity": 3,
                    "supplierName": "World Transfer (acting as agent for local supplier)",
                    "price": {
                        "amount": "55.23",
                        "currencyCode": "USD"
                    },
                    "meetGreet": true,
                    "janusResultReference": "2",
                    "discountType": "NONE",
                    "geniusDiscount": false,
                    "description": "Executive",
                    "supplierId": 1213,
                    "categoryLocalised": "Executive",
                    "legPriceBreakdown": [
                        {
                            "supplierId": 1213,
                            "price": {
                                "amount": "55.23",
                                "currencyCode": "USD"
                            },
                            "supplierLocationId": 5080,
                            "journeyDirection": "OUTBOUND",
                            "supplierName": "World Transfer (acting as agent for local supplier)"
                        }
                    ],
                    "drivingDistance": 17.21,
                    "resultId": "16c67c7e-2485-4f93-8649-9d302e81298d",
                    "vehicleType": "EXECUTIVE",
                    "nonRefundable": false,
                    "bags": 2
                },
                {
                    "description": "People Carrier",
                    "geniusDiscount": false,
                    "supplierId": 1213,
                    "categoryLocalised": "People carrier",
                    "resultId": "56114060-e4b3-46ec-8f85-81ffa57575f5",
                    "drivingDistance": 17.21,
                    "legPriceBreakdown": [
                        {
                            "price": {
                                "currencyCode": "USD",
                                "amount": "66.27"
                            },
                            "supplierId": 1213,
                            "supplierLocationId": 5080,
                            "journeyDirection": "OUTBOUND",
                            "supplierName": "World Transfer (acting as agent for local supplier)"
                        }
                    ],
                    "vehicleType": "LARGE",
                    "nonRefundable": false,
                    "bags": 7,
                    "cancellationLeadTimeMinutes": 1440,
                    "priceRuleId": 19221,
                    "category": "People Carrier",
                    "duration": 22,
                    "passengerCapacity": 7,
                    "descriptionLocalised": "Great choice for families.",
                    "supplierName": "World Transfer (acting as agent for local supplier)",
                    "meetGreet": true,
                    "price": {
                        "currencyCode": "USD",
                        "amount": "66.27"
                    },
                    "discountType": "NONE",
                    "janusResultReference": "5"
                },
                {
                    "supplierName": "Talixo",
                    "passengerCapacity": 7,
                    "descriptionLocalised": "Perfect for groups that want a touch of luxury.",
                    "priceRuleId": 19219,
                    "cancellationLeadTimeMinutes": 180,
                    "duration": 22,
                    "category": "Executive People Carrier",
                    "discountType": "NONE",
                    "janusResultReference": "3",
                    "meetGreet": true,
                    "price": {
                        "currencyCode": "USD",
                        "amount": "75.92"
                    },
                    "drivingDistance": 17.21,
                    "resultId": "2bf4c890-e8ea-4734-808f-23590f43383d",
                    "legPriceBreakdown": [
                        {
                            "journeyDirection": "OUTBOUND",
                            "supplierName": "Talixo",
                            "supplierLocationId": 5169,
                            "price": {
                                "amount": "75.92",
                                "currencyCode": "USD"
                            },
                            "supplierId": 2507
                        }
                    ],
                    "categoryLocalised": "Executive people carrier",
                    "supplierId": 2507,
                    "geniusDiscount": false,
                    "description": "Executive People Carrier",
                    "bags": 7,
                    "nonRefundable": false,
                    "vehicleType": "LARGE_EXECUTIVE"
                },
                {
                    "cancellationLeadTimeMinutes": 180,
                    "priceRuleId": 19222,
                    "duration": 22,
                    "category": "Large People Carrier",
                    "passengerCapacity": 7,
                    "descriptionLocalised": "Ideal for small groups.",
                    "supplierName": "Talixo",
                    "meetGreet": true,
                    "price": {
                        "currencyCode": "USD",
                        "amount": "84.19"
                    },
                    "discountType": "NONE",
                    "janusResultReference": "6",
                    "supplierId": 2507,
                    "geniusDiscount": false,
                    "description": "Large People Carrier",
                    "categoryLocalised": "Large people carrier",
                    "resultId": "2f7d6c08-cad5-444c-bb23-e2cd2dbc163f",
                    "drivingDistance": 17.21,
                    "legPriceBreakdown": [
                        {
                            "supplierName": "Talixo",
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 5169,
                            "price": {
                                "currencyCode": "USD",
                                "amount": "84.19"
                            },
                            "supplierId": 2507
                        }
                    ],
                    "vehicleType": "LARGE",
                    "nonRefundable": false,
                    "bags": 8
                }
            ]
        }
    }
]

2025-08-25 11:46:23,430 - evaluation_logger_Cross-90 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [《精尽 Spring Boot 源码分析 —— SpringApplication》](http://svip.iocoder.cn/Spring-Boot/SpringApplication/) 的**初始化**的源码解析。

在 SpringApplication 实例初始化的过程中，它会做如下几件事情：

1. 推断当前 WEB 应用类型
2. 设置 `applicationContextInitializers` 属性
3. 设置 `applicationListeners` 属性
4. 推断入口类

# 2. 构造方法

SpringApplication 提供如下**两个**构造方法：

```java
// SpringApplication.java

public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
    this.resourceLoader = resourceLoader;
    Assert.notNull(primarySources, "PrimarySources must not be null");
    this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
    // <1> 推断当前 WEB 应用类型
    this.webApplicationType = WebApplicationType.deduceFromClasspath();
    // <2> 设置 applicationContextInitializers 属性
    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
    // <3> 设置 applicationListeners 属性
    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
    // <4> 推断入口类
    this.mainApplicationClass = deduceMainApplicationClass();
}

public SpringApplication(Class<?>... primarySources) {
    this(null, primarySources);
}
```

- 两个构造方法，差别在于第一个参数 `resourceLoader` 。一般情况下，我们使用第二个构造方法，所以传入的 `resourceLoader` 为 `null` 。

- `<1>` 处，调用 `WebApplicationType#deduceFromClasspath()` 方法，推断当前 WEB 应用类型。详细解析，见 [「2.1 推断当前 WEB 应用类型」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `<2>` 处，设置 `applicationContextInitializers` 属性。详细解析，见 [「2.2 设置 applicationContextInitializers 属性」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `<3>` 处，设置 `applicationListeners` 属性。详细解析，见 [「2.3 设置 applicationListeners 属性」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `<4>` 处，调用 `#deduceMainApplicationClass()` 方法，推断入口类。详细解析，见 [「2.4 推断入口类」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

## 2.1 推断当前 WEB 应用类型

`WebApplicationType#deduceFromClasspath()` 方法，推断当前 WEB 应用类型。代码如下：

```java
// WebApplicationType.java

private static final String[] SERVLET_INDICATOR_CLASSES = { "javax.servlet.Servlet",
		"org.springframework.web.context.ConfigurableWebApplicationContext" };

private static final String WEBMVC_INDICATOR_CLASS = "org.springframework.web.servlet.DispatcherServlet";
private static final String WEBFLUX_INDICATOR_CLASS = "org.springframework.web.reactive.DispatcherHandler";
private static final String JERSEY_INDICATOR_CLASS = "org.glassfish.jersey.servlet.ServletContainer";

public static WebApplicationType deduceFromClasspath() {
    // <1> 如果存在 REACTIVE 相关的类，则返回 REACTIVE 类型
	if (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, null) && !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, null)
			&& !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, null)) {
		return WebApplicationType.REACTIVE;
	}
    // <2> 如果不存在 SERVLET 相关的类，则返回 NONE 类型
	for (String className : SERVLET_INDICATOR_CLASSES) {
		if (!ClassUtils.isPresent(className, null)) {
			return WebApplicationType.NONE;
		}
	}
    // <3> 如果存在 SERVLET 相关的类，则返回 SERVLET 类型
	return WebApplicationType.SERVLET;
}
```

- WebApplicationType 枚举类，有三种类型。代码如下：

  ```java
  // WebApplicationType.java
  
  public enum WebApplicationType {
  
  	/**
  	 * 非 WEB 项目
  	 */
  	NONE,
  
  	/**
  	 * SERVLET WEB 项目
  	 */
  	SERVLET,
  
  	/**
  	 * 响应式 WEB 项目
  	 */
  	REACTIVE;
  
  }
  ```

- `<1>` 处，如果存在 REACTIVE 相关的类，并且不存在 WEB MVC 相关的类，则返回 `WebApplicationType.REACTIVE` 类型。

- `<2>` 处，如果不存在 SERVLET 相关的类，则返回 `WebApplicationType.NONE` 类型。

- `<3>` 处，如果存在 SERVLET 相关的类，则返回 `WebApplicationType.SERVLET` 类型。

## 2.2 设置 applicationContextInitializers 属性

`#setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers)` 方法，设置 `applicationContextInitializers` 属性。代码如下：

```java
// SpringApplication.java

/**
 * ApplicationContext 初始化器集合
 */
private List<ApplicationContextInitializer<?>> initializers;

public void setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers) {
	this.initializers = new ArrayList<>(initializers);
}
```

- 那么，这些 ApplicationContextInitializer 从哪里来的呢？答案在 `#getSpringFactoriesInstances(Class<T> type)` 方法。代码如下：

  ```java
  // SpringApplication.java
  
  private <T> Collection<T> getSpringFactoriesInstances(Class<T> type) {
  	return getSpringFactoriesInstances(type, new Class<?>[] {});
  }
  
  private <T> Collection<T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
  	ClassLoader classLoader = getClassLoader();
  	// Use names and ensure unique to protect against duplicates
      // <1> 加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组
  	Set<String> names = new LinkedHashSet<>(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
      // <2> 创建对象
  	List<T> instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
      // <3> 排序
  	AnnotationAwareOrderComparator.sort(instances);
  	return instances;
  }
  ```

  - `<1>` 处，调用 `SpringFactoriesLoader#loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader)` 方法，加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组。

    - 在 `spring-boot` 项目中的 `META-INF/spring.factories` 里，定义了 `ApplicationContextInitializer` 的配置。如下：

      ```properties
      # Application Context Initializers
      org.springframework.context.ApplicationContextInitializer=\
      org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\
      org.springframework.boot.context.ContextIdApplicationContextInitializer,\
      org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\
      org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer
      ```

    - 在 `spring-boot-autoconfigure` 项目中的 `META-INF/spring.factories` 里，定义了 `ApplicationContextInitializer` 的配置。如下：

      ```properties
      # Initializers
      org.springframework.context.ApplicationContextInitializer=\
      org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\
      org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener
      ```

    - 当然，如果胖友有自定义的 `ApplicationContextInitializer` 实现，也可以配置在 `META-INF/spring.factories` 中。

  - `<2>` 处，调用 `#createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names)` 方法，创建对象。代码如下：

    ```java
    // SpringApplication.java
    
    private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes,
    		ClassLoader classLoader, Object[] args, Set<String> names) {
    	List<T> instances = new ArrayList<>(names.size());
    	for (String name : names) {
    		try {
    			Class<?> instanceClass = ClassUtils.forName(name, classLoader);
    			Assert.isAssignable(type, instanceClass);
    			Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
    			T instance = (T) BeanUtils.instantiateClass(constructor, args);
    			instances.add(instance);
    		} catch (Throwable ex) {
    			throw new IllegalArgumentException("Cannot instantiate " + type + " : " + name, ex);
    		}
    	}
    	return instances;
    }
    ```

    - 通过反射，创建对象。

  - `<3>` 处，调用 `AnnotationAwareOrderComparator#sort(List<?> list)` 方法，排序对象。

    - 关于 Order 排序相关，可以看看 [《【死磕 Spring】—— IoC 之深入分析 ﻿BeanFactoryPostProcessor》](http://svip.iocoder.cn/Spring/IoC-BeanFactoryPostProcessor/?self) 的 [「3.1 Order」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 小节。

- 这样，`ApplicationContextInitializer` 对象就创建完成了。

## 2.3 设置 applicationListeners 属性

`#setListeners(Collection<? extends ApplicationListener<?>> listeners)` 方法，设置 `applicationListeners` 属性。代码如下：

```java
// SpringApplication.java

/**
 * 监听器集合
 */
private List<ApplicationListener<?>> listeners;

public void setListeners(Collection<? extends ApplicationListener<?>> listeners) {
	this.listeners = new ArrayList<>(listeners);
}
```

- 那么，这些 ApplicationListener 从哪里来的呢？答案也是 `#getSpringFactoriesInstances(Class<T> type)` 方法。

  - 在 `spring-boot` 项目中的 `META-INF/spring.factories` 里，定义了 `ApplicationListener` 的配置。如下：

    ```properties
    # Application Listeners
    org.springframework.context.ApplicationListener=\
    org.springframework.boot.ClearCachesApplicationListener,\
    org.springframework.boot.builder.ParentContextCloserApplicationListener,\
    org.springframework.boot.context.FileEncodingApplicationListener,\
    org.springframework.boot.context.config.AnsiOutputApplicationListener,\
    org.springframework.boot.context.config.ConfigFileApplicationListener,\
    org.springframework.boot.context.config.DelegatingApplicationListener,\
    org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\
    org.springframework.boot.context.logging.LoggingApplicationListener,\
    org.springframework.boot.liquibase.LiquibaseServiceApplicationListener
    ```

  - 在 `spring-boot-autoconfigure` 项目中的 `META-INF/spring.factories` 里，没有定义 `ApplicationListener` 的配置。

  - 当然，如果胖友有自定义的 `ApplicationListener` 实现，也可以配置在 `META-INF/spring.factories` 中。

## 2.4 推断入口类

`#deduceMainApplicationClass()` 方法，推断入口类。代码如下：

```java
// SpringApplication.java

private Class<?> deduceMainApplicationClass() {
	try {
        // 获得当前 StackTraceElement 数组
		StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();
        // 遍历，判断哪个执行 main 方法
		for (StackTraceElement stackTraceElement : stackTrace) {
			if ("main".equals(stackTraceElement.getMethodName())) {
				return Class.forName(stackTraceElement.getClassName());
			}
		}
	} catch (ClassNotFoundException ex) {
		// Swallow and continue
	}
	return null;
}
```

- 通过构造一个 RuntimeException 异常，然后遍历其栈帧，判断哪个执行了 `main` 方法，从而推断出入**口类**。

# 3. 小结

至此，SpringApplication 对象的初始化，就已经完成。我们再来看一眼 `SpringApplication` 的**属性**，作为收尾。代码如下：

```java
// SpringApplication.java

/**
 * 资源加载器
 */
private ResourceLoader resourceLoader;
/**
 * 主类集合
 */
private Set<Class<?>> primarySources;
/**
 * 应用上下文类
 */
private Class<? extends ConfigurableApplicationContext> applicationContextClass;
/**
 * WEB 应用类型
 */
private WebApplicationType webApplicationType;
/**
 * ApplicationContext 初始化器集合
 */
private List<ApplicationContextInitializer<?>> initializers;
/**
 * 监听器集合
 */
private List<ApplicationListener<?>> listeners;
/**
 * 入口类
 */
private Class<?> mainApplicationClass;
```

- 另外，还有 `log` 日志对象，暂时忽略。

2025-08-25 11:46:29,415 - evaluation_logger_Cross-90 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any of the requested information in the user's query."}
2025-08-25 11:46:35,745 - evaluation_logger_Cross-90 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 11:46:35,745 - evaluation_logger_Cross-90 - INFO - Message: [{'error_type': 'value_error', 'content': 'Parameter drop_off_place_id value is not correct in prediction.'}]
2025-08-25 11:46:35,745 - evaluation_logger_Cross-90 - INFO - Success turn num = 1
2025-08-25 11:46:35,745 - evaluation_logger_Cross-90 - INFO - ----------------------------------------------------------------------------------------------------
