2025-08-25 12:17:46,788 - evaluation_logger_Cross-314 - INFO - Test Example Cross-314
2025-08-25 12:17:46,788 - evaluation_logger_Cross-314 - INFO - Query: It's 7 o'clock in the morning on December 10th, 2024. I want to take a taxi from 145 Richmond Rd to University of Ottawa in 20 minutes to see my friend. We'll have lunch at the school first. At 3 PM, we’ll take a taxi to a shopping mall in a nearby city around University of Ottawa for some shopping. Arrange the taxis for both trips.
2025-08-25 12:17:56,304 - evaluation_logger_Cross-314 - INFO - Function Calls: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "145 Richmond Rd"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "University of Ottawa"
        }
    }
]

2025-08-25 12:17:56,304 - evaluation_logger_Cross-314 - INFO - Golden Function Call: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "145 Richmond Rd"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "University of Ottawa"
        }
    },
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJ41p4PxsEzkwRmhNVmsqwha0",
            "drop_off_place_id": "ChIJc425bQoFzkwRrtsvYsNZihg",
            "pick_up_date": "2024-12-10",
            "pick_up_time": "07:20"
        }
    },
    {
        "name": "Get_Nearby_Cities",
        "arguments": {
            "latitude": "45.423058",
            "longitude": "-75.68306"
        }
    }
]

2025-08-25 12:17:56,304 - evaluation_logger_Cross-314 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': '145 Richmond Rd'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': '145 Richmond Rd'}}
2025-08-25 12:17:56,304 - evaluation_logger_Cross-314 - INFO - Rule-based compare success.
2025-08-25 12:17:56,304 - evaluation_logger_Cross-314 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'University of Ottawa'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'University of Ottawa'}}
2025-08-25 12:17:56,304 - evaluation_logger_Cross-314 - INFO - Rule-based compare success.
2025-08-25 12:17:56,304 - evaluation_logger_Cross-314 - INFO - Success matched: [{'name': 'Taxi_Search_Location', 'arguments': {'query': '145 Richmond Rd'}}, {'name': 'Taxi_Search_Location', 'arguments': {'query': 'University of Ottawa'}}]
2025-08-25 12:17:56,304 - evaluation_logger_Cross-314 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "longitude": -75.7463422,
                "countryCode": "ca",
                "googlePlaceId": "ChIJ41p4PxsEzkwRmhNVmsqwha0",
                "latitude": 45.3962364,
                "types": "premise",
                "city": "Ottawa",
                "description": "145 Richmond Rd, Ottawa, ON K1Z 1A1, Canada",
                "country": "Canada",
                "name": "145 Richmond Rd"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "city": "Ottawa",
                "types": "institution",
                "longitude": -75.68306,
                "latitude": 45.423058,
                "googlePlaceId": "ChIJc425bQoFzkwRrtsvYsNZihg",
                "name": "University of Ottawa",
                "countryCode": "ca",
                "country": "Canada"
            }
        ]
    }
]

2025-08-25 12:18:08,698 - evaluation_logger_Cross-314 - INFO - Function Calls: 
[
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJ41p4PxsEzkwRmhNVmsqwha0",
            "drop_off_place_id": "ChIJc425bQoFzkwRrtsvYsNZihg",
            "pick_up_date": "2024-12-10",
            "pick_up_time": "07:20"
        }
    },
    {
        "name": "Get_Nearby_Cities",
        "arguments": {
            "latitude": "45.423058",
            "longitude": "-75.68306"
        }
    }
]

2025-08-25 12:18:08,698 - evaluation_logger_Cross-314 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Taxi",
        "arguments": {
            "drop_off_place_id": "ChIJc425bQoFzkwRrtsvYsNZihg",
            "pick_up_date": "2024-12-10",
            "pick_up_place_id": "ChIJ41p4PxsEzkwRmhNVmsqwha0",
            "pick_up_time": "07:20"
        }
    },
    {
        "name": "Get_Nearby_Cities",
        "arguments": {
            "latitude": "45.423058",
            "longitude": "-75.68306"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Gatineau Shopping Mall"
        }
    }
]

2025-08-25 12:18:08,698 - evaluation_logger_Cross-314 - INFO - Start compare_single_call: 
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJc425bQoFzkwRrtsvYsNZihg', 'pick_up_date': '2024-12-10', 'pick_up_place_id': 'ChIJ41p4PxsEzkwRmhNVmsqwha0', 'pick_up_time': '07:20'}}
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJc425bQoFzkwRrtsvYsNZihg', 'pick_up_date': '2024-12-10', 'pick_up_place_id': 'ChIJ41p4PxsEzkwRmhNVmsqwha0', 'pick_up_time': '07:20'}}
2025-08-25 12:18:08,698 - evaluation_logger_Cross-314 - INFO - Rule-based compare success.
2025-08-25 12:18:08,698 - evaluation_logger_Cross-314 - INFO - Start compare_single_call: 
{'name': 'Get_Nearby_Cities', 'arguments': {'latitude': '45.423058', 'longitude': '-75.68306'}}
{'name': 'Get_Nearby_Cities', 'arguments': {'latitude': '45.423058', 'longitude': '-75.68306'}}
2025-08-25 12:18:08,698 - evaluation_logger_Cross-314 - INFO - Rule-based compare success.
2025-08-25 12:18:08,698 - evaluation_logger_Cross-314 - INFO - Success matched: [{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJc425bQoFzkwRrtsvYsNZihg', 'pick_up_date': '2024-12-10', 'pick_up_place_id': 'ChIJ41p4PxsEzkwRmhNVmsqwha0', 'pick_up_time': '07:20'}}, {'name': 'Get_Nearby_Cities', 'arguments': {'latitude': '45.423058', 'longitude': '-75.68306'}}]
2025-08-25 12:18:08,698 - evaluation_logger_Cross-314 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "journeys": [
                {
                    "requestedPickupDateTime": "2024-12-10T07:20:00",
                    "pickupLocation": {
                        "locationType": "GEO",
                        "name": "145 Richmond Rd, Ottawa, ON K1Z 1A1, Canada",
                        "locationId": "ChIJ41p4PxsEzkwRmhNVmsqwha0",
                        "postcode": "K1Z 1A1",
                        "timezone": "America/Toronto",
                        "description": "145 Richmond Rd, Ottawa, ON K1Z 1A1, Canada",
                        "country": "CA",
                        "city": "Ottawa"
                    },
                    "dropOffLocation": {
                        "establishment": "University of Ottawa",
                        "locationType": "GEO",
                        "description": "75 Laurier Ave E, Ottawa, ON K1N 6N5, Canada",
                        "country": "CA",
                        "city": "Ottawa",
                        "name": "University of Ottawa, 75 Laurier Ave E, Ottawa, ON K1N 6N5, Canada",
                        "locationId": "ChIJc425bQoFzkwRrtsvYsNZihg",
                        "postcode": "K1N 6N5"
                    },
                    "journeyDirection": "OUTBOUND",
                    "janusSearchReference": "e96cdd47-acdc-43bf-8d69-a086918032db"
                }
            ],
            "results": [
                {
                    "categoryLocalised": "Standard",
                    "geniusDiscount": false,
                    "meetGreet": false,
                    "bags": 2,
                    "supplierName": "GTA Airport Taxi",
                    "legPriceBreakdown": [
                        {
                            "supplierName": "GTA Airport Taxi",
                            "price": {
                                "currencyCode": "USD",
                                "amount": "88.42"
                            },
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 2448,
                            "supplierId": 634
                        }
                    ],
                    "supplierId": 634,
                    "nonRefundable": false,
                    "priceRuleId": 19043,
                    "descriptionLocalised": "Perfect for solo travellers, couples and small families.",
                    "resultId": "68f1df91-6986-4680-b4c0-c70096383d6e",
                    "duration": 14,
                    "janusResultReference": "1",
                    "drivingDistance": 10.01,
                    "description": "Standard",
                    "vehicleType": "STANDARD",
                    "price": {
                        "currencyCode": "USD",
                        "amount": "88.42"
                    },
                    "passengerCapacity": 2,
                    "cancellationLeadTimeMinutes": 1440,
                    "discountType": "NONE",
                    "category": "Standard"
                },
                {
                    "meetGreet": false,
                    "geniusDiscount": false,
                    "categoryLocalised": "People carrier",
                    "supplierId": 634,
                    "legPriceBreakdown": [
                        {
                            "supplierName": "GTA Airport Taxi",
                            "price": {
                                "currencyCode": "USD",
                                "amount": "97.26"
                            },
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 2448,
                            "supplierId": 634
                        }
                    ],
                    "nonRefundable": false,
                    "bags": 4,
                    "supplierName": "GTA Airport Taxi",
                    "descriptionLocalised": "Great choice for families.",
                    "resultId": "bc81d3dd-0511-4a54-aa26-1e0e0f5df262",
                    "priceRuleId": 19047,
                    "drivingDistance": 10.01,
                    "janusResultReference": "5",
                    "duration": 14,
                    "vehicleType": "LARGE",
                    "description": "People Carrier",
                    "passengerCapacity": 4,
                    "price": {
                        "currencyCode": "USD",
                        "amount": "97.26"
                    },
                    "discountType": "NONE",
                    "category": "People Carrier",
                    "cancellationLeadTimeMinutes": 1440
                },
                {
                    "passengerCapacity": 5,
                    "price": {
                        "currencyCode": "USD",
                        "amount": "114.94"
                    },
                    "discountType": "NONE",
                    "category": "Large People Carrier",
                    "cancellationLeadTimeMinutes": 1440,
                    "drivingDistance": 10.01,
                    "janusResultReference": "6",
                    "duration": 14,
                    "vehicleType": "LARGE",
                    "description": "Large People Carrier",
                    "legPriceBreakdown": [
                        {
                            "supplierId": 634,
                            "price": {
                                "currencyCode": "USD",
                                "amount": "114.94"
                            },
                            "supplierName": "GTA Airport Taxi",
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 2448
                        }
                    ],
                    "supplierId": 634,
                    "nonRefundable": false,
                    "bags": 5,
                    "supplierName": "GTA Airport Taxi",
                    "descriptionLocalised": "Ideal for small groups.",
                    "resultId": "6f366513-4a1b-443b-a10b-581244a97499",
                    "priceRuleId": 19048,
                    "meetGreet": false,
                    "geniusDiscount": false,
                    "categoryLocalised": "Large people carrier"
                },
                {
                    "duration": 14,
                    "drivingDistance": 10.01,
                    "janusResultReference": "2",
                    "description": "Executive",
                    "vehicleType": "EXECUTIVE",
                    "price": {
                        "currencyCode": "USD",
                        "amount": "157.48"
                    },
                    "passengerCapacity": 3,
                    "cancellationLeadTimeMinutes": 1440,
                    "discountType": "NONE",
                    "category": "Executive",
                    "geniusDiscount": false,
                    "categoryLocalised": "Executive",
                    "meetGreet": false,
                    "bags": 3,
                    "supplierName": "E-Life Limo",
                    "supplierId": 668,
                    "legPriceBreakdown": [
                        {
                            "supplierName": "E-Life Limo",
                            "price": {
                                "amount": "157.48",
                                "currencyCode": "USD"
                            },
                            "supplierLocationId": 5090,
                            "journeyDirection": "OUTBOUND",
                            "supplierId": 668
                        }
                    ],
                    "nonRefundable": false,
                    "priceRuleId": 19044,
                    "descriptionLocalised": "Plenty of space to travel in comfort.",
                    "resultId": "4c7daccf-08da-454e-8a15-b760c5017087"
                },
                {
                    "price": {
                        "currencyCode": "USD",
                        "amount": "190.31"
                    },
                    "passengerCapacity": 10,
                    "cancellationLeadTimeMinutes": 1440,
                    "category": "Minibus",
                    "discountType": "NONE",
                    "duration": 14,
                    "janusResultReference": "7",
                    "drivingDistance": 10.01,
                    "description": "Minibus",
                    "vehicleType": "LARGE",
                    "supplierName": "GTA Airport Taxi",
                    "bags": 10,
                    "nonRefundable": false,
                    "supplierId": 634,
                    "legPriceBreakdown": [
                        {
                            "supplierId": 634,
                            "supplierName": "GTA Airport Taxi",
                            "price": {
                                "currencyCode": "USD",
                                "amount": "190.31"
                            },
                            "supplierLocationId": 2197,
                            "journeyDirection": "OUTBOUND"
                        }
                    ],
                    "priceRuleId": 19049,
                    "resultId": "f189b88b-252f-47fc-bd4e-1e1aa0a4ee2d",
                    "descriptionLocalised": "Great if you’re travelling in a large group.",
                    "categoryLocalised": "Minibus",
                    "geniusDiscount": false,
                    "meetGreet": false
                }
            ]
        }
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "region": "Quebec",
                "dest_type": "city",
                "country": "Canada",
                "latitude": 45.4772081745239,
                "nr_hotels": 87,
                "cc1": "ca",
                "name": "Gatineau",
                "longitude": -75.7009476967505,
                "dest_id": -565140
            }
        ]
    }
]

2025-08-25 12:18:17,026 - evaluation_logger_Cross-314 - INFO - Function Calls: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Gatineau shopping mall"
        }
    }
]

2025-08-25 12:18:17,026 - evaluation_logger_Cross-314 - INFO - Golden Function Call: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Gatineau Shopping Mall"
        }
    },
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJc425bQoFzkwRrtsvYsNZihg",
            "drop_off_place_id": "ChIJCaoQCwEFzkwRJSbrTibrta0",
            "pick_up_date": "2024-12-10",
            "pick_up_time": "15:00"
        }
    }
]

2025-08-25 12:18:17,866 - evaluation_logger_Cross-314 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Gatineau shopping mall'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Gatineau Shopping Mall'}}
2025-08-25 12:18:26,595 - evaluation_logger_Cross-314 - DEBUG - LLM-based comparison output: {'is_equal': True, 'reason': "The queries 'Gatineau shopping mall' and 'Gatineau Shopping Mall' are equivalent as they refer to the same location, with only a difference in capitalization, which does not affect the meaning or the search results."}
2025-08-25 12:18:26,595 - evaluation_logger_Cross-314 - INFO - LLM-based compare success.
2025-08-25 12:18:26,595 - evaluation_logger_Cross-314 - INFO - Success matched: [{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Gatineau Shopping Mall'}}]
2025-08-25 12:18:26,595 - evaluation_logger_Cross-314 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "types": "shopping_area",
                "googlePlaceId": "ChIJCaoQCwEFzkwRJSbrTibrta0",
                "city": "Ottawa",
                "countryCode": "ca",
                "latitude": 45.42551,
                "country": "Canada",
                "longitude": -75.69333,
                "name": "Rideau Mall"
            }
        ]
    }
]

2025-08-25 12:18:38,173 - evaluation_logger_Cross-314 - INFO - Function Calls: 
[
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJc425bQoFzkwRrtsvYsNZihg",
            "drop_off_place_id": "ChIJCaoQCwEFzkwRJSbrTibrta0",
            "pick_up_date": "2024-12-10",
            "pick_up_time": "15:00"
        }
    }
]

2025-08-25 12:18:38,173 - evaluation_logger_Cross-314 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Taxi",
        "arguments": {
            "drop_off_place_id": "ChIJCaoQCwEFzkwRJSbrTibrta0",
            "pick_up_date": "2024-12-10",
            "pick_up_place_id": "ChIJc425bQoFzkwRrtsvYsNZihg",
            "pick_up_time": "15:00"
        }
    }
]

2025-08-25 12:18:38,173 - evaluation_logger_Cross-314 - INFO - Start compare_single_call: 
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJCaoQCwEFzkwRJSbrTibrta0', 'pick_up_date': '2024-12-10', 'pick_up_place_id': 'ChIJc425bQoFzkwRrtsvYsNZihg', 'pick_up_time': '15:00'}}
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJCaoQCwEFzkwRJSbrTibrta0', 'pick_up_date': '2024-12-10', 'pick_up_place_id': 'ChIJc425bQoFzkwRrtsvYsNZihg', 'pick_up_time': '15:00'}}
2025-08-25 12:18:38,173 - evaluation_logger_Cross-314 - INFO - Rule-based compare success.
2025-08-25 12:18:38,173 - evaluation_logger_Cross-314 - INFO - Success matched: [{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJCaoQCwEFzkwRJSbrTibrta0', 'pick_up_date': '2024-12-10', 'pick_up_place_id': 'ChIJc425bQoFzkwRrtsvYsNZihg', 'pick_up_time': '15:00'}}]
2025-08-25 12:18:38,174 - evaluation_logger_Cross-314 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "results": [
                {
                    "resultId": "ba42c0bf-8fdb-4310-9244-fbe8213ed432",
                    "cancellationLeadTimeMinutes": 1440,
                    "priceRuleId": 19043,
                    "nonRefundable": false,
                    "discountType": "NONE",
                    "meetGreet": false,
                    "price": {
                        "currencyCode": "USD",
                        "amount": "88.42"
                    },
                    "legPriceBreakdown": [
                        {
                            "supplierLocationId": 2448,
                            "price": {
                                "amount": "88.42",
                                "currencyCode": "USD"
                            },
                            "supplierName": "GTA Airport Taxi",
                            "supplierId": 634,
                            "journeyDirection": "OUTBOUND"
                        }
                    ],
                    "description": "Standard",
                    "descriptionLocalised": "Perfect for solo travellers, couples and small families.",
                    "drivingDistance": 0.99,
                    "janusResultReference": "1",
                    "supplierName": "GTA Airport Taxi",
                    "vehicleType": "STANDARD",
                    "passengerCapacity": 2,
                    "categoryLocalised": "Standard",
                    "supplierId": 634,
                    "duration": 4,
                    "category": "Standard",
                    "bags": 2,
                    "geniusDiscount": false
                },
                {
                    "vehicleType": "LARGE",
                    "supplierName": "GTA Airport Taxi",
                    "janusResultReference": "5",
                    "descriptionLocalised": "Great choice for families.",
                    "drivingDistance": 0.99,
                    "description": "People Carrier",
                    "legPriceBreakdown": [
                        {
                            "supplierName": "GTA Airport Taxi",
                            "supplierId": 634,
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 2448,
                            "price": {
                                "currencyCode": "USD",
                                "amount": "97.26"
                            }
                        }
                    ],
                    "price": {
                        "currencyCode": "USD",
                        "amount": "97.26"
                    },
                    "meetGreet": false,
                    "discountType": "NONE",
                    "priceRuleId": 19047,
                    "nonRefundable": false,
                    "cancellationLeadTimeMinutes": 1440,
                    "resultId": "adc554e1-3870-4959-a94e-853809e2bc93",
                    "geniusDiscount": false,
                    "bags": 4,
                    "category": "People Carrier",
                    "supplierId": 634,
                    "duration": 4,
                    "categoryLocalised": "People carrier",
                    "passengerCapacity": 4
                },
                {
                    "categoryLocalised": "Large people carrier",
                    "duration": 4,
                    "supplierId": 634,
                    "passengerCapacity": 5,
                    "bags": 5,
                    "geniusDiscount": false,
                    "category": "Large People Carrier",
                    "discountType": "NONE",
                    "meetGreet": false,
                    "resultId": "6a572b86-2b27-4b86-a6d9-6c429f6b966c",
                    "cancellationLeadTimeMinutes": 1440,
                    "nonRefundable": false,
                    "priceRuleId": 19048,
                    "drivingDistance": 0.99,
                    "descriptionLocalised": "Ideal for small groups.",
                    "janusResultReference": "6",
                    "vehicleType": "LARGE",
                    "supplierName": "GTA Airport Taxi",
                    "price": {
                        "currencyCode": "USD",
                        "amount": "114.94"
                    },
                    "legPriceBreakdown": [
                        {
                            "journeyDirection": "OUTBOUND",
                            "supplierId": 634,
                            "supplierName": "GTA Airport Taxi",
                            "price": {
                                "currencyCode": "USD",
                                "amount": "114.94"
                            },
                            "supplierLocationId": 2448
                        }
                    ],
                    "description": "Large People Carrier"
                },
                {
                    "janusResultReference": "2",
                    "vehicleType": "EXECUTIVE",
                    "supplierName": "GTA Airport Taxi",
                    "descriptionLocalised": "Plenty of space to travel in comfort.",
                    "drivingDistance": 0.99,
                    "legPriceBreakdown": [
                        {
                            "price": {
                                "currencyCode": "USD",
                                "amount": "132.62"
                            },
                            "supplierLocationId": 2197,
                            "journeyDirection": "OUTBOUND",
                            "supplierId": 634,
                            "supplierName": "GTA Airport Taxi"
                        }
                    ],
                    "description": "Executive",
                    "price": {
                        "amount": "132.62",
                        "currencyCode": "USD"
                    },
                    "meetGreet": false,
                    "discountType": "NONE",
                    "priceRuleId": 19044,
                    "nonRefundable": false,
                    "resultId": "3c56ecb9-7ba8-4736-b24b-83775bf7f9d4",
                    "cancellationLeadTimeMinutes": 1440,
                    "bags": 2,
                    "geniusDiscount": false,
                    "category": "Executive",
                    "supplierId": 634,
                    "duration": 4,
                    "categoryLocalised": "Executive",
                    "passengerCapacity": 2
                },
                {
                    "bags": 10,
                    "geniusDiscount": false,
                    "category": "Minibus",
                    "categoryLocalised": "Minibus",
                    "supplierId": 634,
                    "duration": 4,
                    "passengerCapacity": 10,
                    "descriptionLocalised": "Great if you’re travelling in a large group.",
                    "drivingDistance": 0.99,
                    "janusResultReference": "7",
                    "supplierName": "GTA Airport Taxi",
                    "vehicleType": "LARGE",
                    "price": {
                        "currencyCode": "USD",
                        "amount": "160.03"
                    },
                    "legPriceBreakdown": [
                        {
                            "supplierLocationId": 2197,
                            "price": {
                                "currencyCode": "USD",
                                "amount": "160.03"
                            },
                            "supplierName": "GTA Airport Taxi",
                            "supplierId": 634,
                            "journeyDirection": "OUTBOUND"
                        }
                    ],
                    "description": "Minibus",
                    "discountType": "NONE",
                    "meetGreet": false,
                    "resultId": "f3c35d51-2a2a-4cde-938c-ec5203613294",
                    "cancellationLeadTimeMinutes": 1440,
                    "nonRefundable": false,
                    "priceRuleId": 19049
                }
            ],
            "journeys": [
                {
                    "journeyDirection": "OUTBOUND",
                    "requestedPickupDateTime": "2024-12-10T15:00:00",
                    "pickupLocation": {
                        "country": "CA",
                        "city": "Ottawa",
                        "locationType": "GEO",
                        "description": "75 Laurier Ave E, Ottawa, ON K1N 6N5, Canada",
                        "postcode": "K1N 6N5",
                        "timezone": "America/Toronto",
                        "locationId": "ChIJc425bQoFzkwRrtsvYsNZihg",
                        "establishment": "University of Ottawa",
                        "name": "University of Ottawa, 75 Laurier Ave E, Ottawa, ON K1N 6N5, Canada"
                    },
                    "dropOffLocation": {
                        "establishment": "CF Rideau Centre",
                        "description": "50 Rideau St, Ottawa, ON K1N 9J7, Canada",
                        "locationType": "GEO",
                        "name": "CF Rideau Centre, 50 Rideau St, Ottawa, ON K1N 9J7, Canada",
                        "country": "CA",
                        "postcode": "K1N 9J7",
                        "locationId": "ChIJCaoQCwEFzkwRJSbrTibrta0",
                        "city": "Ottawa"
                    },
                    "janusSearchReference": "1a4fa768-407d-45ba-8412-f216075df3c7"
                }
            ]
        }
    }
]

2025-08-25 12:20:43,725 - evaluation_logger_Cross-314 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [《精尽 Spring Boot 源码分析 —— SpringApplication》](http://svip.iocoder.cn/Spring-Boot/SpringApplication/) 的**初始化**的源码解析。

在 SpringApplication 实例初始化的过程中，它会做如下几件事情：

1. 推断当前 WEB 应用类型
2. 设置 `applicationContextInitializers` 属性
3. 设置 `applicationListeners` 属性
4. 推断入口类

# 2. 构造方法

SpringApplication 的构造方法，用于初始化。而它重载了多个构造方法，如下图所示：

![构造方法](SpringApplication.assets/01.png)

- 一般情况下，我们会调用 `#SpringApplication(Class<?>... primarySources)` 构造方法，代码如下：

  ```java
  // SpringApplication.java
  
  public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
      this.resourceLoader = resourceLoader;
      Assert.notNull(primarySources, "PrimarySources must not be null");
      this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
      // <1> 推断当前 WEB 应用类型
      this.webApplicationType = deduceWebApplicationType();
      // <2> 设置 applicationContextInitializers 属性
      setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
      // <3> 设置 applicationListeners 属性
      setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
      // <4> 推断入口类
      this.mainApplicationClass = deduceMainApplicationClass();
  }
  ```

  - `<1>` 处，调用 `#deduceWebApplicationType()` 方法，推断当前 WEB 应用类型。
  - `<2>` 处，调用 `#setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers)` 方法，设置 `applicationContextInitializers` 属性。
  - `<3>` 处，调用 `#setListeners(Collection<? extends ApplicationListener<?>> listeners)` 方法，设置 `applicationListeners` 属性。
  - `<4>` 处，调用 `#deduceMainApplicationClass()` 方法，推断入口类。

- 其它构造方法，最终都会调用该构造方法。例如：

  ```java
  // SpringApplication.java
  
  public SpringApplication(Class<?>... primarySources) {
      this(null, primarySources);
  }
  ```

  - 直接调用上述的构造方法。

# 3. 推断 WEB 应用类型

`#deduceWebApplicationType()` 方法，推断当前 WEB 应用类型。代码如下：

```java
// SpringApplication.java

private WebApplicationType deduceWebApplicationType() {
    // 如果 classpath 下存在 org.springframework.web.reactive.DispatcherHandler
    if (ClassUtils.isPresent(REACTIVE_WEB_ENVIRONMENT_CLASS, null)
            && !ClassUtils.isPresent(MVC_WEB_ENVIRONMENT_CLASS, null)) {
        return WebApplicationType.REACTIVE;
    }
    // 如果 classpath 下不存在 javax.servlet.Servlet 和 org.springframework.web.context.ConfigurableWebApplicationContext
    for (String className : WEB_ENVIRONMENT_CLASSES) {
        if (!ClassUtils.isPresent(className, null)) {
            return WebApplicationType.NONE;
        }
    }
    // 以上都不是，说明是 Servlet Web 应用
    return WebApplicationType.SERVLET;
}
```

- 根据不同的条件，返回不同的 WebApplicationType 对象。
- WebApplicationType 枚举，代码如下：

  ```java
  // WebApplicationType.java
  
  public enum WebApplicationType {
  
      /**
       * 非 Web 项目
       */
      NONE,
  
      /**
       * Servlet Web 项目
       */
      SERVLET,
  
      /**
       * 响应式 Web 项目
       */
      REACTIVE;
  
  }
  ```

  - 三种类型。

- 判断的方式如下：

  - 首先，判断是否满足是响应式 Web 项目的条件。若满足，则返回 `WebApplicationType.REACTIVE` 。判断条件如下：
    - 存在 `"org.springframework.web.reactive.DispatcherHandler"` 类
    - 不存在 `"org.springframework.web.servlet.DispatcherServlet"` 类
  - 然后，判断是否满足非 Web 项目的条件。若满足，则返回 `WebApplicationType.NONE` 。判断条件如下：
    - 不存在 `"javax.servlet.Servlet"` 类
    - 不存在 `"org.springframework.web.context.ConfigurableWebApplicationContext"` 类
  - 最后，以上都不是，说明是 Servlet Web 应用，则返回 `WebApplicationType.SERVLET`。

# 4. 加载 ApplicationContextInitializer

`#getSpringFactoriesInstances(Class<T> type)` 方法，获得指定类对应的对象们。代码如下：

```java
// SpringApplication.java

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type) {
    return getSpringFactoriesInstances(type, new Class<?>[] {});
}

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    // Use names and ensure unique to protect against duplicates
    // <1> 加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组
    Set<String> names = new LinkedHashSet<>(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    // <2> 创建对象们
    List<T> instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    // <3> 排序对象们
    AnnotationAwareOrderComparator.sort(instances);
    return instances;
}
```

- `<1>` 处，调用 `SpringFactoriesLoader#loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader)` 方法，加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组。

  - 在 Spring Boot 中，`META-INF/spring.factories` 配置如下：

    ```properties
    # Application Context Initializers
    org.springframework.context.ApplicationContextInitializer=\
    org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\
    org.springframework.boot.context.ContextIdApplicationContextInitializer,\
    org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\
    org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer
    ```

    - 关于 SpringFactoriesLoader 的源码解析，可见 [《【死磕 Spring】—— IoC 之加载 BeanDefinition》](http://svip.iocoder.cn/Spring/IoC-load-BeanDefinitions/#3-3-2-loadFactoryNames) 的「3.3.2 loadFactoryNames」 小节。

- `<2>` 处，调用 `#createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names)` 方法，创建对象们。代码如下：

  ```java
  // SpringApplication.java
  
  private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes,
          ClassLoader classLoader, Object[] args, Set<String> names) {
      List<T> instances = new ArrayList<>(names.size());
      for (String name : names) {
          try {
              Class<?> instanceClass = ClassUtils.forName(name, classLoader);
              Assert.isAssignable(type, instanceClass);
              Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
              T instance = (T) BeanUtils.instantiateClass(constructor, args);
              instances.add(instance);
          } catch (Throwable ex) {
              throw new IllegalArgumentException("Cannot instantiate " + type + " : " + name, ex);
          }
      }
      return instances;
  }
  ```

  - 通过反射，创建对象。

- `<3>` 处，调用 `AnnotationAwareOrderComparator#sort(List<?> list)` 方法，排序对象们。

  - 关于 AnnotationAwareOrderComparator 的排序，可见 [《【死磕 Spring】—— ﻿@Order 注解和 Ordered 接口》](http://svip.iocoder.cn/Spring/Order-Ordered/) 。

- 在 `#setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers)` 方法中，设置到 `applicationContextInitializers` 属性中。代码如下：

  ```java
  // SpringApplication.java
  
  public void setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers) {
      this.initializers = new ArrayList<>();
      this.initializers.addAll(initializers);
  }
  ```

# 5. 加载 ApplicationListener

和「4. 加载 ApplicationContextInitializer」 基本一致，也是通过 `#getSpringFactoriesInstances(Class<T> type)` 方法，获得 ApplicationListener 类型对应的对象们。

- 在 Spring Boot 中，`META-INF/spring.factories` 配置如下：

  ```properties
  # Application Listeners
  org.springframework.context.ApplicationListener=\
  org.springframework.boot.ClearCachesApplicationListener,\
  org.springframework.boot.builder.ParentContextCloserApplicationListener,\
  org.springframework.boot.context.FileEncodingApplicationListener,\
  org.springframework.boot.context.config.AnsiOutputApplicationListener,\
  org.springframework.boot.context.config.ConfigFileApplicationListener,\
  org.springframework.boot.context.config.DelegatingApplicationListener,\
  org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\
  org.springframework.boot.context.logging.LoggingApplicationListener,\
  org.springframework.boot.liquibase.LiquibaseServiceApplicationListener
  ```

- 在 `#setListeners(Collection<? extends ApplicationListener<?>> listeners)` 方法中，设置到 `applicationListeners` 属性中。代码如下：

  ```java
  // SpringApplication.java
  
  public void setListeners(Collection<? extends ApplicationListener<?>> listeners) {
      this.listeners = new ArrayList<>();
      this.listeners.addAll(listeners);
  }
  ```

# 6. 推断入口类

`#deduceMainApplicationClass()` 方法，推断入口类。代码如下：

```java
// SpringApplication.java

private Class<?> deduceMainApplicationClass() {
    try {
        // 获得当前 StackTraceElement 数组
        StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();
        // 遍历 StackTraceElement 数组，判断哪个执行 main 方法
        for (StackTraceElement stackTraceElement : stackTrace) {
            if ("main".equals(stackTraceElement.getMethodName())) {
                return Class.forName(stackTraceElement.getClassName());
            }
        }
    } catch (ClassNotFoundException ex) {
        // Swallow and continue
    }
    return null;
}
```

- 通过构造一个 RuntimeException 异常，通过异常堆栈，在堆栈中，从下往上，判断哪个执行了 `#main(String[] args)` 方法，从而推断出入口的类。

# 7. 总结

至此，SpringApplication 的初始化，我们已经完成。后续，我们将开始分析 `#run(String... args)` 方法。

2025-08-25 12:20:50,379 - evaluation_logger_Cross-314 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about arranging taxis for the trips.'}
2025-08-25 12:20:56,551 - evaluation_logger_Cross-314 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:20:56,551 - evaluation_logger_Cross-314 - INFO - Message: Success.
2025-08-25 12:20:56,551 - evaluation_logger_Cross-314 - INFO - Success turn num = 4
2025-08-25 12:20:56,551 - evaluation_logger_Cross-314 - INFO - ----------------------------------------------------------------------------------------------------
