2025-08-25 12:39:01,062 - evaluation_logger_Hotels-54 - INFO - Test Example Hotels-54
2025-08-25 12:39:01,062 - evaluation_logger_Hotels-54 - INFO - Query: My friends and I are planning to go to Tokyo to celebrate New Year's from December 1, 2024, to December 10, 2024. We hope to find a hotel near Senso-ji. We also want detailed information and payment options for these hotels.
2025-08-25 12:39:09,271 - evaluation_logger_Hotels-54 - INFO - Function Calls: 
[
    {
        "name": "Location_to_Lat_Long",
        "arguments": {
            "query": "Senso-ji"
        }
    }
]

2025-08-25 12:39:09,271 - evaluation_logger_Hotels-54 - INFO - Golden Function Call: 
[
    {
        "name": "Location_to_Lat_Long",
        "arguments": {
            "query": "Senso-ji"
        }
    },
    {
        "name": "Search_Hotels_By_Coordinates",
        "arguments": {
            "arrival_date": "2024-12-01",
            "departure_date": "2024-12-10",
            "latitude": "35.7147651",
            "longitude": "139.7966553"
        }
    }
]

2025-08-25 12:39:09,272 - evaluation_logger_Hotels-54 - INFO - Start compare_single_call: 
{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'Senso-ji'}}
{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'Senso-ji'}}
2025-08-25 12:39:09,272 - evaluation_logger_Hotels-54 - INFO - Rule-based compare success.
2025-08-25 12:39:09,272 - evaluation_logger_Hotels-54 - INFO - Success matched: [{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'Senso-ji'}}]
2025-08-25 12:39:09,272 - evaluation_logger_Hotels-54 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "business_status": "OPERATIONAL",
                "formatted_address": "2 Chome-3-1 Asakusa, Taito City, Tokyo 111-0032, Japan",
                "geometry": {
                    "location": {
                        "lat": 35.7147651,
                        "lng": 139.7966553
                    },
                    "viewport": {
                        "northeast": {
                            "lat": 35.71796395,
                            "lng": 139.7989034
                        },
                        "southwest": {
                            "lat": 35.70851815000001,
                            "lng": 139.793949
                        }
                    }
                },
                "name": "Sensō-ji",
                "place_id": "ChIJ8T1GpMGOGGARDYGSgpooDWw",
                "plus_code": {
                    "compound_code": "PQ7W+WM Taito City, Tokyo, Japan",
                    "global_code": "8Q7XPQ7W+WM"
                },
                "rating": 4.5,
                "reference": "ChIJ8T1GpMGOGGARDYGSgpooDWw",
                "types": [
                    "tourist_attraction",
                    "place_of_worship",
                    "point_of_interest",
                    "establishment"
                ],
                "user_ratings_total": 75950
            }
        ]
    }
]

2025-08-25 12:39:20,121 - evaluation_logger_Hotels-54 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotels_By_Coordinates",
        "arguments": {
            "latitude": "35.7147651",
            "longitude": "139.7966553",
            "arrival_date": "2024-12-01",
            "departure_date": "2024-12-10"
        }
    }
]

2025-08-25 12:39:20,121 - evaluation_logger_Hotels-54 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels_By_Coordinates",
        "arguments": {
            "arrival_date": "2024-12-01",
            "departure_date": "2024-12-10",
            "latitude": "35.7147651",
            "longitude": "139.7966553"
        }
    },
    {
        "name": "Get_Hotel_Details",
        "arguments": {
            "hotel_id": "6232583"
        }
    },
    {
        "name": "Payment_features_of_the_Hotel",
        "arguments": {
            "hotel_id": "6232583"
        }
    }
]

2025-08-25 12:39:20,121 - evaluation_logger_Hotels-54 - INFO - Start compare_single_call: 
{'name': 'Search_Hotels_By_Coordinates', 'arguments': {'arrival_date': '2024-12-01', 'departure_date': '2024-12-10', 'latitude': '35.7147651', 'longitude': '139.7966553'}}
{'name': 'Search_Hotels_By_Coordinates', 'arguments': {'arrival_date': '2024-12-01', 'departure_date': '2024-12-10', 'latitude': '35.7147651', 'longitude': '139.7966553'}}
2025-08-25 12:39:20,121 - evaluation_logger_Hotels-54 - INFO - Rule-based compare success.
2025-08-25 12:39:20,121 - evaluation_logger_Hotels-54 - INFO - Success matched: [{'name': 'Search_Hotels_By_Coordinates', 'arguments': {'arrival_date': '2024-12-01', 'departure_date': '2024-12-10', 'latitude': '35.7147651', 'longitude': '139.7966553'}}]
2025-08-25 12:39:20,121 - evaluation_logger_Hotels-54 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "primary_count": 1,
            "count": 1,
            "unfiltered_count": 11631,
            "result": [
                {
                    "hotel_id": 6232583,
                    "is_no_prepayment_block": 1,
                    "is_free_cancellable": 1,
                    "default_wishlist_name": "Urayasu",
                    "is_smart_deal": 0,
                    "last_reservation_data": {
                        "last_reservation_ellapsed_months": 1
                    },
                    "id": "property_card_6232583",
                    "hotel_has_vb_boost": 0,
                    "city": "Urayasu",
                    "checkout": {
                        "until": "12:00"
                    },
                    "review_nr": 9015,
                    "extended": 0,
                    "default_language": "ja",
                    "class_is_estimated": 0,
                    "longitude": 139.874133255295,
                    "hotel_name_trans": "Grand Nikko Tokyo Bay Maihama",
                    "city_in_trans": "in Urayasu",
                    "preferred": 1,
                    "countrycode": "jp",
                    "review_score_word": "Fabulous",
                    "checkin": {
                        "until": "00:00",
                        "from": "15:00"
                    },
                    "class": 5,
                    "bwallet": {
                        "hotel_eligibility": 0
                    },
                    "is_genius_deal": 0,
                    "accommodation_type": 204,
                    "has_swimming_pool": 1,
                    "genius_discount_percentage": 0,
                    "soldout": 0,
                    "hotel_include_breakfast": 0,
                    "main_photo_id": 299373116,
                    "currencycode": "JPY",
                    "min_total_price": 339200,
                    "timezone": "Asia/Tokyo",
                    "block_ids": [
                        "623258317_401672466_2_2_0"
                    ],
                    "review_score": 8.9,
                    "preferred_plus": 0,
                    "hotel_name": "Grand Nikko Tokyo Bay Maihama",
                    "composite_price_breakdown": {
                        "client_translations": {
                            "tooltip_total_text": "Total"
                        },
                        "all_inclusive_amount": {
                            "amount_unrounded": "US$2,267.30",
                            "currency": "USD",
                            "amount_rounded": "US$2,267",
                            "value": 2267.30367329965
                        },
                        "gross_amount_hotel_currency": {
                            "amount_rounded": "¥339,200",
                            "value": 339200,
                            "amount_unrounded": "¥339,200",
                            "currency": "JPY"
                        },
                        "has_long_stays_monthly_rate_price": 0,
                        "price_display_config": [
                            {
                                "key": "use_nightly_prices",
                                "value": 0
                            }
                        ],
                        "net_amount": {
                            "amount_rounded": "US$2,061",
                            "value": 2061.18515754513,
                            "currency": "USD",
                            "amount_unrounded": "US$2,061.19"
                        },
                        "has_long_stays_weekly_rate_price": 0,
                        "items": [
                            {
                                "base": {
                                    "percentage": 10,
                                    "kind": "percentage"
                                },
                                "item_amount": {
                                    "amount_rounded": "US$206",
                                    "value": 206.118515754513,
                                    "currency": "USD",
                                    "amount_unrounded": "US$206.12"
                                },
                                "kind": "charge",
                                "inclusion_type": "included",
                                "details": "10 % VAT",
                                "name": "VAT"
                            },
                            {
                                "base": {
                                    "base_amount": 0,
                                    "kind": "incalculable"
                                },
                                "item_amount": {
                                    "currency": "USD",
                                    "amount_unrounded": "US$0",
                                    "amount_rounded": "US$0",
                                    "value": 0
                                },
                                "inclusion_type": "excluded",
                                "kind": "charge",
                                "name": "City tax"
                            }
                        ],
                        "all_inclusive_amount_hotel_currency": {
                            "amount_rounded": "¥339,200",
                            "value": 339200,
                            "currency": "JPY",
                            "amount_unrounded": "¥339,200"
                        },
                        "excluded_amount": {
                            "currency": "USD",
                            "amount_unrounded": "US$0",
                            "amount_rounded": "US$0",
                            "value": 0
                        },
                        "charges_details": {
                            "mode": "incalculable",
                            "amount": {
                                "value": 0,
                                "currency": "USD"
                            }
                        },
                        "gross_amount_per_night": {
                            "currency": "USD",
                            "amount_unrounded": "US$251.92",
                            "value": 251.922630366627,
                            "amount_rounded": "US$252"
                        },
                        "included_taxes_and_charges_amount": {
                            "amount_unrounded": "US$206.12",
                            "currency": "USD",
                            "value": 206.118515754513,
                            "amount_rounded": "US$206"
                        },
                        "gross_amount": {
                            "currency": "USD",
                            "amount_unrounded": "US$2,267.30",
                            "value": 2267.30367329965,
                            "amount_rounded": "US$2,267"
                        }
                    },
                    "unit_configuration_label": "<b>Hotel room</b>: 2 beds",
                    "latitude": 35.6293385591508,
                    "type": "property_card",
                    "ufi": -247488
                }
            ],
            "b_max_los_data": {
                "is_fullon": 0,
                "experiment": "long_stays_ios_extend_los_3",
                "default_los": 30,
                "has_extended_los": 1,
                "extended_los": 90,
                "max_allowed_los": 90
            },
            "room_distribution": [
                {
                    "adults": "1"
                }
            ],
            "unfiltered_primary_count": 11631,
            "page_loading_threshold": 10,
            "extended_count": 0
        }
    }
]

2025-08-25 12:39:28,771 - evaluation_logger_Hotels-54 - INFO - Function Calls: 
[
    {
        "name": "Get_Hotel_Details",
        "arguments": {
            "hotel_id": "6232583"
        }
    },
    {
        "name": "Payment_features_of_the_Hotel",
        "arguments": {
            "hotel_id": "6232583"
        }
    }
]

2025-08-25 12:39:28,771 - evaluation_logger_Hotels-54 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Hotel_Details",
        "arguments": {
            "hotel_id": "6232583"
        }
    },
    {
        "name": "Payment_features_of_the_Hotel",
        "arguments": {
            "hotel_id": "6232583"
        }
    }
]

2025-08-25 12:39:28,771 - evaluation_logger_Hotels-54 - INFO - Start compare_single_call: 
{'name': 'Get_Hotel_Details', 'arguments': {'hotel_id': '6232583'}}
{'name': 'Get_Hotel_Details', 'arguments': {'hotel_id': '6232583'}}
2025-08-25 12:39:28,771 - evaluation_logger_Hotels-54 - INFO - Rule-based compare success.
2025-08-25 12:39:28,771 - evaluation_logger_Hotels-54 - INFO - Start compare_single_call: 
{'name': 'Payment_features_of_the_Hotel', 'arguments': {'hotel_id': '6232583'}}
{'name': 'Payment_features_of_the_Hotel', 'arguments': {'hotel_id': '6232583'}}
2025-08-25 12:39:28,771 - evaluation_logger_Hotels-54 - INFO - Rule-based compare success.
2025-08-25 12:39:28,771 - evaluation_logger_Hotels-54 - INFO - Success matched: [{'name': 'Get_Hotel_Details', 'arguments': {'hotel_id': '6232583'}}, {'name': 'Payment_features_of_the_Hotel', 'arguments': {'hotel_id': '6232583'}}]
2025-08-25 12:39:28,772 - evaluation_logger_Hotels-54 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "ufi": -247488,
            "hotel_id": 6232583,
            "hotel_name": "Grand Nikko Tokyo Bay Maihama",
            "review_nr": 9015,
            "arrival_date": "2024-12-01",
            "departure_date": "2024-12-10",
            "price_transparency_mode": "none",
            "accommodation_type_name": "Hotels",
            "latitude": 35.6293385591508,
            "longitude": 139.874133255295,
            "address": "Maihama 1-7",
            "city": "Urayasu",
            "city_trans": "Urayasu",
            "city_in_trans": "in Urayasu",
            "city_name_en": "Urayasu",
            "countrycode": "jp",
            "distance_to_cc": 2.59053807121547,
            "default_language": "ja",
            "country_trans": "Japan",
            "currency_code": "JPY",
            "zip": "279-0031",
            "timezone": "Asia/Tokyo",
            "rare_find_state": "NOT_RARE",
            "soldout": 0,
            "available_rooms": 7,
            "max_rooms_in_reservation": 10,
            "is_family_friendly": 0,
            "is_closed": 0,
            "is_crimea": 0,
            "is_hotel_ctrip": 0,
            "is_price_transparent": 0,
            "is_genius_deal": 0,
            "is_cash_accepted_check_enabled": 1,
            "qualifies_for_no_cc_reservation": 0,
            "hotel_include_breakfast": 1,
            "opted_out_from_gallery_changes": 1,
            "cc1": "jp",
            "family_facilities": [
                "Indoor pool",
                "Family rooms",
                "Outdoor pool",
                "Indoor pool (all year)",
                "Outdoor pool (seasonal)"
            ],
            "product_price_breakdown": {
                "charges_details": {
                    "amount": {
                        "currency": "USD",
                        "value": 0
                    },
                    "mode": "incalculable"
                },
                "all_inclusive_amount": {
                    "amount_rounded": "US$2,267",
                    "currency": "USD",
                    "amount_unrounded": "US$2,267.30",
                    "value": 2267.30367329965
                },
                "has_long_stays_weekly_rate_price": 0,
                "nr_stays": 7,
                "gross_amount": {
                    "amount_rounded": "US$2,267",
                    "amount_unrounded": "US$2,267.30",
                    "currency": "USD",
                    "value": 2267.30367329965
                },
                "items": [
                    {
                        "inclusion_type": "included",
                        "item_amount": {
                            "value": 206.118515754513,
                            "amount_unrounded": "US$206.12",
                            "currency": "USD",
                            "amount_rounded": "US$206"
                        },
                        "base": {
                            "percentage": 10,
                            "kind": "percentage"
                        },
                        "kind": "charge",
                        "details": "10 % VAT",
                        "name": "VAT"
                    },
                    {
                        "inclusion_type": "excluded",
                        "item_amount": {
                            "amount_rounded": "US$0",
                            "currency": "USD",
                            "amount_unrounded": "US$0",
                            "value": 0
                        },
                        "kind": "charge",
                        "base": {
                            "base_amount": 0,
                            "kind": "incalculable"
                        },
                        "name": "City tax"
                    }
                ],
                "gross_amount_per_night": {
                    "value": 251.922630366627,
                    "currency": "USD",
                    "amount_unrounded": "US$251.92",
                    "amount_rounded": "US$252"
                },
                "gross_amount_hotel_currency": {
                    "amount_rounded": "¥339,200",
                    "value": 339200,
                    "currency": "JPY",
                    "amount_unrounded": "¥339,200"
                },
                "included_taxes_and_charges_amount": {
                    "amount_rounded": "US$206",
                    "currency": "USD",
                    "amount_unrounded": "US$206.12",
                    "value": 206.118515754513
                },
                "net_amount": {
                    "value": 2061.18515754513,
                    "currency": "USD",
                    "amount_unrounded": "US$2,061.19",
                    "amount_rounded": "US$2,061"
                },
                "all_inclusive_amount_hotel_currency": {
                    "amount_unrounded": "¥339,200",
                    "currency": "JPY",
                    "value": 339200,
                    "amount_rounded": "¥339,200"
                },
                "has_long_stays_monthly_rate_price": 0,
                "price_display_config": [
                    {
                        "value": 0,
                        "key": "use_nightly_prices"
                    }
                ],
                "client_translations": {
                    "tooltip_total_text": "Total"
                },
                "excluded_amount": {
                    "amount_unrounded": "US$0",
                    "currency": "USD",
                    "value": 0,
                    "amount_rounded": "US$0"
                }
            },
            "composite_price_breakdown": {
                "charges_details": {
                    "mode": "incalculable",
                    "amount": {
                        "value": 0,
                        "currency": "USD"
                    }
                },
                "all_inclusive_amount": {
                    "amount_rounded": "US$2,267",
                    "value": 2267.30367329965,
                    "currency": "USD",
                    "amount_unrounded": "US$2,267.30"
                },
                "gross_amount": {
                    "amount_rounded": "US$2,267",
                    "value": 2267.30367329965,
                    "amount_unrounded": "US$2,267.30",
                    "currency": "USD"
                },
                "items": [
                    {
                        "details": "10 % VAT",
                        "name": "VAT",
                        "base": {
                            "percentage": 10,
                            "kind": "percentage"
                        },
                        "kind": "charge",
                        "item_amount": {
                            "amount_rounded": "US$206",
                            "value": 206.118515754513,
                            "currency": "USD",
                            "amount_unrounded": "US$206.12"
                        },
                        "inclusion_type": "included"
                    },
                    {
                        "inclusion_type": "excluded",
                        "item_amount": {
                            "amount_rounded": "US$0",
                            "currency": "USD",
                            "amount_unrounded": "US$0",
                            "value": 0
                        },
                        "base": {
                            "base_amount": 0,
                            "kind": "incalculable"
                        },
                        "kind": "charge",
                        "name": "City tax"
                    }
                ],
                "has_long_stays_weekly_rate_price": 0,
                "all_inclusive_amount_hotel_currency": {
                    "amount_rounded": "¥339,200",
                    "currency": "JPY",
                    "amount_unrounded": "¥339,200",
                    "value": 339200
                },
                "included_taxes_and_charges_amount": {
                    "amount_rounded": "US$206",
                    "amount_unrounded": "US$206.12",
                    "currency": "USD",
                    "value": 206.118515754513
                },
                "net_amount": {
                    "amount_unrounded": "US$2,061.19",
                    "currency": "USD",
                    "value": 2061.18515754513,
                    "amount_rounded": "US$2,061"
                },
                "gross_amount_hotel_currency": {
                    "amount_rounded": "¥339,200",
                    "currency": "JPY",
                    "amount_unrounded": "¥339,200",
                    "value": 339200
                },
                "gross_amount_per_night": {
                    "value": 251.922630366627,
                    "currency": "USD",
                    "amount_unrounded": "US$251.92",
                    "amount_rounded": "US$252"
                },
                "excluded_amount": {
                    "value": 0,
                    "currency": "USD",
                    "amount_unrounded": "US$0",
                    "amount_rounded": "US$0"
                },
                "client_translations": {
                    "tooltip_total_text": "Total"
                },
                "has_long_stays_monthly_rate_price": 0,
                "price_display_config": [
                    {
                        "key": "use_nightly_prices",
                        "value": 0
                    }
                ]
            },
            "property_highlight_strip": [
                {
                    "icon_list": [
                        {
                            "icon": "iconset/parking_sign",
                            "size": 1
                        }
                    ],
                    "name": "Parking"
                },
                {
                    "name": "Indoor pool",
                    "icon_list": [
                        {
                            "size": 1,
                            "icon": "iconset/pool"
                        }
                    ]
                },
                {
                    "icon_list": [
                        {
                            "icon": "iconset/food",
                            "size": 1
                        }
                    ],
                    "name": "Restaurant"
                },
                {
                    "name": "Balcony",
                    "icon_list": [
                        {
                            "icon": "iconset/checkmark",
                            "size": 1
                        }
                    ]
                },
                {
                    "name": "Air conditioning",
                    "icon_list": [
                        {
                            "icon": "iconset/snowflake",
                            "size": 1
                        }
                    ]
                }
            ],
            "facilities_block": {
                "name": "Most popular facilities",
                "facilities": [
                    {
                        "icon": "pool",
                        "name": "2 swimming pools"
                    },
                    {
                        "name": "Non-smoking rooms",
                        "icon": "nosmoking"
                    },
                    {
                        "icon": "wifi",
                        "name": "Free WiFi"
                    },
                    {
                        "name": "Facilities for disabled guests",
                        "icon": "disabled"
                    },
                    {
                        "name": "WiFi available in all areas",
                        "icon": "wifi"
                    }
                ],
                "type": "popular"
            },
            "top_ufi_benefits": [
                {
                    "translated_name": "Parking",
                    "icon": "parking_sign"
                },
                {
                    "icon": "nosmoking",
                    "translated_name": "Non-smoking rooms"
                }
            ],
            "languages_spoken": {
                "languagecode": [
                    "ja",
                    "en-gb"
                ]
            },
            "spoken_languages": [
                "ja",
                "en-gb"
            ],
            "breakfast_review_score": {
                "review_number": 76,
                "review_score": 8.7,
                "review_count": 76,
                "review_score_word": "Fabulous",
                "rating": 8.7
            },
            "wifi_review_score": {
                "rating": 8.8
            },
            "min_room_distribution": {
                "adults": 1
            },
            "aggregated_data": {
                "common_kitchen_fac": [
                    {
                        "id": 22,
                        "name": "Refrigerator"
                    },
                    {
                        "id": 86,
                        "name": "Electric kettle"
                    }
                ],
                "has_seating": 1,
                "has_refundable": 1,
                "has_nonrefundable": 0,
                "has_kitchen": 0
            },
            "free_facilities_cancel_breakfast": [
                {
                    "facility_id": 128
                },
                {
                    "facility_id": 105
                }
            ],
            "room_recommendation": [
                {
                    "extra_babycots_price": 0,
                    "children": 0,
                    "extra_babycots_price_in_hotel_currency": 0,
                    "extra_beds_for_adults_price_in_hotel_currency": 0,
                    "extra_beds_for_children_price_in_hotel_currency": 0,
                    "adults": 1,
                    "number_of_extra_babycots": 0,
                    "total_extra_bed_price_in_hotel_currency": 0,
                    "number_of_extra_beds_and_babycots_total": 0,
                    "extra_beds_for_children_price": 0,
                    "number_of_extra_beds_for_adults": 0,
                    "babies": 0,
                    "block_id": "623258317_401672466_2_2_0",
                    "total_extra_bed_price": 0,
                    "extra_beds_for_adults_price": 0,
                    "number_of_extra_beds_for_children": 0
                }
            ],
            "hotel_important_information_with_codes": [
                {
                    "phrase": "In response to Coronavirus (COVID-19), additional safety and sanitation measures are in effect at this property.",
                    "executing_phase": 0,
                    "sentence_id": 50
                },
                {
                    "sentence_id": 54,
                    "phrase": "Due to Coronavirus (COVID-19), this property is taking steps to help protect the safety of guests and staff. Certain services and amenities may be reduced or unavailable as a result.",
                    "executing_phase": 0
                },
                {
                    "executing_phase": 0,
                    "phrase": "Guests are required to show a photo identification and credit card upon check-in. Please note that all Special Requests are subject to availability and additional charges may apply.",
                    "sentence_id": 3
                },
                {
                    "sentence_id": 45,
                    "phrase": "Grand Bleu (Outdoor Pool) is closed from Tue 17 Sept 2024 until Thu 31 Jul 2025",
                    "executing_phase": 0
                }
            ],
            "rooms": {
                "623258317": {
                    "facilities": [
                        {
                            "facilitytype_id": 4,
                            "name": "Safety deposit box",
                            "id": 6,
                            "alt_facilitytype_id": 1,
                            "alt_facilitytype_name": "General"
                        },
                        {
                            "alt_facilitytype_name": "Accessibility",
                            "alt_facilitytype_id": 19,
                            "id": 132,
                            "name": "Upper floors accessible by elevator",
                            "facilitytype_id": 19
                        },
                        {
                            "alt_facilitytype_id": 6,
                            "id": 75,
                            "facilitytype_id": 6,
                            "name": "Flat-screen TV",
                            "alt_facilitytype_name": "Media & Technology"
                        },
                        {
                            "alt_facilitytype_name": "Safety features",
                            "name": "Air purifiers",
                            "facilitytype_id": 37,
                            "alt_facilitytype_id": 37,
                            "id": 215
                        },
                        {
                            "name": "Towels",
                            "facilitytype_id": 8,
                            "id": 124,
                            "alt_facilitytype_id": 5,
                            "alt_facilitytype_name": "Bathroom"
                        }
                    ],
                    "private_bathroom_highlight": {
                        "has_highlight": 1
                    },
                    "description": "The twin room includes a private bathroom, well-fitted with a bath, a shower, a bidet, a hairdryer and slippers. This twin room is air-conditioned and has a seating area with a flat-screen TV, a tea and coffee maker, a wardrobe, a safe deposit box, as well as a carpeted floor. The unit has 2 beds.",
                    "children_and_beds_text": {
                        "cribs_and_extra_beds": [
                            {
                                "highlight": 0,
                                "text": "There is no capacity for extra beds or cots."
                            }
                        ],
                        "children_at_the_property": [
                            {
                                "text": "Children of any age are welcome.",
                                "highlight": 0
                            },
                            {
                                "text": "Children 4 years and above will be charged as adults at this property.",
                                "highlight": 0
                            },
                            {
                                "highlight": 1,
                                "text": "To see correct prices and occupancy information, please add the number of children in your group and their ages to your search."
                            }
                        ],
                        "allow_children": 1
                    },
                    "photos_may_sorted": 1,
                    "bed_configurations": [
                        {
                            "bed_types": [
                                {
                                    "name_with_count": "2 single beds",
                                    "description": "90-130 cm wide",
                                    "count": 2,
                                    "name": "Single bed(s)",
                                    "bed_type": 1,
                                    "description_imperial": "35-51 inches wide"
                                }
                            ]
                        }
                    ],
                    "highlights": [
                        {
                            "icon": "wifi",
                            "translated_name": "Free WiFi"
                        },
                        {
                            "translated_name": "Balcony",
                            "icon": "checkmark",
                            "id": 17
                        },
                        {
                            "id": 113,
                            "translated_name": "Landmark view",
                            "icon": "landmark"
                        },
                        {
                            "id": 11,
                            "translated_name": "Air conditioning",
                            "icon": "snowflake"
                        },
                        {
                            "id": 38,
                            "translated_name": "Ensuite bathroom",
                            "icon": "bath"
                        }
                    ],
                    "private_bathroom_count": 0
                }
            },
            "block": [
                {
                    "room_name": "<4-6 Floor> Garden Standard Twin Room with Park View - Non Smoking - No guarantee to enter the theme park",
                    "package_id": 0,
                    "name": "<4-6 Floor> Garden Standard Twin Room with Park View - Free cancellation - No guarantee to enter the theme park - Non Smoking",
                    "room_id": 623258317,
                    "nr_adults": 2,
                    "name_without_policy": "<4-6 Floor> Garden Standard Twin Room with Park View - No guarantee to enter the theme park - Non Smoking",
                    "refundable": 1,
                    "is_smart_deal": 0,
                    "is_domestic_rate": 0,
                    "block_id": "623258317_401672466_2_2_0",
                    "mealplan": "Breakfast US$25",
                    "deposit_required": 0,
                    "max_children_free_age": 12,
                    "all_inclusive": 0,
                    "max_occupancy": "2",
                    "nr_children": 0,
                    "is_block_fit": 1,
                    "pod_ios_migrate_policies_to_smp_fullon": 0,
                    "room_surface_in_feet2": 301.3894912,
                    "roomtype_id": 8,
                    "is_flash_deal": 0,
                    "refundable_until": "2024-11-23 23:59:59 +0900",
                    "block_text": {
                        "policies": [
                            {
                                "class": "POLICY_CANCELLATION",
                                "content": "You may cancel free of charge until 7 days before arrival. If you cancel in the 7 days before arrival, the cancellation fee will be the cost of the first night. If you don't show up, the no-show fee will be the total price of the reservation."
                            },
                            {
                                "content": "No prepayment is needed.",
                                "class": "POLICY_PREPAY"
                            },
                            {
                                "content": "Breakfast US$25",
                                "class": "POLICY_HOTEL_MEALPLAN",
                                "mealplan_vector": "2"
                            },
                            {
                                "class": "POLICY_TITLE",
                                "content": "General"
                            }
                        ]
                    },
                    "number_of_bedrooms": 0,
                    "is_last_minute_deal": 0,
                    "babycots_available": 0,
                    "extrabed_available": 0,
                    "paymentterms": {
                        "cancellation": {
                            "non_refundable_anymore": 0,
                            "bucket": "SMP_MODERATE",
                            "type": "free_cancellation",
                            "type_translation": "Free cancellation",
                            "guaranteed_non_refundable": 0,
                            "timeline": {
                                "stages": [
                                    {
                                        "u_fee_remaining_pretty": "US$ 2267",
                                        "u_fee_pretty": "US$ 0",
                                        "limit_until_time": "23:59",
                                        "stage_fee_pretty": "&#165; 0",
                                        "stage_translation": "Free to cancel",
                                        "fee_remaining": 339200,
                                        "is_effective": 1,
                                        "text_refundable": "You'll get a full refund if you cancel before 23:59 on 23 November 2024.",
                                        "limit_timezone": "Urayasu",
                                        "u_stage_fee": "0.00",
                                        "u_stage_fee_pretty": "US$ 0",
                                        "limit_until": "23 November 2024 23:59",
                                        "limit_from_time": "12:13",
                                        "limit_until_raw": "2024-11-23 23:59:59",
                                        "limit_from": "22 October 2024 12:13",
                                        "b_number": 0,
                                        "text": "Free cancellation until 23:59 on 23 Nov",
                                        "effective_number": 0,
                                        "limit_from_raw": "2024-10-22 12:13:57",
                                        "u_fee_remaining": "2267.30",
                                        "fee_remaining_pretty": "&#165; 339200",
                                        "fee": 0,
                                        "u_fee": "0.00",
                                        "b_state": "FREE",
                                        "current_stage": 1,
                                        "fee_pretty": "&#165; 0",
                                        "is_free": 1,
                                        "date_until": "2024-11-23 23:59:59 +0900",
                                        "limit_until_date": "23 November 2024",
                                        "stage_fee": 0,
                                        "limit_from_date": "22 October 2024",
                                        "fee_rounded": 0
                                    },
                                    {
                                        "b_number": 1,
                                        "limit_from": "24 November 2024 00:00",
                                        "limit_until_raw": "2024-11-24 00:00:00",
                                        "limit_from_time": "00:00",
                                        "u_stage_fee": "251.92",
                                        "limit_until": "24 November 2024 00:00",
                                        "u_stage_fee_pretty": "US$ 252",
                                        "fee_remaining": 301511.111111111,
                                        "text_refundable": "If you cancel from 24 November 2024, you'll get a US$ 2015 refund.",
                                        "is_effective": 1,
                                        "limit_timezone": "Urayasu",
                                        "stage_translation": "Partial refund if you cancel",
                                        "date_from": "2024-11-24 00:00:00 +0900",
                                        "stage_fee_pretty": "&#165; 37689",
                                        "u_fee_pretty": "US$ 252",
                                        "u_fee_remaining_pretty": "US$ 2015",
                                        "limit_until_time": "00:00",
                                        "amount": 251.92,
                                        "fee_rounded": 37689,
                                        "amount_pretty": "US$ 252",
                                        "stage_fee": 37688.8888888889,
                                        "limit_from_date": "24 November 2024",
                                        "limit_until_date": "24 November 2024",
                                        "is_free": 0,
                                        "fee_pretty": "&#165; 37688",
                                        "current_stage": 0,
                                        "u_fee": "251.92",
                                        "b_state": "PAID",
                                        "fee": 37688.8888888889,
                                        "u_fee_remaining": "2015.38",
                                        "fee_remaining_pretty": "&#165; 301511",
                                        "limit_from_raw": "2024-11-24 00:00:00",
                                        "effective_number": 1,
                                        "text": "From 00:00 on 24 Nov"
                                    },
                                    {
                                        "date_from": "2024-12-02 00:00:00 +0900",
                                        "stage_translation": "No refund if you cancel",
                                        "fee_remaining": -37688.8888888889,
                                        "is_effective": 1,
                                        "text_refundable": "If you cancel from 2 December 2024, you will no longer be eligible for a refund.",
                                        "limit_timezone": "Urayasu",
                                        "u_fee_pretty": "US$ 2267",
                                        "u_fee_remaining_pretty": "US$ -251",
                                        "stage_fee_pretty": "&#165; 339200",
                                        "limit_from_time": "00:00",
                                        "limit_from": "2 December 2024 00:00",
                                        "b_number": 2,
                                        "u_stage_fee": "2267.30",
                                        "u_stage_fee_pretty": "US$ 2267",
                                        "fee": 339200,
                                        "u_fee": "2267.30",
                                        "b_state": "NONREF",
                                        "current_stage": 0,
                                        "text": "From 00:00 on 2 Dec",
                                        "effective_number": 2,
                                        "limit_from_raw": "2024-12-02 00:00:00",
                                        "is_noshow": 1,
                                        "u_fee_remaining": "-251.92",
                                        "fee_remaining_pretty": "&#165; -37688",
                                        "limit_from_date": "2 December 2024",
                                        "amount_pretty": "US$ 2267",
                                        "stage_fee": 339200,
                                        "fee_rounded": 339200,
                                        "amount": "2267.30",
                                        "fee_pretty": "&#165; 339200",
                                        "is_free": 0
                                    }
                                ],
                                "nr_stages": 3,
                                "policygroup_instance_id": "37/152/337",
                                "currency_code": "JPY",
                                "u_currency_code": "USD"
                            },
                            "info": {
                                "refundable_date_midnight": "2024-11-23T23:59:59+09:00",
                                "timezone": "JST",
                                "time": "00:00",
                                "refundable_date": "2024-11-24T00:00:00+09:00",
                                "refundable": 1,
                                "time_before_midnight": "23:59",
                                "date_raw": "2024-11-24 00:00:00",
                                "is_midnight": 1,
                                "date": "24 November 2024",
                                "date_before_raw": "2024-11-23",
                                "date_before": "23 November 2024",
                                "timezone_offset": "32400"
                            },
                            "description": "You may cancel free of charge until 7 days before arrival. If you cancel in the 7 days before arrival, the cancellation fee will be the cost of the first night. If you don't show up, the no-show fee will be the total price of the reservation."
                        },
                        "prepayment": {
                            "simple_translation": "No prepayment",
                            "timeline": {
                                "nr_stages": 2,
                                "stages": [
                                    {
                                        "u_stage_fee_pretty": "US$ 0",
                                        "limit_until": "1 December 2024 23:59",
                                        "u_stage_fee": "0.00",
                                        "b_number": 0,
                                        "limit_from": "22 October 2024 12:13",
                                        "limit_from_time": "12:13",
                                        "limit_until_raw": "2024-12-01 23:59:59",
                                        "stage_fee_pretty": "&#165; 0",
                                        "limit_until_time": "23:59",
                                        "u_fee_remaining_pretty": "US$ 2267",
                                        "u_fee_pretty": "US$ 0",
                                        "limit_timezone": "Urayasu",
                                        "is_effective": 1,
                                        "fee_remaining": 339200,
                                        "is_free": 1,
                                        "fee_pretty": "&#165; 0",
                                        "amount": "0.00",
                                        "fee_rounded": 0,
                                        "amount_pretty": "US$ 0",
                                        "stage_fee": 0,
                                        "limit_from_date": "22 October 2024",
                                        "limit_until_date": "1 December 2024",
                                        "fee_remaining_pretty": "&#165; 339200",
                                        "u_fee_remaining": "2267.30",
                                        "limit_from_raw": "2024-10-22 12:13:57",
                                        "effective_number": 0,
                                        "text": "Before you stay you'll pay",
                                        "current_stage": 1,
                                        "b_state": "FREE",
                                        "u_fee": "0.00",
                                        "fee": 0
                                    },
                                    {
                                        "amount": "2267.30",
                                        "after_checkin": 1,
                                        "amount_pretty": "US$ 2267",
                                        "is_free": 0,
                                        "text": "At the property you'll pay"
                                    }
                                ],
                                "currency_code": "JPY",
                                "u_currency_code": "USD",
                                "policygroup_instance_id": "37/152/337"
                            },
                            "extended_type_translation": "No payment needed today",
                            "info": {
                                "refundable": "anytime",
                                "prepayment_at_booktime": 0
                            },
                            "description": "You'll pay during your stay.",
                            "type": "no_prepayment",
                            "type_translation": "No payment needed today",
                            "type_extended": "non_refundable_prepayment"
                        }
                    },
                    "number_of_bathrooms": 0,
                    "smoking": 0,
                    "can_reserve_free_parking": 0,
                    "room_surface_in_m2": 28,
                    "is_secret_deal": 0,
                    "is_vp2_enrolled": 1,
                    "deals": {
                        "deal_attributes": {
                            "has_secret_channel_option": 0
                        }
                    },
                    "must_reserve_free_parking": 0,
                    "max_children_free": 2,
                    "room_count": 14,
                    "genius_discount_percentage": 0,
                    "half_board": 0,
                    "full_board": 0,
                    "breakfast_included": 0
                }
            ],
            "rawData": {
                "checkoutDate": "2024-10-24",
                "id": 6232583,
                "isFirstPage": true,
                "rankingPosition": 0,
                "name": "Grand Nikko Tokyo Bay Maihama",
                "reviewCount": 9015,
                "countryCode": "jp",
                "checkinDate": "2024-10-23",
                "propertyClass": 5,
                "checkin": {
                    "untilTime": "00:00",
                    "fromTime": "15:00"
                },
                "latitude": 35.6293385591508,
                "ufi": -247488,
                "reviewScoreWord": "Fabulous",
                "mainPhotoId": 299373116,
                "wishlistName": "Urayasu",
                "reviewScore": 8.9,
                "checkout": {
                    "fromTime": "00:00",
                    "untilTime": "12:00"
                },
                "accuratePropertyClass": 5,
                "isHighlightedHotel": true,
                "longitude": 139.874133255295,
                "position": 0,
                "qualityClass": 0,
                "isSoldout": true,
                "optOutFromGalleryChanges": 1
            }
        }
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "is_direct_payment": 0,
                "cvc_required": 0,
                "hotel_id": "6232583",
                "payable": 1,
                "creditcard_id": 7,
                "bookable": 1
            },
            {
                "hotel_id": "6232583",
                "payable": 1,
                "cvc_required": 0,
                "bookable": 1,
                "creditcard_id": 5,
                "is_direct_payment": 0
            },
            {
                "is_direct_payment": 0,
                "creditcard_id": 3,
                "bookable": 1,
                "cvc_required": 0,
                "hotel_id": "6232583",
                "payable": 1
            },
            {
                "is_direct_payment": 0,
                "cvc_required": 0,
                "hotel_id": "6232583",
                "payable": 1,
                "creditcard_id": 1,
                "bookable": 1
            },
            {
                "is_direct_payment": 0,
                "creditcard_id": 2,
                "bookable": 1,
                "cvc_required": 0,
                "hotel_id": "6232583",
                "payable": 1
            }
        ]
    }
]

2025-08-25 12:42:39,616 - evaluation_logger_Hotels-54 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [《精尽 Spring Boot 源码分析 —— 自动配置》](http://svip.iocoder.cn/Spring-Boot/AutoConfiguration/) 的**源码第一篇：自动配置的初始化**。

在 Spring Boot 中，我们只需要在 `pom.xml` 文件中，引入 `spring-boot-starter-*` 依赖，就可以默认使用，无需任何配置。如此神奇的功能，就是因为 Spring Boot 在项目启动时，会**自动配置**。例如说，我们在 `pom.xml` 文件中，引入 `spring-boot-starter-web` 依赖，Spring Boot 会自动配置相关的 Bean 到项目中，从而无需我们手动配置。

> 友情提示：如果胖友对 Spring Boot 自动配置不是很了解的话，可以看看 [《Spring Boot 自动配置》](http://www.iocoder.cn/Spring-Boot/autoconfigure/?self) 文章。

在开始本文之前，胖友先看看 [《Spring Boot 源码分析 —— 自动配置》](http://svip.iocoder.cn/Spring-Boot/AutoConfiguration/) 文章，先有一个整体的了解。

# 2. AutoConfigurationImportSelector

`org.springframework.boot.autoconfigure.AutoConfigurationImportSelector` ，实现 DeferredImportSelector、BeanClassLoaderAware、ResourceLoaderAware、BeanFactoryAware、Ordered 接口，处理自动配置的导入选择器。

## 2.1 构造方法

```java
// AutoConfigurationImportSelector.java

private static final String[] NO_IMPORTS = {};

private static final Log logger = LogFactory.getLog(AutoConfigurationImportSelector.class);

private static final String PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE = "spring.autoconfigure.exclude";

private ConfigurableListableBeanFactory beanFactory;

private Environment environment;

private ClassLoader beanClassLoader;

private ResourceLoader resourceLoader;

/**
 * 配置类（@Configuration）的注解元数据
 */
private ConfigurationClassParser.ConfigurationClass configurationClass;
```

- `configurationClass` 属性，配置类（`@Configuration`）的注解元数据。在本文中，配置类指的是 `@EnableAutoConfiguration` 注解的类，即 Spring Boot 应用的启动类。

## 2.2 selectImports

`#selectImports(AnnotationMetadata annotationMetadata)` 方法，执行自动配置。代码如下：

```java
// AutoConfigurationImportSelector.java

@Override
public String[] selectImports(AnnotationMetadata annotationMetadata) {
    // <1> 如果自动配置功能没有开启，则返回空数组
    if (!isEnabled(annotationMetadata)) {
        return NO_IMPORTS;
    }
    // <2> 获得 AutoConfigurationMetadata 对象
    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader
            .loadMetadata(this.beanClassLoader);
    // <3> 获得符合条件的配置类的数组
    AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata,
            annotationMetadata);
    // <4> 返回符合条件的配置类的数组
    return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());
}
```

- `<1>` 处，如果自动配置功能没有开启，则返回空数组。详细解析，见 [「2.3 isEnabled」](http://svip.iocoder.cn/Spring-Boot/AutoConfiguration-1/#) 。
- `<2>` 处，获得 AutoConfigurationMetadata 对象。详细解析，见 [「3. AutoConfigurationMetadataLoader」](http://svip.iocoder.cn/Spring-Boot/AutoConfiguration-1/#) 。
- `<3>` 处，调用 `#getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)` 方法，获得符合条件的配置类的数组。详细解析，见 [「2.4 getAutoConfigurationEntry」](http://svip.iocoder.cn/Spring-Boot/AutoConfiguration-1/#) 。
- `<4>` 处，返回符合条件的配置类的数组。

## 2.3 isEnabled

`#isEnabled(AnnotationMetadata metadata)` 方法，判断自动配置功能是否开启。代码如下：

```java
// AutoConfigurationImportSelector.java

protected boolean isEnabled(AnnotationMetadata metadata) {
    // 当设置的是默认的容器时，返回 true
    if (getClass() == AutoConfigurationImportSelector.class) {
        return getEnvironment().getProperty(EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean.class, true);
    }
    return true;
}
```

- 从 `"spring.boot.enableautoconfiguration"` 配置项，获得是否开启。如果获得不到，默认为 `true` ，即开启。

## 2.4 getAutoConfigurationEntry

`#getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)` 方法，获得符合条件的配置类的数组。代码如下：

```java
// AutoConfigurationImportSelector.java

protected AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {
    // <1> 如果自动配置功能没有开启，则返回空数组
    if (!isEnabled(annotationMetadata)) {
        return EMPTY_ENTRY;
    }
    // <2> 获得注解的属性
    AnnotationAttributes attributes = getAttributes(annotationMetadata);
    // <3> 获得所有配置类的数组
    List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);
    // <4> 移除重复的配置类
    configurations = removeDuplicates(configurations);
    // <5> 获得需要排除的配置类
    Set<String> exclusions = getExclusions(annotationMetadata, attributes);
    // <6> 校验需要排除的配置类
    checkExcludedClasses(configurations, exclusions);
    // <7> 从 configurations 中，移除需要排除的配置类
    configurations.removeAll(exclusions);
    // <8> 对 configurations 进行过滤
    configurations = filter(configurations, autoConfigurationMetadata);
    // <9> 触发自动配置导入事件
    fireAutoConfigurationImportEvents(configurations, exclusions);
    // <10> 创建 AutoConfigurationEntry 对象
    return new AutoConfigurationEntry(configurations, exclusions);
}
```

- `<1>` 处，如果自动配置功能没有开启，则返回空数组。
- `<2>` 处，调用 `#getAttributes(AnnotationMetadata metadata)` 方法，获得注解的属性。代码如下：

  ```java
  // AutoConfigurationImportSelector.java
  
  protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {
      String name = getAnnotationClass().getName();
      AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(name, true));
      Assert.notNull(attributes, () -> "No auto-configuration attributes found. Is " + metadata.getClassName()
              + " annotated with " + ClassUtils.getShortName(name) + "?");
      return attributes;
  }
  
  protected Class<?> getAnnotationClass() {
      return EnableAutoConfiguration.class;
  }
  ```

  - 获得 `@EnableAutoConfiguration` 注解的属性。

- `<3>` 处，调用 `#getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes)` 方法，获得所有配置类的数组。详细解析，见 [「2.5 getCandidateConfigurations」](http://svip.iocoder.cn/Spring-Boot/AutoConfiguration-1/#) 。

- `<4>` 处，调用 `#removeDuplicates(List<?> list)` 方法，移除重复的配置类。代码如下：

  ```java
  // AutoConfigurationImportSelector.java
  
  protected final <T> List<T> removeDuplicates(List<T> list) {
  	return new ArrayList<>(new LinkedHashSet<>(list));
  }
  ```

- `<5>` 处，调用 `#getExclusions(AnnotationMetadata metadata, AnnotationAttributes attributes)` 方法，获得需要排除的配置类。代码如下：

  ```java
  // AutoConfigurationImportSelector.java
  
  protected Set<String> getExclusions(AnnotationMetadata metadata, AnnotationAttributes attributes) {
      // 获得需要排除的配置类
      Set<String> excluded = new LinkedHashSet<>();
      // 从 `exclude` 属性
      excluded.addAll(asList(attributes, "exclude"));
      // 从 `excludeName` 属性
      excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")));
      // 从 `"spring.autoconfigure.exclude"` 配置项
      excluded.addAll(getExcludeAutoConfigurationsProperty());
      return excluded;
  }
  ```

  - 从 `@EnableAutoConfiguration` 注解的 `exclude`、`excludeName` 属性，以及 `"spring.autoconfigure.exclude"` 配置项，获得需要排除的配置类。

- `<6>` 处，调用 `#checkExcludedClasses(List<String> configurations, Set<String> exclusions)` 方法，校验需要排除的配置类。代码如下：

  ```java
  // AutoConfigurationImportSelector.java
  
  private void checkExcludedClasses(List<String> configurations, Set<String> exclusions) {
      List<String> invalidExcludes = new ArrayList<>(exclusions.size());
      for (String exclusion : exclusions) {
          // 判断是否存在，若不存在，则添加到 invalidExcludes 中
          if (ClassUtils.isPresent(exclusion, getClass().getClassLoader()) && !configurations.contains(exclusion)) {
              invalidExcludes.add(exclusion);
          }
      }
      // 如果有不存在的，抛出 IllegalArgumentException 异常
      if (!invalidExcludes.isEmpty()) {
          handleInvalidExcludes(invalidExcludes);
      }
  }
  
  protected void handleInvalidExcludes(List<String> invalidExcludes) {
      StringBuilder message = new StringBuilder();
      for (String exclude : invalidExcludes) {
          message.append("\t- ").append(exclude).append(String.format("%n"));
      }
      throw new IllegalArgumentException(String.format("The following classes could not be excluded because they are not auto-configuration classes:%n%s", message.toString()));
  }
  ```

  - 需要排除的配置类，必须在 `configurations` 中。否则，会抛出 IllegalArgumentException 异常。

- `<7>` 处，从 `configurations` 中，移除需要排除的配置类。

- `<8>` 处，调用 `#filter(List<String> configurations, AutoConfigurationMetadata autoConfigurationMetadata)` 方法，对 `configurations` 进行过滤。详细解析，见 [「2.6 filter」](http://svip.iocoder.cn/Spring-Boot/AutoConfiguration-1/#) 。

- `<9>` 处，调用 `#fireAutoConfigurationImportEvents(List<String> configurations, Set<String> exclusions)` 方法，触发自动配置导入事件。详细解析，见 [「2.7 fireAutoConfigurationImportEvents」](http://svip.iocoder.cn/Spring-Boot/AutoConfiguration-1/#) 。

- `<10>` 处，创建 AutoConfigurationEntry 对象。代码如下：

  ```java
  // AutoConfigurationImportSelector.java
  
  protected static class AutoConfigurationEntry {
  
      private final List<String> configurations;
  
      private final Set<String> exclusions;
  
      private AutoConfigurationEntry() {
          this.configurations = Collections.emptyList();
          this.exclusions = Collections.emptySet();
      }
  
      AutoConfigurationEntry(Collection<String> configurations, Collection<String> exclusions) {
          this.configurations = new ArrayList<>(configurations);
          this.exclusions = new HashSet<>(exclusions);
      }
  
      public List<String> getConfigurations() {
          return this.configurations;
      }
  
      public Set<String> getExclusions() {
          return this.exclusions;
      }
  
  }
  ```

## 2.5 getCandidateConfigurations

`#getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes)` 方法，获得所有配置类的数组。代码如下：

```java
// AutoConfigurationImportSelector.java

protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {
    // 加载指定类型 EnableAutoConfiguration 对应的，在 `META-INF/spring.factories` 里的类名的数组
    List<String> configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),
            getBeanClassLoader());
    // 断言，非空
    Assert.notEmpty(configurations, "No auto configuration classes found in META-INF/spring.factories. If you "
            + "are using a custom packaging, make sure that file is correct.");
    return configurations;
}

protected Class<?> getSpringFactoriesLoaderFactoryClass() {
    return EnableAutoConfiguration.class;
}
```

- 调用 `SpringFactoriesLoader#loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader)` 方法，加载指定类型 `factoryClass` 对应的，在 `META-INF/spring.factories` 里的类名的数组。

- 在 `spring-boot-autoconfigure` 项目的 `META-INF/spring.factories` 文件中，我们可以看到如下内容：

  ```java
  # Auto Configure
  org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
  org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\
  org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\
  org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\
  ... // 省略其它
  ```

  - 所以，`configurations` 就是上述所有的自动配置类。

## 2.6 filter

`#filter(List<String> configurations, AutoConfigurationMetadata autoConfigurationMetadata)` 方法，对 `configurations` 进行过滤。代码如下：

```java
// AutoConfigurationImportSelector.java

private List<String> filter(List<String> configurations, AutoConfigurationMetadata autoConfigurationMetadata) {
    // 创建结果数组
    long startTime = System.nanoTime();
    String[] candidates = StringUtils.toStringArray(configurations);
    // 定义是否有跳过
    boolean[] skip = new boolean[candidates.length];
    boolean skipped = false;
    // 遍历 AutoConfigurationImportFilter 数组，对每个配置类进行匹配
    for (AutoConfigurationImportFilter filter : getAutoConfigurationImportFilters()) {
        // 配置 AOP
        invokeAwareMethods(filter);
        // 匹配
        boolean[] match = filter.match(candidates, autoConfigurationMetadata);
        // 判断是否有不匹配
        for (int i = 0; i < match.length; i++) {
            if (!match[i]) {
                skip[i] = true;
                candidates[i] = null;
                skipped = true;
            }
        }
    }
    // 如果没有跳过任何，直接返回 configurations
    if (!skipped) {
        return configurations;
    }
    // 创建 result 数组，将未跳过的配置类添加到其中
    List<String> result = new ArrayList<>(candidates.length);
    for (int i = 0; i < candidates.length; i++) {
        if (!skip[i]) {
            result.add(candidates[i]);
        }
    }
    // 打印日志
    if (logger.isTraceEnabled()) {
        int numberFiltered = configurations.size() - result.size();
        logger.trace("Filtered " + numberFiltered + " auto configuration class in "
                + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) + " ms");
    }
    // 返回
    return result;
}
```

- 遍历 `org.springframework.boot.autoconfigure.AutoConfigurationImportFilter` 数组，对每个配置类进行匹配。如果**不匹配**，则进行跳过。

- 关于 AutoConfigurationImportFilter 类，我们来看看它的代码：

  ```java
  // AutoConfigurationImportFilter.java
  
  @FunctionalInterface
  public interface AutoConfigurationImportFilter {
  
  	/**
  	 * Apply the filter to the given auto-configuration class candidates.
  	 * @param autoConfigurationClasses the auto-configuration classes being considered
  	 * This array may contain {@code null} elements. Implementations should not change the
  	 * values in this array.
  	 * @param autoConfigurationMetadata access to the meta-data generated by the
  	 * auto-configuration annotation processor
  	 * @return a boolean array indicating which of the auto-configuration classes should
  	 * be imported. The returned array must be the same size as the incoming
  	 * {@code autoConfigurationClasses}. Entries containing {@code false} indicate that
  	 * the class is not eligible.
  	 */
  	boolean[] match(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata);
  
  }
  ```

  - 从注释上，可以看出，通过 `#match(...)` 方法，判断配置类是否匹配。如果返回 `false` ，则表示不匹配，进行跳过。

- 那么，`#getAutoConfigurationImportFilters()` 方法，获得 AutoConfigurationImportFilter 数组。代码如下：

  ```java
  // AutoConfigurationImportSelector.java
  
  protected List<AutoConfigurationImportFilter> getAutoConfigurationImportFilters() {
      return SpringFactoriesLoader.loadFactories(AutoConfigurationImportFilter.class, this.beanClassLoader);
  }
  ```

  - 在 `spring-boot-autoconfigure` 项目的 `META-INF/spring.factories` 文件中，我们可以看到如下内容：

    ```java
    # Auto Configuration Import Filters
    org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\
    org.springframework.boot.autoconfigure.condition.OnClassCondition,\
    org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition
    ```

    - 所以，`AutoConfigurationImportFilter` 数组，对应的就是 OnClassCondition 和 OnWebApplicationCondition 类。

  - 关于这两个类，我们在后续的文章，详细解析。

## 2.7 fireAutoConfigurationImportEvents

`#fireAutoConfigurationImportEvents(List<String> configurations, Set<String> exclusions)` 方法，触发自动配置导入事件。代码如下：

```java
// AutoConfigurationImportSelector.java

private void fireAutoConfigurationImportEvents(List<String> configurations, Set<String> exclusions) {
    // 获得 AutoConfigurationImportListener 数组
    List<AutoConfigurationImportListener> listeners = getAutoConfigurationImportListeners();
    // 如果非空，则触发事件
    if (!listeners.isEmpty()) {
        // 创建 AutoConfigurationImportEvent 事件
        AutoConfigurationImportEvent event = new AutoConfigurationImportEvent(this, configurations, exclusions);
        // 遍历 listeners 数组，逐个监听
        for (AutoConfigurationImportListener listener : listeners) {
            // 配置 AOP
            invokeAwareMethods(listener);
            // 监听事件
            listener.onAutoConfigurationImportEvent(event);
        }
    }
}
```

- 关于 AutoConfigurationImportListener 类，我们来看看它的代码：

  ```java
  // AutoConfigurationImportListener.java
  
  @FunctionalInterface
  public interface AutoConfigurationImportListener {
  
  	void onAutoConfigurationImportEvent(AutoConfigurationImportEvent event);
  
  }
  ```

  - 从注释上，可以看出，通过 `#onAutoConfigurationImportEvent(...)` 方法，监听 AutoConfigurationImportEvent 事件。

- 那么，`#getAutoConfigurationImportListeners()` 方法，

2025-08-25 12:42:44,725 - evaluation_logger_Hotels-54 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about hotels near Senso-ji, detailed information, or payment options.'}
2025-08-25 12:42:51,649 - evaluation_logger_Hotels-54 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:42:51,649 - evaluation_logger_Hotels-54 - INFO - Message: Success.
2025-08-25 12:42:51,649 - evaluation_logger_Hotels-54 - INFO - Success turn num = 3
2025-08-25 12:42:51,649 - evaluation_logger_Hotels-54 - INFO - ----------------------------------------------------------------------------------------------------
