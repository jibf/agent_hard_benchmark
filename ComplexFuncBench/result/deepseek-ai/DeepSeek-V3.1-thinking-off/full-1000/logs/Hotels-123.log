2025-08-25 12:49:07,544 - evaluation_logger_Hotels-123 - INFO - Test Example Hotels-123
2025-08-25 12:49:07,544 - evaluation_logger_Hotels-123 - INFO - Query: Find a hotel under $400 near the Sydney Opera House in Sydney for the dates December 5, 2024, to December 15, 2024. I want to know the user comments about these hotels, with the latest reviews first.
2025-08-25 12:49:15,969 - evaluation_logger_Hotels-123 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Sydney Opera House"
        }
    }
]

2025-08-25 12:49:15,969 - evaluation_logger_Hotels-123 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "Sydney Opera House"
        }
    },
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 13113,
            "search_type": "landmark",
            "arrival_date": "2024-12-05",
            "departure_date": "2024-12-15",
            "price_max": 400
        }
    }
]

2025-08-25 12:49:15,969 - evaluation_logger_Hotels-123 - INFO - Start compare_single_call: 
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Sydney Opera House'}}
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Sydney Opera House'}}
2025-08-25 12:49:15,969 - evaluation_logger_Hotels-123 - INFO - Rule-based compare success.
2025-08-25 12:49:15,969 - evaluation_logger_Hotels-123 - INFO - Success matched: [{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'Sydney Opera House'}}]
2025-08-25 12:49:15,969 - evaluation_logger_Hotels-123 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "dest_id": "13113",
                "search_type": "landmark",
                "type": "la",
                "nr_hotels": 196,
                "country": "Australia",
                "hotels": 196,
                "label": "Sydney Opera House, Sydney, New South Wales, Australia",
                "dest_type": "landmark",
                "landmark_type": 6,
                "region": "New South Wales",
                "longitude": 151.215,
                "latitude": -33.856945,
                "name": "Sydney Opera House",
                "roundtrip": "GgEwIAAoATICZW46ElN5ZG5leSBPcGVyYSBIb3VzZUAASgBQAA==",
                "city_ufi": -1603135,
                "city_name": "Sydney",
                "cc1": "au",
                "lc": "en"
            }
        ]
    }
]

2025-08-25 12:49:27,356 - evaluation_logger_Hotels-123 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 13113,
            "search_type": "landmark",
            "arrival_date": "2024-12-05",
            "departure_date": "2024-12-15",
            "price_max": 400
        }
    }
]

2025-08-25 12:49:27,356 - evaluation_logger_Hotels-123 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "arrival_date": "2024-12-05",
            "departure_date": "2024-12-15",
            "dest_id": 13113,
            "price_max": 400,
            "search_type": "landmark"
        }
    },
    {
        "name": "Get_Hotel_Reviews(Tips)_Sort_Option",
        "arguments": {
            "hotel_id": "9915838"
        }
    }
]

2025-08-25 12:49:27,356 - evaluation_logger_Hotels-123 - INFO - Start compare_single_call: 
{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-12-05', 'departure_date': '2024-12-15', 'dest_id': 13113, 'price_max': 400, 'search_type': 'landmark'}}
{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-12-05', 'departure_date': '2024-12-15', 'dest_id': 13113, 'price_max': 400, 'search_type': 'landmark'}}
2025-08-25 12:49:27,356 - evaluation_logger_Hotels-123 - INFO - Rule-based compare success.
2025-08-25 12:49:27,356 - evaluation_logger_Hotels-123 - INFO - Success matched: [{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-12-05', 'departure_date': '2024-12-15', 'dest_id': 13113, 'price_max': 400, 'search_type': 'landmark'}}]
2025-08-25 12:49:27,356 - evaluation_logger_Hotels-123 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "hotels": [
                {
                    "hotel_id": 9915838,
                    "accessibilityLabel": "London Plane Backpackers.\n6.7 Pleasant 489 reviews.\n‎Potts Point, Sydney‬ • ‎1.9 km from Sydney Opera House‬.\n Bed in dormitory : 1 bed.\nOriginal price 294 USD. Current price 250 USD..\nIncludes taxes and charges.",
                    "property": {
                        "checkin": {
                            "untilTime": "23:00",
                            "fromTime": "14:00"
                        },
                        "latitude": -33.873006,
                        "priceBreakdown": {
                            "grossPrice": {
                                "value": 249.629676041532,
                                "currency": "USD"
                            },
                            "benefitBadges": [
                                {
                                    "identifier": "Late Escape Campaign",
                                    "explanation": "Late Escape Deal",
                                    "variant": "constructive",
                                    "text": "Late Escape Deal"
                                }
                            ],
                            "strikethroughPrice": {
                                "currency": "USD",
                                "value": 293.682753048862
                            }
                        },
                        "checkout": {
                            "fromTime": "08:00",
                            "untilTime": "11:00"
                        },
                        "optOutFromGalleryChanges": 1,
                        "countryCode": "au",
                        "reviewCount": 489,
                        "ufi": -1603135,
                        "checkinDate": "2024-12-05",
                        "blockIds": [
                            "991583810_372135269_0_0_0_372995"
                        ],
                        "reviewScore": 6.7,
                        "propertyClass": 0,
                        "currency": "AUD",
                        "qualityClass": 0,
                        "longitude": 151.222937,
                        "rankingPosition": 0,
                        "isFirstPage": true,
                        "name": "London Plane Backpackers",
                        "id": 9915838,
                        "position": 0,
                        "accuratePropertyClass": 0,
                        "mainPhotoId": 463824223,
                        "wishlistName": "Sydney",
                        "reviewScoreWord": "Pleasant",
                        "checkoutDate": "2024-12-15"
                    }
                }
            ],
            "meta": [
                {
                    "title": "22 properties"
                }
            ],
            "appear": [
                {
                    "id": "cma",
                    "component": {
                        "props": {
                            "fill": true,
                            "content": {
                                "props": {
                                    "items": [
                                        {
                                            "props": {
                                                "component": {
                                                    "props": {
                                                        "spacing": "spacing_half",
                                                        "items": [
                                                            {
                                                                "props": {
                                                                    "text": [
                                                                        {
                                                                            "text": "Commission paid and other benefits may affect an accommodation's ranking.",
                                                                            "font": "body_2"
                                                                        },
                                                                        {
                                                                            "font": "strong_2",
                                                                            "text": "  ",
                                                                            "color": "foreground"
                                                                        },
                                                                        {
                                                                            "text": "Find out more",
                                                                            "color": "action_foreground",
                                                                            "linkActions": [
                                                                                {}
                                                                            ],
                                                                            "font": "body_2"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        },
                                        {},
                                        {
                                            "props": {
                                                "component": {
                                                    "props": {
                                                        "tertiaryTintedColor": "foreground",
                                                        "variant": "tertiary_tinted",
                                                        "accessibilityLabel": "Close",
                                                        "icon": "close"
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "fitContentWidth": true
                                }
                            }
                        }
                    }
                },
                {},
                {
                    "component": {
                        "props": {
                            "title": "Sign in and save money",
                            "text": "Get instant access to our Genius loyalty programme and enjoy discounts at properties worldwide."
                        }
                    },
                    "id": "signin_now"
                }
            ]
        }
    }
]

2025-08-25 12:49:37,742 - evaluation_logger_Hotels-123 - INFO - Function Calls: 
[
    {
        "name": "Get_Hotel_Reviews(Tips)_Sort_Option",
        "arguments": {
            "hotel_id": "9915838"
        }
    }
]

2025-08-25 12:49:37,742 - evaluation_logger_Hotels-123 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Hotel_Reviews(Tips)_Sort_Option",
        "arguments": {
            "hotel_id": "9915838"
        }
    },
    {
        "name": "Get_Hotel_Reviews(Tips)",
        "arguments": {
            "hotel_id": "9915838",
            "sort_option_id": "sort_recent_desc"
        }
    }
]

2025-08-25 12:49:37,742 - evaluation_logger_Hotels-123 - INFO - Start compare_single_call: 
{'name': 'Get_Hotel_Reviews(Tips)_Sort_Option', 'arguments': {'hotel_id': '9915838'}}
{'name': 'Get_Hotel_Reviews(Tips)_Sort_Option', 'arguments': {'hotel_id': '9915838'}}
2025-08-25 12:49:37,742 - evaluation_logger_Hotels-123 - INFO - Rule-based compare success.
2025-08-25 12:49:37,742 - evaluation_logger_Hotels-123 - INFO - Success matched: [{'name': 'Get_Hotel_Reviews(Tips)_Sort_Option', 'arguments': {'hotel_id': '9915838'}}]
2025-08-25 12:49:37,742 - evaluation_logger_Hotels-123 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "timestamp": 1730123532552,
        "data": [
            {
                "title": "Most relevant",
                "sort_option_id": "sort_most_relevant",
                "sort_option_default": 1
            },
            {
                "title": "Date (newer to older)",
                "sort_option_id": "sort_recent_desc",
                "sort_option_default": 0
            },
            {
                "sort_option_default": 0,
                "sort_option_id": "proximity_to_hotel_average",
                "title": "Close to property score"
            },
            {
                "sort_option_default": 0,
                "sort_option_id": "sort_score_desc",
                "title": "Review score (high to low)"
            },
            {
                "title": "From your country",
                "sort_option_id": "user_country",
                "sort_option_default": 0
            }
        ]
    }
]

2025-08-25 12:49:47,524 - evaluation_logger_Hotels-123 - INFO - Function Calls: 
[
    {
        "name": "Get_Hotel_Reviews(Tips)",
        "arguments": {
            "hotel_id": "9915838",
            "sort_option_id": "sort_recent_desc"
        }
    }
]

2025-08-25 12:49:47,524 - evaluation_logger_Hotels-123 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Hotel_Reviews(Tips)",
        "arguments": {
            "hotel_id": "9915838",
            "sort_option_id": "sort_recent_desc"
        }
    }
]

2025-08-25 12:49:47,524 - evaluation_logger_Hotels-123 - INFO - Start compare_single_call: 
{'name': 'Get_Hotel_Reviews(Tips)', 'arguments': {'hotel_id': '9915838', 'sort_option_id': 'sort_recent_desc'}}
{'name': 'Get_Hotel_Reviews(Tips)', 'arguments': {'hotel_id': '9915838', 'sort_option_id': 'sort_recent_desc'}}
2025-08-25 12:49:47,524 - evaluation_logger_Hotels-123 - INFO - Rule-based compare success.
2025-08-25 12:49:47,524 - evaluation_logger_Hotels-123 - INFO - Success matched: [{'name': 'Get_Hotel_Reviews(Tips)', 'arguments': {'hotel_id': '9915838', 'sort_option_id': 'sort_recent_desc'}}]
2025-08-25 12:49:47,524 - evaluation_logger_Hotels-123 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "result": [
                {
                    "hotel_id": 9915838,
                    "is_moderated": 0,
                    "languagecode": "es",
                    "review_hash": "1d537e8b8fe1665a",
                    "date": "2024-10-26 12:08:54",
                    "stayed_room_info": {
                        "checkin": "2024-10-24",
                        "room_id": 991583811,
                        "room_name": "Bed in 10-Bed Mixed Dormitory Room (ages 18-40 years only)",
                        "checkout": "2024-10-26",
                        "num_nights": 2
                    },
                    "average_score": 4,
                    "author": {
                        "type": "solo_traveller",
                        "countrycode": "au",
                        "user_id": 855091579,
                        "name": "Jeisson",
                        "helpful_vote_count": 0,
                        "type_string": "Solo traveller",
                        "nr_reviews": 0
                    },
                    "title": "Exceptional",
                    "countrycode": "au",
                    "helpful_vote_count": 0,
                    "reviewng": 1,
                    "review_id": 5097830431,
                    "no_user_title": 1,
                    "travel_purpose": "leisure",
                    "is_incentivised": 0
                },
                {
                    "average_score": 2.79999995231628,
                    "title": "First hostel experience in Australia",
                    "countrycode": "ee",
                    "author": {
                        "helpful_vote_count": 0,
                        "type_string": "Solo traveller",
                        "name": "Cassie",
                        "nr_reviews": 0,
                        "type": "solo_traveller",
                        "user_id": 384406760,
                        "countrycode": "ee"
                    },
                    "date": "2024-10-25 03:59:31",
                    "stayed_room_info": {
                        "room_name": "Bed in 4-Bed Female Dormitory Room (ages 18-40 years only)",
                        "room_id": 991583804,
                        "checkin": "2024-10-14",
                        "num_nights": 7,
                        "checkout": "2024-10-21"
                    },
                    "review_hash": "c5710f33dd42a7df",
                    "is_moderated": 0,
                    "languagecode": "en-gb",
                    "pros": "Roommates were great. En-suite shower.",
                    "cons": "Very noisy, loud in the communal areas,, the TV was always blasting like I was in the cinema in my room till late night. The room could use air conditioning, cause it gets quite hot and humid, especially with the shower in the room, the fan doesn't really do much for keeping mold at bay. The small kitchen could also maybe have some coffee mugs or smth, cause I had to work early morning and leave before 7 without having coffee or any food, cause the big kitchen is closed till 7 and there are no plates or mugs in the small kitchen. Overall it was not too bad.",
                    "hotel_id": 9915838,
                    "travel_purpose": "leisure",
                    "is_incentivised": 0,
                    "review_id": 5097448722,
                    "no_user_title": 0,
                    "helpful_vote_count": 0,
                    "reviewng": 1
                },
                {
                    "average_score": 3.20000004768372,
                    "countrycode": "au",
                    "title": "Very good",
                    "author": {
                        "type": "solo_traveller",
                        "countrycode": "au",
                        "user_id": 620814231,
                        "name": "Furkan",
                        "type_string": "Solo traveller",
                        "helpful_vote_count": 0,
                        "nr_reviews": 0
                    },
                    "date": "2024-10-24 14:35:01",
                    "stayed_room_info": {
                        "num_nights": 7,
                        "checkout": "2024-10-23",
                        "room_name": "Bed in 4-Bed Male Dormitory Room (ages 18-40 years only)",
                        "checkin": "2024-10-16",
                        "room_id": 991583806
                    },
                    "review_hash": "d3fa9d3176be7055",
                    "is_moderated": 0,
                    "languagecode": "en-gb",
                    "hotel_id": 9915838,
                    "travel_purpose": "business",
                    "is_incentivised": 0,
                    "review_id": 5097267491,
                    "no_user_title": 1,
                    "helpful_vote_count": 0,
                    "reviewng": 1
                },
                {
                    "languagecode": "es",
                    "is_moderated": 0,
                    "hotel_id": 9915838,
                    "cons": "Personales muy bordes. \r\nLa cocina cierra a las 22:00 y abre a las 7:00 y por la gente que estudia o trabaja no les da tiempo en poder comer. \r\nFalta de congelador.",
                    "pros": "Hay baños suficientes para todos en diferentes plantas, la cocina está bien “grande” con muchas estanterías para poder dejar la cosas. \r\nEsta la lavadora gratis",
                    "countrycode": "it",
                    "title": "Passable",
                    "author": {
                        "name": "Maddaelaine",
                        "type_string": "Group of friends",
                        "helpful_vote_count": 0,
                        "nr_reviews": 0,
                        "type": "review_category_group_of_friends",
                        "countrycode": "it",
                        "user_id": 730351738
                    },
                    "average_score": 2,
                    "date": "2024-10-22 23:39:13",
                    "stayed_room_info": {
                        "room_name": "Bed in 4-Bed Female Dormitory Room (ages 18-40 years only)",
                        "room_id": 991583804,
                        "checkin": "2024-10-03",
                        "checkout": "2024-10-18",
                        "num_nights": 15
                    },
                    "review_hash": "07c70ca98c0571c5",
                    "review_id": 5096814181,
                    "no_user_title": 1,
                    "reviewng": 1,
                    "helpful_vote_count": 0,
                    "is_incentivised": 0,
                    "travel_purpose": "leisure"
                },
                {
                    "travel_purpose": "leisure",
                    "is_incentivised": 0,
                    "helpful_vote_count": 0,
                    "reviewng": 1,
                    "no_user_title": 1,
                    "review_id": 5096046953,
                    "date": "2024-10-21 00:44:57",
                    "stayed_room_info": {
                        "checkout": "2024-10-20",
                        "num_nights": 4,
                        "room_name": "Bed in 10-Bed Mixed Dormitory Room (ages 18-40 years only)",
                        "room_id": 991583811,
                        "checkin": "2024-10-16"
                    },
                    "review_hash": "48c2a8a252eae225",
                    "average_score": 0.400000005960464,
                    "countrycode": "ar",
                    "title": "Bad",
                    "author": {
                        "type": "solo_traveller",
                        "countrycode": "ar",
                        "user_id": 452544801,
                        "name": "Joaquin",
                        "type_string": "Solo traveller",
                        "helpful_vote_count": 0,
                        "nr_reviews": 0
                    },
                    "hotel_id": 9915838,
                    "cons": "habitación de 10 personas sin ventilación. cucarachas por todos lados",
                    "is_moderated": 0,
                    "languagecode": "es"
                }
            ],
            "count": 25,
            "sort_options": [
                {
                    "sort_option_default": 1,
                    "title": "Most relevant",
                    "sort_option_id": "sort_most_relevant"
                },
                {
                    "sort_option_id": "sort_recent_desc",
                    "sort_option_default": 0,
                    "title": "Date (newer to older)"
                },
                {
                    "sort_option_id": "proximity_to_hotel_average",
                    "title": "Close to property score",
                    "sort_option_default": 0
                },
                {
                    "sort_option_default": 0,
                    "title": "Review score (high to low)",
                    "sort_option_id": "sort_score_desc"
                },
                {
                    "sort_option_id": "user_country",
                    "title": "From your country",
                    "sort_option_default": 0
                }
            ]
        }
    }
]

2025-08-25 12:51:36,954 - evaluation_logger_Hotels-123 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [《精尽 Spring Boot 源码分析 —— SpringApplication》](http://svip.iocoder.cn/Spring-Boot/SpringApplication/) 的**初始化**的源码解析。

在 SpringApplication 实例对象创建完成后，我们会调用它的 `#run(String... args)` 方法，进行 Spring Boot 应用的启动。在这个过程中，会做很多初始化的工作。本文，我们就来详细解析。

# 2. 构造方法

在 SpringApplication 实例对象创建时，会调用其构造方法，进行初始化。代码如下：

```java
// SpringApplication.java

/**
 * 资源加载器
 */
private ResourceLoader resourceLoader;
/**
 * 主要的 Java Config 类的数组
 */
private Set<Class<?>> primarySources;
/**
 * Web 应用类型
 */
private WebApplicationType webApplicationType;

public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
	this.resourceLoader = resourceLoader;
	Assert.notNull(primarySources, "PrimarySources must not be null");
	this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
	// <1> 推断 Web 应用类型
	this.webApplicationType = deduceWebApplicationType();
	// <2> 设置初始化器
	setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
	// <3> 设置监听器
	setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
	// <4> 推断主类
	this.mainApplicationClass = deduceMainApplicationClass();
}
```

- `<1>` 处，调用 `#deduceWebApplicationType()` 方法，推断 Web 应用类型。详细解析，见 [「2.1 deduceWebApplicationType」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。
- `<2>` 处，调用 `#setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers)` 方法，设置初始化器（ApplicationContextInitializer）。详细解析，见 [「2.2 设置初始化器」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。
- `<3>` 处，调用 `#setListeners(Collection<? extends ApplicationListener<?>> listeners)` 方法，设置监听器（ApplicationListener）。详细解析，见 [「2.3 设置监听器」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。
- `<4>` 处，调用 `#deduceMainApplicationClass()` 方法，推断主类。详细解析，见 [「2.4 deduceMainApplicationClass」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

## 2.1 deduceWebApplicationType

`#deduceWebApplicationType()` 方法，推断 Web 应用类型。代码如下：

```java
// SpringApplication.java

private static final String[] WEB_ENVIRONMENT_CLASSES = new String[]{"javax.servlet.Servlet", "org.springframework.web.context.ConfigurableWebApplicationContext"};

private WebApplicationType deduceWebApplicationType() {
    // 如果存在 javax.servlet.Servlet 和 org.springframework.web.context.ConfigurableWebApplicationContext 类，说明是 Web 应用
	if (ClassUtils.isPresent("org.springframework.web.reactive.DispatcherHandler", getClassLoader()) // 暂时可以忽略，和 Spring WebFlux 相关
			&& !ClassUtils.isPresent("org.springframework.web.servlet.DispatcherServlet", getClassLoader())
			&& !ClassUtils.isPresent("org.springframework.web.context.ConfigurableWebApplicationContext", getClassLoader())) {
		return WebApplicationType.REACTIVE;
	}
    // 如果不存在，说明是非 Web 应用
	for (String className : WEB_ENVIRONMENT_CLASSES) {
		if (!ClassUtils.isPresent(className, getClassLoader())) {
			return WebApplicationType.NONE;
		}
	}
    // 如果存在，说明是 Servlet Web 应用
	return WebApplicationType.SERVLET;
}
```

- 根据是否**存在**指定的类，判断 Web 应用类型。
- 三种 Web 应用类型，在 `org.springframework.boot.WebApplicationType` 枚举类中，代码如下：

  ```java
  // WebApplicationType.java
  
  public enum WebApplicationType {
  
  	/**
  	 * 非 Web 项目
  	 */
  	NONE,
  
  	/**
  	 * Servlet Web 项目
  	 */
  	SERVLET,
  
  	/**
  	 * Reactive Web 项目
  	 */
  	REACTIVE;
  
  }
  ```

## 2.2 设置初始化器

`#getSpringFactoriesInstances(Class<T> type)` 方法，获得指定类型的类对应的实例们的数组。代码如下：

```java
// SpringApplication.java

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type) {
	return getSpringFactoriesInstances(type, new Class<?>[] {});
}

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
	ClassLoader classLoader = getClassLoader();
	// Use names and ensure unique to protect against duplicates
    // 加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组
	Set<String> names = new LinkedHashSet<>(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    // 创建对象们
	List<T> instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    // 排序
	AnnotationAwareOrderComparator.sort(instances);
	return instances;
}
```

- 关于 `SpringFactoriesLoader#loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader)` 方法，在 [《精尽 Spring 源码分析 —— 文章合集》](http://svip.iocoder.cn/Spring/Good-collection/?vip) 中，已经详细解析过。
- 关于 `#createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names)` 方法，创建对象们。代码如下：

  ```java
  // SpringApplication.java
  
  private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes,
  		ClassLoader classLoader, Object[] args, Set<String> names) {
  	List<T> instances = new ArrayList<>(names.size());
  	for (String name : names) {
  		try {
  			Class<?> instanceClass = ClassUtils.forName(name, classLoader);
  			Assert.isAssignable(type, instanceClass);
  			Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
  			T instance = (T) BeanUtils.instantiateClass(constructor, args);
  			instances.add(instance);
  		} catch (Throwable ex) {
  			throw new IllegalArgumentException("Cannot instantiate " + type + " : " + name, ex);
  		}
  	}
  	return instances;
  }
  ```

  - 通过反射，创建对象。

- 关于 `AnnotationAwareOrderComparator#sort(List<?> list)` 方法，排序。在 [《精尽 Spring 源码分析 —— 文章合集》](http://svip.iocoder.cn/Spring/Good-collection/?vip) 中，已经详细解析过。

- 调用 `#setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers)` 方法，设置初始化器（ApplicationContextInitializer）。代码如下：

  ```java
  // SpringApplication.java
  
  /**
   * 初始化器集合
   */
  private List<ApplicationContextInitializer<?>> initializers;
  
  public void setInitializers(Collection<? extends ApplicationContextInitializer<?>> initializers) {
  	this.initializers = new ArrayList<>();
  	this.initializers.addAll(initializers);
  }
  ```

## 2.3 设置监听器

同 [「2.2 设置初始化器」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 一样，设置监听器（ApplicationListener）。代码如下：

```java
// SpringApplication.java

/**
 * 监听器集合
 */
private List<ApplicationListener<?>> listeners;

public void setListeners(Collection<? extends ApplicationListener<?>> listeners) {
	this.listeners = new ArrayList<>();
	this.listeners.addAll(listeners);
}
```

## 2.4 deduceMainApplicationClass

`#deduceMainApplicationClass()` 方法，推断主类。代码如下：

```java
// SpringApplication.java

/**
 * 主类
 */
private Class<?> mainApplicationClass;

private Class<?> deduceMainApplicationClass() {
	try {
		// 获得当前 StackTraceElement 数组
		StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();
		// 遍历，判断哪个执行 main 方法
		for (StackTraceElement stackTraceElement : stackTrace) {
			if ("main".equals(stackTraceElement.getMethodName())) {
				return Class.forName(stackTraceElement.getClassName());
			}
		}
	} catch (ClassNotFoundException ex) {
		// Swallow and continue
	}
	return null;
}
```

- 通过构造一个 RuntimeException 异常，然后遍历其栈帧，判断哪个执行了 `#main(String[] args)` 方法，从而推断主类。

# 3. 小结

至此，SpringApplication 的初始化完成。我们再来回顾下，SpringApplication 的主要属性：

```java
// SpringApplication.java

/**
 * 日志类
 */
private static final Log logger = LogFactory.getLog(SpringApplication.class);
/**
 * 资源加载器
 */
private ResourceLoader resourceLoader;
/**
 * 主要的 Java Config 类的数组
 */
private Set<Class<?>> primarySources;
/**
 * Web 应用类型
 */
private WebApplicationType webApplicationType;
/**
 * 初始化器集合
 */
private List<ApplicationContextInitializer<?>> initializers;
/**
 * 监听器集合
 */
private List<ApplicationListener<?>> listeners;
/**
 * 主类
 */
private Class<?> mainApplicationClass;
```

- 另外，还有 `banner`、`headless` 等等属性，暂时不用管。

2025-08-25 12:51:43,651 - evaluation_logger_Hotels-123 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about hotels near the Sydney Opera House, their prices, or user comments.'}
2025-08-25 12:51:49,966 - evaluation_logger_Hotels-123 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:51:49,966 - evaluation_logger_Hotels-123 - INFO - Message: Success.
2025-08-25 12:51:49,966 - evaluation_logger_Hotels-123 - INFO - Success turn num = 4
2025-08-25 12:51:49,966 - evaluation_logger_Hotels-123 - INFO - ----------------------------------------------------------------------------------------------------
