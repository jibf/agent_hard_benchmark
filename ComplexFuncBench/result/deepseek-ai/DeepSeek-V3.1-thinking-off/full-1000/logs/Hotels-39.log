2025-08-25 12:36:37,260 - evaluation_logger_Hotels-39 - INFO - Test Example Hotels-39
2025-08-25 12:36:37,260 - evaluation_logger_Hotels-39 - INFO - Query: My family and I are planning a trip to Nagoya from November 15th to November 25th, 2024. We want to find a hotel within 40 kilometers of Nagoya Castle, with a budget between 100 and 300 USD. Could you check the user reviews of all the satisfying hotels?
2025-08-25 12:36:45,738 - evaluation_logger_Hotels-39 - INFO - Function Calls: 
[
    {
        "name": "Location_to_Lat_Long",
        "arguments": {
            "query": "Nagoya Castle"
        }
    }
]

2025-08-25 12:36:45,738 - evaluation_logger_Hotels-39 - INFO - Golden Function Call: 
[
    {
        "name": "Location_to_Lat_Long",
        "arguments": {
            "query": "Nagoya Castle"
        }
    },
    {
        "name": "Search_Hotels_By_Coordinates",
        "arguments": {
            "latitude": "35.1847501",
            "longitude": "136.8996883",
            "arrival_date": "2024-11-15",
            "departure_date": "2024-11-25",
            "price_min": 100,
            "price_max": 300,
            "radius": 40
        }
    }
]

2025-08-25 12:36:45,738 - evaluation_logger_Hotels-39 - INFO - Start compare_single_call: 
{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'Nagoya Castle'}}
{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'Nagoya Castle'}}
2025-08-25 12:36:45,738 - evaluation_logger_Hotels-39 - INFO - Rule-based compare success.
2025-08-25 12:36:45,738 - evaluation_logger_Hotels-39 - INFO - Success matched: [{'name': 'Location_to_Lat_Long', 'arguments': {'query': 'Nagoya Castle'}}]
2025-08-25 12:36:45,738 - evaluation_logger_Hotels-39 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "business_status": "OPERATIONAL",
                "formatted_address": "1-1 Honmaru, Naka Ward, Nagoya, Aichi 460-0031, Japan",
                "geometry": {
                    "location": {
                        "lat": 35.1847501,
                        "lng": 136.8996883
                    },
                    "viewport": {
                        "northeast": {
                            "lat": 35.18759389999999,
                            "lng": 136.9177935
                        },
                        "southwest": {
                            "lat": 35.1791771,
                            "lng": 136.8811855
                        }
                    }
                },
                "name": "Nagoya Castle",
                "opening_hours": {
                    "open_now": false
                },
                "place_id": "ChIJse-wx8t2A2ARd6Z1knjp07k",
                "plus_code": {
                    "compound_code": "5VMX+WV Nagoya, Aichi, Japan",
                    "global_code": "8Q7R5VMX+WV"
                },
                "rating": 4.2,
                "reference": "ChIJse-wx8t2A2ARd6Z1knjp07k",
                "types": [
                    "tourist_attraction",
                    "point_of_interest",
                    "establishment"
                ],
                "user_ratings_total": 36793
            }
        ]
    }
]

2025-08-25 12:36:57,338 - evaluation_logger_Hotels-39 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotels_By_Coordinates",
        "arguments": {
            "latitude": "35.1847501",
            "longitude": "136.8996883",
            "arrival_date": "2024-11-15",
            "departure_date": "2024-11-25",
            "radius": 40,
            "price_min": 100,
            "price_max": 300
        }
    }
]

2025-08-25 12:36:57,339 - evaluation_logger_Hotels-39 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels_By_Coordinates",
        "arguments": {
            "arrival_date": "2024-11-15",
            "departure_date": "2024-11-25",
            "latitude": "35.1847501",
            "longitude": "136.8996883",
            "price_max": 300,
            "price_min": 100,
            "radius": 40
        }
    },
    {
        "name": "Get_Hotel_Reviews(Tips)",
        "arguments": {
            "hotel_id": "1873686"
        }
    }
]

2025-08-25 12:36:57,339 - evaluation_logger_Hotels-39 - INFO - Start compare_single_call: 
{'name': 'Search_Hotels_By_Coordinates', 'arguments': {'arrival_date': '2024-11-15', 'departure_date': '2024-11-25', 'latitude': '35.1847501', 'longitude': '136.8996883', 'price_max': 300, 'price_min': 100, 'radius': 40}}
{'name': 'Search_Hotels_By_Coordinates', 'arguments': {'arrival_date': '2024-11-15', 'departure_date': '2024-11-25', 'latitude': '35.1847501', 'longitude': '136.8996883', 'price_max': 300, 'price_min': 100, 'radius': 40}}
2025-08-25 12:36:57,339 - evaluation_logger_Hotels-39 - INFO - Rule-based compare success.
2025-08-25 12:36:57,339 - evaluation_logger_Hotels-39 - INFO - Success matched: [{'name': 'Search_Hotels_By_Coordinates', 'arguments': {'arrival_date': '2024-11-15', 'departure_date': '2024-11-25', 'latitude': '35.1847501', 'longitude': '136.8996883', 'price_max': 300, 'price_min': 100, 'radius': 40}}]
2025-08-25 12:36:57,339 - evaluation_logger_Hotels-39 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "applied_filters": [
                {
                    "name": "US$100 - US$300 (for 10 nights)",
                    "field": "price",
                    "primary_count": 0,
                    "generic_id": "price::USD-100-300"
                }
            ],
            "result": [
                {
                    "hotel_id": 1873686,
                    "currencycode": "JPY",
                    "booking_home": {
                        "is_booking_home": 1,
                        "segment": 0,
                        "group": "hotels_and_others",
                        "quality_class": 0
                    },
                    "min_total_price": 35000,
                    "extended": 0,
                    "hotel_name": "Guesthouse Kiten",
                    "default_wishlist_name": "Gifu",
                    "main_photo_id": 74315742,
                    "longitude": 136.759883165359,
                    "ufi": -227850,
                    "review_nr": 256,
                    "is_smart_deal": 0,
                    "urgency_message": "Only 3 left at this price on Booking.com",
                    "class_is_estimated": 0,
                    "preferred": 0,
                    "is_no_prepayment_block": 1,
                    "unit_configuration_label": "<b>Bed in dormitory</b>: 1 bed",
                    "latitude": 35.4296785311435,
                    "review_score_word": "Fabulous",
                    "last_reservation_data": {
                        "last_reservation_ellapsed_months": 1
                    },
                    "default_language": "ja",
                    "hotel_include_breakfast": 0,
                    "city": "Gifu",
                    "genius_discount_percentage": 0,
                    "id": "property_card_1873686",
                    "review_score": 8.7,
                    "soldout": 0,
                    "hotel_has_vb_boost": 0,
                    "checkout": {
                        "until": "10:00"
                    },
                    "timezone": "Asia/Tokyo",
                    "is_genius_deal": 0,
                    "city_in_trans": "in Gifu",
                    "bwallet": {
                        "hotel_eligibility": 0
                    },
                    "preferred_plus": 0,
                    "is_free_cancellable": 1,
                    "type": "property_card",
                    "countrycode": "jp",
                    "hotel_name_trans": "Guesthouse Kiten",
                    "composite_price_breakdown": {
                        "net_amount": {
                            "amount_unrounded": "US$212.68",
                            "amount_rounded": "US$213",
                            "currency": "USD",
                            "value": 212.681251515565
                        },
                        "gross_amount": {
                            "value": 233.949376667122,
                            "currency": "USD",
                            "amount_unrounded": "US$233.95",
                            "amount_rounded": "US$234"
                        },
                        "all_inclusive_amount": {
                            "amount_unrounded": "US$233.95",
                            "amount_rounded": "US$234",
                            "value": 233.949376667122,
                            "currency": "USD"
                        },
                        "all_inclusive_amount_hotel_currency": {
                            "amount_rounded": "¥35,000",
                            "amount_unrounded": "¥35,000",
                            "currency": "JPY",
                            "value": 35000
                        },
                        "included_taxes_and_charges_amount": {
                            "amount_rounded": "US$21",
                            "amount_unrounded": "US$21.27",
                            "currency": "USD",
                            "value": 21.2681251515565
                        },
                        "has_long_stays_monthly_rate_price": 0,
                        "gross_amount_hotel_currency": {
                            "currency": "JPY",
                            "value": 35000,
                            "amount_rounded": "¥35,000",
                            "amount_unrounded": "¥35,000"
                        },
                        "gross_amount_per_night": {
                            "value": 23.3949376667122,
                            "currency": "USD",
                            "amount_rounded": "US$23",
                            "amount_unrounded": "US$23.39"
                        },
                        "items": [
                            {
                                "base": {
                                    "kind": "percentage",
                                    "percentage": 10
                                },
                                "kind": "charge",
                                "details": "10 % VAT",
                                "item_amount": {
                                    "currency": "USD",
                                    "value": 21.2681251515565,
                                    "amount_unrounded": "US$21.27",
                                    "amount_rounded": "US$21"
                                },
                                "inclusion_type": "included",
                                "name": "VAT"
                            }
                        ],
                        "price_display_config": [
                            {
                                "key": "use_nightly_prices",
                                "value": 0
                            }
                        ],
                        "has_long_stays_weekly_rate_price": 0,
                        "charges_details": {
                            "mode": "all_included",
                            "amount": {
                                "value": 0,
                                "currency": "USD"
                            }
                        },
                        "client_translations": {
                            "tooltip_total_text": "Total"
                        },
                        "excluded_amount": {
                            "value": 0,
                            "currency": "USD",
                            "amount_unrounded": "US$0",
                            "amount_rounded": "US$0"
                        }
                    },
                    "block_ids": [
                        "187368601_205433530_1_0_0"
                    ],
                    "checkin": {
                        "until": "22:00",
                        "from": "17:00"
                    },
                    "class": 2,
                    "accommodation_type": 216
                }
            ],
            "unfiltered_primary_count": 927,
            "page_loading_threshold": 10,
            "has_low_availability": 1,
            "extended_count": 0,
            "room_distribution": [
                {
                    "adults": "1"
                }
            ],
            "b_max_los_data": {
                "has_extended_los": 1,
                "default_los": 30,
                "extended_los": 90,
                "max_allowed_los": 90,
                "is_fullon": 0,
                "experiment": "long_stays_ios_extend_los_3"
            },
            "unfiltered_count": 927,
            "primary_count": 1,
            "count": 1
        }
    }
]

2025-08-25 12:37:09,160 - evaluation_logger_Hotels-39 - INFO - Function Calls: 
[
    {
        "name": "Get_Hotel_Reviews(Tips)",
        "arguments": {
            "hotel_id": "1873686"
        }
    }
]

2025-08-25 12:37:09,160 - evaluation_logger_Hotels-39 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Hotel_Reviews(Tips)",
        "arguments": {
            "hotel_id": "1873686"
        }
    }
]

2025-08-25 12:37:09,160 - evaluation_logger_Hotels-39 - INFO - Start compare_single_call: 
{'name': 'Get_Hotel_Reviews(Tips)', 'arguments': {'hotel_id': '1873686'}}
{'name': 'Get_Hotel_Reviews(Tips)', 'arguments': {'hotel_id': '1873686'}}
2025-08-25 12:37:09,160 - evaluation_logger_Hotels-39 - INFO - Rule-based compare success.
2025-08-25 12:37:09,160 - evaluation_logger_Hotels-39 - INFO - Success matched: [{'name': 'Get_Hotel_Reviews(Tips)', 'arguments': {'hotel_id': '1873686'}}]
2025-08-25 12:37:09,160 - evaluation_logger_Hotels-39 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "count": 25,
            "result": [
                {
                    "is_moderated": 0,
                    "pros": "the location for exploring Gifu area!  the staff was very helpfull and showed some good places for food.",
                    "no_user_title": 0,
                    "average_score": 3.59999990463257,
                    "title": "relaxed place with great location to explore the area around Gifu.",
                    "author": {
                        "name": "Daniel",
                        "helpful_vote_count": 0,
                        "type": "solo_traveller",
                        "nr_reviews": 0,
                        "user_id": 211562855,
                        "type_string": "Solo traveller",
                        "countrycode": "nl"
                    },
                    "review_hash": "c51f6f2fb7461e5a",
                    "is_incentivised": 0,
                    "languagecode": "en-gb",
                    "countrycode": "nl",
                    "review_id": 5092288872,
                    "reviewng": 1,
                    "stayed_room_info": {
                        "checkin": "2024-10-08",
                        "room_name": "Bunk Bed in Mixed Dormitory Room",
                        "num_nights": 1,
                        "room_id": 187368602,
                        "checkout": "2024-10-09"
                    },
                    "travel_purpose": "leisure",
                    "date": "2024-10-10 06:30:52",
                    "hotel_id": 1873686,
                    "helpful_vote_count": 0
                },
                {
                    "helpful_vote_count": 0,
                    "travel_purpose": "leisure",
                    "date": "2024-10-06 18:31:57",
                    "hotel_id": 1873686,
                    "stayed_room_info": {
                        "checkin": "2024-09-21",
                        "room_name": "Bunk Bed in Mixed Dormitory Room",
                        "num_nights": 1,
                        "checkout": "2024-09-22",
                        "room_id": 187368602
                    },
                    "reviewng": 1,
                    "languagecode": "en-gb",
                    "countrycode": "gb",
                    "review_id": 5090976650,
                    "is_incentivised": 0,
                    "review_hash": "73e1eb919adc1cd1",
                    "author": {
                        "user_id": 350265272,
                        "type": "couple",
                        "nr_reviews": 0,
                        "name": "Micaela",
                        "helpful_vote_count": 0,
                        "type_string": "Couple",
                        "countrycode": "gb"
                    },
                    "title": "Unique and tastefully presented stay, great!",
                    "average_score": 4,
                    "no_user_title": 0,
                    "is_moderated": 0,
                    "pros": "Friendly staff and great find"
                },
                {
                    "reviewng": 1,
                    "languagecode": "en-gb",
                    "countrycode": "cn",
                    "review_id": 5086396593,
                    "date": "2024-09-24 05:51:35",
                    "hotel_id": 1873686,
                    "travel_purpose": "leisure",
                    "helpful_vote_count": 0,
                    "stayed_room_info": {
                        "room_name": "Bunk Bed in Mixed Dormitory Room",
                        "checkin": "2024-09-18",
                        "room_id": 187368602,
                        "checkout": "2024-09-23",
                        "num_nights": 5
                    },
                    "cons": "the washrooms were small",
                    "no_user_title": 0,
                    "pros": "cleanliness and comfort",
                    "is_moderated": 0,
                    "author": {
                        "countrycode": "cn",
                        "type_string": "Solo traveller",
                        "helpful_vote_count": 0,
                        "name": "Siddique",
                        "nr_reviews": 0,
                        "type": "solo_traveller",
                        "user_id": 854015032
                    },
                    "title": "it was a great experience overall",
                    "is_incentivised": 0,
                    "review_hash": "2128b5a2bc22d0e0",
                    "average_score": 3.59999990463257
                },
                {
                    "reviewng": 1,
                    "countrycode": "es",
                    "languagecode": "en-gb",
                    "review_id": 5083545629,
                    "hotel_id": 1873686,
                    "date": "2024-09-17 06:48:56",
                    "travel_purpose": "leisure",
                    "helpful_vote_count": 0,
                    "stayed_room_info": {
                        "num_nights": 2,
                        "checkout": "2024-09-16",
                        "room_id": 187368602,
                        "checkin": "2024-09-14",
                        "room_name": "Bunk Bed in Mixed Dormitory Room"
                    },
                    "no_user_title": 0,
                    "pros": "Love the location and the staff is super friendly, he help me with a lot of recommendations. Very comfortable and cozy traditional.",
                    "is_moderated": 0,
                    "author": {
                        "countrycode": "es",
                        "type_string": "Solo traveller",
                        "helpful_vote_count": 0,
                        "name": "Johanna",
                        "nr_reviews": 0,
                        "type": "solo_traveller",
                        "user_id": 321752094
                    },
                    "title": "Amazing guesthouse!",
                    "is_incentivised": 0,
                    "review_hash": "638ab02def62c151",
                    "average_score": 3.20000004768372
                },
                {
                    "is_moderated": 0,
                    "pros": "Highly recommend if you stay in Gizu as a solo traveller. The place was very charming! Bed was confortable, location great to visit the castle and around, staff was helpful and bikes were available 😁",
                    "no_user_title": 1,
                    "average_score": 4,
                    "title": "Exceptional",
                    "author": {
                        "countrycode": "fr",
                        "type_string": "Solo traveller",
                        "user_id": 523843494,
                        "helpful_vote_count": 0,
                        "name": "Jade",
                        "type": "solo_traveller",
                        "nr_reviews": 0
                    },
                    "review_hash": "3c1814e7afc4fb74",
                    "is_incentivised": 0,
                    "countrycode": "fr",
                    "languagecode": "en-gb",
                    "review_id": 5064975516,
                    "reviewng": 1,
                    "stayed_room_info": {
                        "num_nights": 3,
                        "checkout": "2024-08-08",
                        "room_id": 187368601,
                        "checkin": "2024-08-05",
                        "room_name": "Bunk Bed in Female Dormitory Room  "
                    },
                    "cons": "One shower for the entire place so if there are a lot of people it could be a problem. But not so many people when I was there so it was perfect.",
                    "travel_purpose": "leisure",
                    "date": "2024-08-10 02:37:21",
                    "hotel_id": 1873686,
                    "helpful_vote_count": 0
                }
            ],
            "sort_options": [
                {
                    "sort_option_id": "sort_most_relevant",
                    "sort_option_default": 1,
                    "title": "Most relevant"
                },
                {
                    "sort_option_id": "sort_recent_desc",
                    "sort_option_default": 0,
                    "title": "Date (newer to older)"
                },
                {
                    "sort_option_id": "proximity_to_hotel_average",
                    "sort_option_default": 0,
                    "title": "Close to property score"
                },
                {
                    "sort_option_id": "sort_score_desc",
                    "sort_option_default": 0,
                    "title": "Review score (high to low)"
                },
                {
                    "title": "From your country",
                    "sort_option_default": 0,
                    "sort_option_id": "user_country"
                }
            ]
        }
    }
]

2025-08-25 12:39:29,099 - evaluation_logger_Hotels-39 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 前言

在上一篇文章中，我们实现了`axios`的请求和响应配置化，即用户可以配置`config`对象中的`url`、`method`、`params`、`data`、`headers`、`timeout`、`responseType`等属性。其中，`headers`配置对象中的`Content-Type`属性我们已经可以配置了，但是`data`参数我们仅仅只支持`json`字符串形式，而实际上，`data`参数还可以是`FormData`、`Buffer`、`ArrayBuffer`等类型，并且我们还可以通过配置`Content-Type`属性来改变传输的格式。另外，我们还可以通过配置`transformRequest`和`transformResponse`这两个属性来分别在发送请求前和接收响应后对数据进行转换。

那么，接下来，我们就来实现`data`参数支持更多类型以及`transformRequest`和`transformResponse`这两个属性。

# 2. 需求分析

我们希望`data`参数除了是`json`字符串之外，还可以是以下类型：

- `FormData`
- `URLSearchParams`
- `ArrayBuffer`
- `Buffer`
- `Stream`
- `File`
- `Blob`

并且，我们还可以通过配置`headers`中的`Content-Type`属性来指定请求体数据的类型，从而让服务端能够正确解析请求体。

另外，我们还可以通过配置`transformRequest`属性在发送请求前对`data`和`headers`做转换；以及通过配置`transformResponse`属性在接收响应后对`data`做转换。

# 3. 实现思路

## 3.1 支持更多 data 参数类型

根据需求，我们需要让`data`参数支持更多类型，那么我们就需要根据不同的数据类型来设置不同的`Content-Type`，并且还要将数据转换成对应格式。

我们可以先根据传入的`data`的数据类型来设置不同的`Content-Type`，如果没有传入`Content-Type`，则根据数据类型自动设置，如果传入了，则使用用户传入的。

我们可以把根据数据类型设置`Content-Type`的逻辑抽象成一个工具函数。

## 3.2 transformRequest

`transformRequest` 允许你在将请求数据发送到服务器之前对其进行修改，这只适用于请求方法 `put`、`post` 和 `patch`，如果值是数组，则数组中的最后一个函数必须返回一个字符串或 `FormData`、`URLSearchParams`、`Blob` 等类型作为 `xhr.send` 方法的参数，而且在 `transform` 过程中可以修改 `headers` 对象。

## 3.3 transformResponse

`transformResponse` 允许你在把响应数据传递给 `then` 或者 `catch` 之前对它们进行修改。

# 4. 代码实现

## 4.1 支持更多 data 参数类型

首先，我们创建一个`src/helpers/data.ts`文件，用来处理`data`相关的逻辑。

```typescript
// src/helpers/data.ts
import { isPlainObject } from "./util";

export function transformRequest(data: any): any {
  if (isPlainObject(data)) {
    return JSON.stringify(data);
  }
  return data;
}
```

我们创建了`transformRequest`工具函数，用来将普通对象转换成`JSON`字符串，因为`xhr.send`方法只能发送`Blob`, `BufferSource`, `FormData`, `URLSearchParams`, 或者 `USVString`类型，所以如果`data`是普通对象，我们就把它转换成`JSON`字符串。

然后，我们在发送请求之前调用这个函数：

```typescript
// src/xhr.ts
import { transformRequest } from "./helpers/data";

// 在 xhr.send 之前
const requestData = transformRequest(config.data);
```

但是，这还不够，因为我们还需要根据不同的数据类型来设置不同的`Content-Type`，如果没有传入`Content-Type`，则根据数据类型自动设置，如果传入了，则使用用户传入的。

我们可以再创建一个工具函数来处理`headers`中的`Content-Type`。

```typescript
// src/helpers/headers.ts
import { isPlainObject } from "./util";

export function processHeaders(headers: any, data: any): any {
  normalizeHeaderName(headers, "Content-Type");

  if (isPlainObject(data)) {
    if (headers && !headers["Content-Type"]) {
      headers["Content-Type"] = "application/json;charset=utf-8";
    }
  }
  return headers;
}

function normalizeHeaderName(headers: any, normalizedName: string): void {
  if (!headers) {
    return;
  }
  Object.keys(headers).forEach(name => {
    if (
      name !== normalizedName &&
      name.toUpperCase() === normalizedName.toUpperCase()
    ) {
      headers[normalizedName] = headers[name];
      delete headers[name];
    }
  });
}
```

我们创建了`processHeaders`工具函数，它接收`headers`和`data`两个参数。首先，我们调用`normalizeHeaderName`函数来规范化`headers`中的`Content-Type`属性名，因为`headers`的属性名是大小写不敏感的，所以我们先把属性名统一转换成首字母大写的形式，比如`content-type`转换成`Content-Type`。

然后，我们判断如果`data`是普通对象，并且`headers`中没有设置`Content-Type`，那么我们就自动设置`Content-Type`为`application/json;charset=utf-8`。

接下来，我们在发送请求之前调用这个函数：

```typescript
// src/xhr.ts
import { transformRequest } from "./helpers/data";
import { processHeaders } from "./helpers/headers";

// 在 xhr.send 之前
const requestHeaders = processHeaders(config.headers, config.data);
const requestData = transformRequest(config.data);
```

然后，我们在设置请求头的时候使用处理后的`requestHeaders`：

```typescript
// 设置请求头
Object.keys(requestHeaders).forEach(name => {
  xhr.setRequestHeader(name, requestHeaders[name]);
});
```

这样，我们就实现了自动设置`Content-Type`的功能。

但是，这还不够，因为我们还需要支持更多类型的`data`，比如`FormData`、`URLSearchParams`等。对于这些类型，我们不需要自动设置`Content-Type`，因为浏览器会自动设置，而且如果手动设置了反而会出错。

所以，我们需要修改`processHeaders`函数，只有当`data`是普通对象的时候才自动设置`Content-Type`，其他类型则不设置。

```typescript
// src/helpers/headers.ts
import { isPlainObject } from "./util";

export function processHeaders(headers: any, data: any): any {
  normalizeHeaderName(headers, "Content-Type");

  if (isPlainObject(data)) {
    if (headers && !headers["Content-Type"]) {
      headers["Content-Type"] = "application/json;charset=utf-8";
    }
  }
  return headers;
}
```

这样，我们就实现了支持更多`data`参数类型的功能。

## 4.2 transformRequest

接下来，我们来实现`transformRequest`属性。`transformRequest`属性允许用户在发送请求前对`data`和`headers`进行转换。

首先，我们在`src/types/index.ts`中定义`transformRequest`的类型：

```typescript
// src/types/index.ts
export interface AxiosRequestConfig {
  // ...
  transformRequest?: AxiosTransformer | AxiosTransformer[];
}

export interface AxiosTransformer {
  (data: any, headers?: any): any;
}
```

`transformRequest`可以是一个函数，也可以是一个函数数组。

然后，我们在`src/core/dispatchRequest.ts`中实现`transformRequest`的逻辑：

```typescript
// src/core/dispatchRequest.ts
import { transformRequest } from "../../helpers/data";
import { processHeaders } from "../../helpers/headers";
import { AxiosRequestConfig } from "../../types";

export default function dispatchRequest(config: AxiosRequestConfig): void {
  processConfig(config);
  // ...
}

function processConfig(config: AxiosRequestConfig): void {
  config.url = transformURL(config);
  config.headers = transformHeaders(config);
  config.data = transformRequestData(config);
}

function transformRequestData(config: AxiosRequestConfig): any {
  return transformRequest(config.data, config.headers, config.transformRequest);
}

function transformHeaders(config: AxiosRequestConfig): any {
  const { headers = {}, data } = config;
  return processHeaders(headers, data);
}

function transformURL(config: AxiosRequestConfig): string {
  const { url, params } = config;
  return buildURL(url, params);
}
```

我们创建了`processConfig`函数来处理配置对象，它分别调用了`transformURL`、`transformHeaders`和`transformRequestData`函数。

`transformRequestData`函数用来处理`data`，它调用了`transformRequest`函数，但是我们现在还没有实现支持`transformRequest`配置的`transformRequest`函数，所以我们需要修改`src/helpers/data.ts`中的`transformRequest`函数。

```typescript
// src/helpers/data.ts
import { isPlainObject } from "./util";
import { AxiosTransformer } from "../types";

export function transformRequest(
  data: any,
  headers: any,
  fns?: AxiosTransformer | AxiosTransformer[]
): any {
  if (!fns) {
    return data;
  }
  if (!Array.isArray(fns)) {
    fns = [fns];
  }
  fns.forEach(fn => {
    data = fn(data, headers);
  });
  return data;
}
```

我们修改了`transformRequest`函数，它现在接收三个参数：`data`、`headers`和`fns`。`fns`就是`transformRequest`配置，它可以是一个函数或者函数数组。然后，我们遍历`fns`，依次调用每个函数，并且把`data`和`headers`传入，每个函数的返回值作为下一个函数的`data`参数，最后返回处理后的`data`。

这样，我们就实现了`transformRequest`的功能。

## 4.3 transformResponse

接下来，我们来实现`transformResponse`属性。`transformResponse`属性允许用户在接收响应后对`data`进行转换。

首先，我们在`src/types/index.ts`中定义`transformResponse`的类型：

```typescript
// src/types/index.ts
export interface AxiosRequestConfig {
  // ...
  transformResponse?: AxiosTransformer | AxiosTransformer[];
}
```

然后，我们在`src/core/dispatchRequest.ts`中实现`transformResponse`的逻辑：

```typescript
// src/core/dispatchRequest.ts
import { transformResponse } from "../../helpers/data";

export default function dispatchRequest(config: AxiosRequestConfig): void {
  processConfig(config);
  // ...
  return xhr(config).then(res => {
    return transformResponseData(res);
  });
}

function transformResponseData(res: AxiosResponse): AxiosResponse {
  res.data = transformResponse(res.data, res.headers, config.transformResponse);
  return res;
}
```

我们在`dispatchRequest`函数中，在`xhr`请求成功后，调用`transformResponseData`函数来处理响应数据。

`transformResponseData`函数调用了`transformResponse`函数，它接收三个参数：`data`、`headers`和`fns`。`fns`就是`transformResponse`配置，它可以是一个函数或者函数数组。

然后，我们需要在`src/helpers/data.ts`中实现`transformResponse`函数：

```typescript
// src/helpers/data.ts
import { AxiosTransformer } from "../types";

export function transformResponse(
  data: any,
  headers: any,
  fns?: AxiosTransformer | AxiosTransformer[]
): any {
  if (!fns) {
    return data;
  }
  if (!Array.isArray(fns)) {
    fns = [fns];
  }
  fns.forEach(fn => {
    data = fn(data, headers);
  });
  return data;
}
```

`transformResponse`函数的实现和`transformRequest`类似，也是遍历`fns`，依次调用每个函数，并且把`data`和`headers`传入，每个函数的返回值作为下一个函数的`data`参数，最后返回处理后的`data`。

这样，我们就实现了`transformResponse`的功能。

# 5. 测试验证

我们编写一个测试例子来验证我们的实现。

```typescript
// examples/moreParams/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>moreParams example</title>
    <script src="/__build__/moreParams.js"></script>
  </head>
  <body>
    <script>
      axios({
        method: "post",
        url: "/api/moreParams",
        data: {
          a: 1,
          b: 2
        },
        transformRequest: [
          function(data, headers) {
            headers["Content-Type"] = "application/json";
            return JSON.stringify(data);
          }
        ],
        transformResponse: [
          function(data) {
            if (typeof data === "string") {
              data = JSON.parse(data);
            }
            data.b = 3;
            return data;
          }
        ]
      }).then(res => {
        console.log(res);
      });
    </script>
  </body>
</html>
```

在这个例子中，我们发送一个`post`请求，`data`是一个普通对象。我们通过`transformRequest`配置了一个函数，这个函数把`data`转换成`JSON`字符串，并且设置`Content-Type`为`application/json`。

然后，我们通过`transformResponse`配置了一个函数，这个函数把响应数据转换成对象，并且修改`data.b`的值为`3`。

我们运行这个例子，可以看到请求成功，并且响应数据中的`b`的值被修改成了`3`。

# 6. 总结

在本篇文章中，我们实现了`data`参数支持更多类型，以及`transformRequest`和`transformResponse`这两个属性。

- 我们通过`processHeaders`函数来自动设置`Content-Type`，并且支持更多类型的`data`。
- 我们通过`transformRequest`和`transformResponse`函数来实现请求和响应数据的转换。

至此，我们已经实现了`axios`的大部分功能，接下来我们将实现`axios`的拦截器功能。


2025-08-25 12:39:34,191 - evaluation_logger_Hotels-39 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any part of the user's query about finding hotels near Nagoya Castle or checking user reviews."}
2025-08-25 12:39:40,222 - evaluation_logger_Hotels-39 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:39:40,222 - evaluation_logger_Hotels-39 - INFO - Message: Success.
2025-08-25 12:39:40,222 - evaluation_logger_Hotels-39 - INFO - Success turn num = 3
2025-08-25 12:39:40,222 - evaluation_logger_Hotels-39 - INFO - ----------------------------------------------------------------------------------------------------
