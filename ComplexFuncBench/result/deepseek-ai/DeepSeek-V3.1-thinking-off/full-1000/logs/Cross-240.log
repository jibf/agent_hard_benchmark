2025-08-25 12:07:01,784 - evaluation_logger_Cross-240 - INFO - Test Example Cross-240
2025-08-25 12:07:01,784 - evaluation_logger_Cross-240 - INFO - Query: Please help me find a hotel near the University College London on November 10, 2024, and I would like to book a taxi from the hotel to Big Ben at 10 AM the next day. Assist me with the advance planning.
2025-08-25 12:07:13,072 - evaluation_logger_Cross-240 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "University College London"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "University College London"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Big Ben"
        }
    }
]

2025-08-25 12:07:13,072 - evaluation_logger_Cross-240 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotel_Destination",
        "arguments": {
            "query": "University College London"
        }
    },
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 900065367,
            "search_type": "landmark",
            "arrival_date": "2024-11-10",
            "departure_date": "2024-11-11"
        }
    }
]

2025-08-25 12:07:13,625 - evaluation_logger_Cross-240 - INFO - Start compare_single_call: 
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'University College London'}}
{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'University College London'}}
2025-08-25 12:07:13,625 - evaluation_logger_Cross-240 - INFO - Rule-based compare success.
2025-08-25 12:07:13,625 - evaluation_logger_Cross-240 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Big Ben'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Big Ben'}}
2025-08-25 12:07:13,625 - evaluation_logger_Cross-240 - INFO - Rule-based compare success.
2025-08-25 12:07:13,625 - evaluation_logger_Cross-240 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'University College London'}}
{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-11-10', 'departure_date': '2024-11-11', 'dest_id': 900065367, 'search_type': 'landmark'}}
2025-08-25 12:07:13,625 - evaluation_logger_Cross-240 - INFO - {'error_type': 'func_error', 'content': 'Do not call the correct function.'}
2025-08-25 12:07:13,625 - evaluation_logger_Cross-240 - INFO - Success matched: [{'name': 'Search_Hotel_Destination', 'arguments': {'query': 'University College London'}}, {'name': 'Taxi_Search_Location', 'arguments': {'query': 'Big Ben'}}]
2025-08-25 12:07:13,626 - evaluation_logger_Cross-240 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "dest_id": "900065367",
                "search_type": "landmark",
                "roundtrip": "GgEwIAAoATICZW46GVVuaXZlcnNpdHkgQ29sbGVnZSBMb25kb25AAEoAUAA=",
                "nr_hotels": 128,
                "lc": "en",
                "name": "University College London",
                "type": "la",
                "latitude": 51.52456,
                "city_ufi": -2601889,
                "landmark_type": 19,
                "cc1": "gb",
                "city_name": "London",
                "region": "Greater London",
                "country": "United Kingdom",
                "hotels": 128,
                "label": "University College London, London, Greater London, United Kingdom",
                "dest_type": "landmark",
                "longitude": -0.134056
            }
        ]
    },
    {
        "api_status": true,
        "content": "There is a problem with your api call, please double-check for possible problems."
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "countryCode": "gb",
                "name": "Big Ben",
                "googlePlaceId": "ChIJ2dGMjMMEdkgRqVqkuXQkj7c",
                "country": "United Kingdom",
                "latitude": 51.50057,
                "types": "landmark",
                "city": "London",
                "longitude": -0.124642
            }
        ]
    }
]

2025-08-25 12:07:23,985 - evaluation_logger_Cross-240 - INFO - Function Calls: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "dest_id": 900065367,
            "search_type": "landmark",
            "arrival_date": "2024-11-10",
            "departure_date": "2024-11-11"
        }
    }
]

2025-08-25 12:07:23,985 - evaluation_logger_Cross-240 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Hotels",
        "arguments": {
            "arrival_date": "2024-11-10",
            "departure_date": "2024-11-11",
            "dest_id": 900065367,
            "search_type": "landmark"
        }
    },
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Euston Square Hotel"
        }
    }
]

2025-08-25 12:07:23,985 - evaluation_logger_Cross-240 - INFO - Start compare_single_call: 
{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-11-10', 'departure_date': '2024-11-11', 'dest_id': 900065367, 'search_type': 'landmark'}}
{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-11-10', 'departure_date': '2024-11-11', 'dest_id': 900065367, 'search_type': 'landmark'}}
2025-08-25 12:07:23,985 - evaluation_logger_Cross-240 - INFO - Rule-based compare success.
2025-08-25 12:07:23,985 - evaluation_logger_Cross-240 - INFO - Success matched: [{'name': 'Search_Hotels', 'arguments': {'arrival_date': '2024-11-10', 'departure_date': '2024-11-11', 'dest_id': 900065367, 'search_type': 'landmark'}}]
2025-08-25 12:07:23,986 - evaluation_logger_Cross-240 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "hotels": [
                {
                    "hotel_id": 160235,
                    "accessibilityLabel": "Euston Square Hotel.\n3 out of 5 stars.\n7.4 Good 3640 reviews.\n‎Camden, London‬ • ‎150 m from University College London‬.\n Hotel room : 1 bed.\nOriginal price 203 USD. Current price 183 USD..\nIncludes taxes and charges.\nFree cancellation.\nNo prepayment needed.",
                    "property": {
                        "checkin": {
                            "fromTime": "14:00",
                            "untilTime": "00:00"
                        },
                        "wishlistName": "London",
                        "reviewScoreWord": "Good",
                        "position": 0,
                        "reviewCount": 3640,
                        "countryCode": "gb",
                        "reviewScore": 7.4,
                        "blockIds": [
                            "50627_269136387_0_2_0"
                        ],
                        "isFirstPage": true,
                        "propertyClass": 3,
                        "checkout": {
                            "untilTime": "11:00",
                            "fromTime": "00:00"
                        },
                        "qualityClass": 0,
                        "accuratePropertyClass": 3,
                        "isPreferred": true,
                        "longitude": -0.135510563850403,
                        "name": "Euston Square Hotel",
                        "checkinDate": "2024-11-10",
                        "mainPhotoId": 185447399,
                        "latitude": 51.5256169067998,
                        "optOutFromGalleryChanges": 0,
                        "checkoutDate": "2024-11-11",
                        "rankingPosition": 0,
                        "ufi": -2601889,
                        "currency": "GBP",
                        "priceBreakdown": {
                            "grossPrice": {
                                "currency": "USD",
                                "value": 182.637098289141
                            },
                            "benefitBadges": [
                                {
                                    "explanation": "Mobile-only price",
                                    "identifier": "Mobile Rate",
                                    "variant": "constructive",
                                    "text": "Mobile-only price"
                                }
                            ],
                            "strikethroughPrice": {
                                "value": 202.930109210157,
                                "currency": "USD"
                            }
                        },
                        "id": 160235
                    }
                }
            ],
            "meta": [
                {
                    "title": "1977 properties"
                }
            ],
            "appear": [
                {
                    "component": {
                        "props": {
                            "content": {
                                "props": {
                                    "fitContentWidth": true,
                                    "items": [
                                        {
                                            "props": {
                                                "component": {
                                                    "props": {
                                                        "items": [
                                                            {
                                                                "props": {
                                                                    "text": [
                                                                        {
                                                                            "font": "body_2",
                                                                            "text": "Commission paid and other benefits may affect an accommodation's ranking."
                                                                        },
                                                                        {
                                                                            "font": "strong_2",
                                                                            "color": "foreground",
                                                                            "text": "  "
                                                                        },
                                                                        {
                                                                            "color": "action_foreground",
                                                                            "linkActions": [
                                                                                {}
                                                                            ],
                                                                            "text": "Find out more",
                                                                            "font": "body_2"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "spacing": "spacing_half"
                                                    }
                                                }
                                            }
                                        },
                                        {},
                                        {
                                            "props": {
                                                "component": {
                                                    "props": {
                                                        "tertiaryTintedColor": "foreground",
                                                        "icon": "close",
                                                        "accessibilityLabel": "Close",
                                                        "variant": "tertiary_tinted"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "fill": true
                        }
                    },
                    "id": "cma"
                },
                {},
                {
                    "id": "signin_now",
                    "component": {
                        "props": {
                            "title": "Sign in and save money",
                            "text": "Get instant access to our Genius loyalty programme and enjoy discounts at properties worldwide."
                        }
                    }
                },
                {
                    "component": {
                        "props": {
                            "text": "Properties with these icons have been awarded Booking.com's quality rating for homes"
                        }
                    },
                    "id": "banner_qualityrating"
                }
            ]
        }
    }
]

2025-08-25 12:07:31,563 - evaluation_logger_Cross-240 - INFO - Function Calls: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Euston Square Hotel"
        }
    }
]

2025-08-25 12:07:31,563 - evaluation_logger_Cross-240 - INFO - Golden Function Call: 
[
    {
        "name": "Taxi_Search_Location",
        "arguments": {
            "query": "Euston Square Hotel"
        }
    },
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJuSgRGyYbdkgRfE5QonVIH9k",
            "drop_off_place_id": "ChIJ2dGMjMMEdkgRqVqkuXQkj7c",
            "pick_up_date": "2024-11-11",
            "pick_up_time": "10:00"
        }
    }
]

2025-08-25 12:07:31,563 - evaluation_logger_Cross-240 - INFO - Start compare_single_call: 
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Euston Square Hotel'}}
{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Euston Square Hotel'}}
2025-08-25 12:07:31,563 - evaluation_logger_Cross-240 - INFO - Rule-based compare success.
2025-08-25 12:07:31,563 - evaluation_logger_Cross-240 - INFO - Success matched: [{'name': 'Taxi_Search_Location', 'arguments': {'query': 'Euston Square Hotel'}}]
2025-08-25 12:07:31,563 - evaluation_logger_Cross-240 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "types": "hotel",
                "name": "Euston Square Hotel",
                "countryCode": "gb",
                "latitude": 51.525616,
                "city": "London",
                "longitude": -0.13551056,
                "country": "United Kingdom",
                "googlePlaceId": "ChIJuSgRGyYbdkgRfE5QonVIH9k"
            }
        ]
    }
]

2025-08-25 12:07:44,274 - evaluation_logger_Cross-240 - INFO - Function Calls: 
[
    {
        "name": "Search_Taxi",
        "arguments": {
            "pick_up_place_id": "ChIJuSgRGyYbdkgRfE5QonVIH9k",
            "drop_off_place_id": "ChIJ2dGMjMMEdkgRqVqkuXQkj7c",
            "pick_up_date": "2024-11-11",
            "pick_up_time": "10:00"
        }
    }
]

2025-08-25 12:07:44,274 - evaluation_logger_Cross-240 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Taxi",
        "arguments": {
            "drop_off_place_id": "ChIJ2dGMjMMEdkgRqVqkuXQkj7c",
            "pick_up_date": "2024-11-11",
            "pick_up_place_id": "ChIJuSgRGyYbdkgRfE5QonVIH9k",
            "pick_up_time": "10:00"
        }
    }
]

2025-08-25 12:07:44,274 - evaluation_logger_Cross-240 - INFO - Start compare_single_call: 
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJ2dGMjMMEdkgRqVqkuXQkj7c', 'pick_up_date': '2024-11-11', 'pick_up_place_id': 'ChIJuSgRGyYbdkgRfE5QonVIH9k', 'pick_up_time': '10:00'}}
{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJ2dGMjMMEdkgRqVqkuXQkj7c', 'pick_up_date': '2024-11-11', 'pick_up_place_id': 'ChIJuSgRGyYbdkgRfE5QonVIH9k', 'pick_up_time': '10:00'}}
2025-08-25 12:07:44,274 - evaluation_logger_Cross-240 - INFO - Rule-based compare success.
2025-08-25 12:07:44,274 - evaluation_logger_Cross-240 - INFO - Success matched: [{'name': 'Search_Taxi', 'arguments': {'drop_off_place_id': 'ChIJ2dGMjMMEdkgRqVqkuXQkj7c', 'pick_up_date': '2024-11-11', 'pick_up_place_id': 'ChIJuSgRGyYbdkgRfE5QonVIH9k', 'pick_up_time': '10:00'}}]
2025-08-25 12:07:44,274 - evaluation_logger_Cross-240 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": {
            "results": [
                {
                    "drivingDistance": 4.43,
                    "janusResultReference": "5",
                    "discountType": "NONE",
                    "duration": 18,
                    "passengerCapacity": 5,
                    "legPriceBreakdown": [
                        {
                            "supplierName": "My London Transfers",
                            "supplierId": 2557,
                            "price": {
                                "currencyCode": "USD",
                                "amount": "70.32"
                            },
                            "supplierLocationId": 6377,
                            "journeyDirection": "OUTBOUND"
                        }
                    ],
                    "vehicleType": "LARGE",
                    "price": {
                        "currencyCode": "USD",
                        "amount": "70.32"
                    },
                    "descriptionLocalised": "Great choice for families.",
                    "bags": 4,
                    "meetGreet": false,
                    "supplierName": "My London Transfers",
                    "geniusDiscount": false,
                    "priceRuleId": 19521,
                    "resultId": "8d18cd47-1e8f-42e2-821d-f9a292f480a1",
                    "supplierId": 2557,
                    "categoryLocalised": "People carrier",
                    "category": "People Carrier",
                    "cancellationLeadTimeMinutes": 1440,
                    "nonRefundable": false,
                    "description": "People Carrier"
                },
                {
                    "cancellationLeadTimeMinutes": 1440,
                    "supplierId": 2460,
                    "category": "Standard",
                    "categoryLocalised": "Standard",
                    "resultId": "4a7543ff-d1d9-40ed-8040-f422b51eb92a",
                    "supplierName": "Smartzi",
                    "geniusDiscount": false,
                    "priceRuleId": 100751,
                    "meetGreet": false,
                    "descriptionLocalised": "Perfect for solo travellers, couples and small families.",
                    "bags": 3,
                    "vehicleType": "STANDARD",
                    "price": {
                        "currencyCode": "USD",
                        "amount": "71.53"
                    },
                    "legPriceBreakdown": [
                        {
                            "supplierId": 2460,
                            "supplierName": "Smartzi",
                            "journeyDirection": "OUTBOUND",
                            "price": {
                                "currencyCode": "USD",
                                "amount": "71.53"
                            },
                            "supplierLocationId": 106686
                        }
                    ],
                    "description": "Standard",
                    "nonRefundable": false,
                    "drivingDistance": 4.43,
                    "duration": 18,
                    "passengerCapacity": 4,
                    "discountType": "NONE",
                    "janusResultReference": "1"
                },
                {
                    "drivingDistance": 4.43,
                    "discountType": "NONE",
                    "janusResultReference": "2",
                    "passengerCapacity": 3,
                    "duration": 18,
                    "meetGreet": false,
                    "bags": 2,
                    "descriptionLocalised": "Plenty of space to travel in comfort.",
                    "vehicleType": "EXECUTIVE",
                    "price": {
                        "currencyCode": "USD",
                        "amount": "72.78"
                    },
                    "legPriceBreakdown": [
                        {
                            "price": {
                                "currencyCode": "USD",
                                "amount": "72.78"
                            },
                            "supplierLocationId": 6377,
                            "journeyDirection": "OUTBOUND",
                            "supplierName": "My London Transfers",
                            "supplierId": 2557
                        }
                    ],
                    "categoryLocalised": "Executive",
                    "supplierId": 2557,
                    "category": "Executive",
                    "cancellationLeadTimeMinutes": 1440,
                    "resultId": "b764ec42-f732-4244-978b-7904f2a51a64",
                    "supplierName": "My London Transfers",
                    "geniusDiscount": false,
                    "priceRuleId": 19518,
                    "nonRefundable": false,
                    "description": "Executive"
                },
                {
                    "drivingDistance": 4.43,
                    "duration": 18,
                    "passengerCapacity": 3,
                    "janusResultReference": "14",
                    "discountType": "NONE",
                    "geniusDiscount": false,
                    "supplierName": "My London Transfers",
                    "priceRuleId": 119736,
                    "resultId": "928d8369-6f6a-40a7-ae79-c2d9e16be787",
                    "supplierId": 2557,
                    "category": "Electric Standard",
                    "cancellationLeadTimeMinutes": 1440,
                    "categoryLocalised": "Electric Standard",
                    "legPriceBreakdown": [
                        {
                            "journeyDirection": "OUTBOUND",
                            "supplierLocationId": 6377,
                            "price": {
                                "currencyCode": "USD",
                                "amount": "91.17"
                            },
                            "supplierId": 2557,
                            "supplierName": "My London Transfers"
                        }
                    ],
                    "vehicleType": "STANDARD",
                    "price": {
                        "amount": "91.17",
                        "currencyCode": "USD"
                    },
                    "descriptionLocalised": "100% Electric",
                    "bags": 2,
                    "meetGreet": false,
                    "description": "Electric Standard",
                    "nonRefundable": false
                },
                {
                    "janusResultReference": "6",
                    "discountType": "NONE",
                    "passengerCapacity": 8,
                    "duration": 18,
                    "drivingDistance": 4.43,
                    "nonRefundable": false,
                    "description": "Large People Carrier",
                    "legPriceBreakdown": [
                        {
                            "supplierId": 2557,
                            "supplierName": "My London Transfers",
                            "journeyDirection": "OUTBOUND",
                            "price": {
                                "currencyCode": "USD",
                                "amount": "127.97"
                            },
                            "supplierLocationId": 6377
                        }
                    ],
                    "price": {
                        "currencyCode": "USD",
                        "amount": "127.97"
                    },
                    "vehicleType": "LARGE",
                    "bags": 8,
                    "descriptionLocalised": "Ideal for small groups.",
                    "meetGreet": false,
                    "supplierName": "My London Transfers",
                    "geniusDiscount": false,
                    "priceRuleId": 19522,
                    "resultId": "0b0195a9-120a-47e9-ac12-8c49084e6220",
                    "categoryLocalised": "Large people carrier",
                    "supplierId": 2557,
                    "category": "Large People Carrier",
                    "cancellationLeadTimeMinutes": 1440
                }
            ],
            "journeys": [
                {
                    "journeyDirection": "OUTBOUND",
                    "requestedPickupDateTime": "2024-11-11T10:00:00",
                    "janusSearchReference": "40fab0a5-a861-42b7-8fd2-107f3f5b96bf",
                    "dropOffLocation": {
                        "locationType": "GEO",
                        "name": "Big Ben, London SW1A 0AA, UK",
                        "country": "GB",
                        "postcode": "SW1A 0AA",
                        "locationId": "ChIJ2dGMjMMEdkgRqVqkuXQkj7c",
                        "establishment": "Big Ben",
                        "city": "London",
                        "description": "London SW1A 0AA, UK"
                    },
                    "pickupLocation": {
                        "establishment": "Euston Square Hotel",
                        "city": "London",
                        "description": "152 156 N Gower St, London NW1 2LU, UK",
                        "timezone": "Europe/London",
                        "postcode": "NW1 2LU",
                        "locationId": "ChIJuSgRGyYbdkgRfE5QonVIH9k",
                        "name": "Euston Square Hotel, 152 156 N Gower St, London NW1 2LU, UK",
                        "country": "GB",
                        "locationType": "GEO"
                    }
                }
            ]
        }
    }
]

2025-08-25 12:09:42,243 - evaluation_logger_Cross-240 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 前言

在上一篇文章中，我们实现了`axios`的请求和响应配置化，即用户可以配置`config`对象中的`url`、`method`、`params`、`data`、`headers`、`timeout`、`responseType`等属性。其中，`headers`配置对象中的`Content-Type`属性是`axios`内部根据请求数据的类型自动设置的，我们并没有实现。那么从这篇文章开始，我们就来实现`axios`根据请求数据的类型自动设置`headers`中的`Content-Type`属性。

# 2. 需求分析

在发送请求的时候，我们可以配置请求数据`data`，而`data`可以是任意类型的，比如普通对象、`string`、`Buffer`、`ArrayBuffer`、`FormData`、`URLSearchParams`、`Stream`等。而为了后台能够正确解析我们发送的数据，我们需要在请求头中设置一个`Content-Type`字段，用来告诉后台我们发送的数据是什么类型，这样后台才能根据对应的类型进行解析。

在之前的代码中，我们并没有对`data`做任何处理，用户传递的`data`是什么我们就发送什么，并且也没有设置请求头中的`Content-Type`字段，所以导致后台无法正确解析我们发送的数据。

所以，我们需要根据用户传递的`data`数据类型来自动设置请求头中的`Content-Type`字段。

# 3. 实现思路

我们首先需要判断用户传递的`data`是什么类型，然后根据类型来设置`Content-Type`字段。思路如下：

- 如果`data`是普通对象，那么我们认为是`JSON`类型，设置`Content-Type`为`application/json;charset=utf-8`；
- 如果`data`是`URLSearchParams`对象，那么我们认为是`form`表单类型，设置`Content-Type`为`application/x-www-form-urlencoded;charset=utf-8`；
- 如果`data`是`FormData`对象，那么我们认为是`form`表单类型，并且是`multipart/form-data`，但是不需要设置`Content-Type`，浏览器会自动识别并添加`boundary`；
- 如果`data`是`string`，并且没有设置`Content-Type`，那么默认设置`Content-Type`为`text/plain;charset=utf-8`；
- 如果`data`是`ArrayBuffer`、`ArrayBufferView`、`Buffer`、`Stream`、`File`、`Blob`等类型，那么我们认为是二进制类型，不需要设置`Content-Type`，浏览器会自动识别；

# 4. 代码实现

我们首先在`src/helpers`目录下创建`data.ts`文件，用来处理`data`相关的辅助函数。

## 4.1 判断数据类型

我们需要一个判断数据类型的辅助函数，我们在`src/helpers`目录下创建`util.ts`文件，并在该文件中编写`toString`方法，用来获取数据类型。

```typescript
// src/helpers/util.ts

const toString = Object.prototype.toString;

export function isDate(val: any): val is Date {
  return toString.call(val) === "[object Date]";
}

export function isObject(val: any): val is Object {
  return val !== null && typeof val === "object";
}

export function isPlainObject(val: any): val is Object {
  return toString.call(val) === "[object Object]";
}
```

## 4.2 处理 data

我们在`src/helpers`目录下创建`data.ts`文件，并在该文件中编写`transformRequest`和`transformResponse`方法，用来处理请求和响应的数据。

```typescript
// src/helpers/data.ts

import { isPlainObject } from "./util";

export function transformRequest(data: any): any {
  if (isPlainObject(data)) {
    return JSON.stringify(data);
  }
  return data;
}

export function transformResponse(data: any): any {
  if (typeof data === "string") {
    try {
      data = JSON.parse(data);
    } catch (e) {
      // do nothing
    }
  }
  return data;
}
```

## 4.3 处理 headers

我们在`src/helpers`目录下创建`headers.ts`文件，并在该文件中编写`processHeaders`方法，用来处理请求头。

```typescript
// src/helpers/headers.ts

import { isPlainObject } from "./util";

export function processHeaders(headers: any, data: any): any {
  if (!headers) {
    headers = {};
  }
  if (isPlainObject(data)) {
    if (headers && !headers["Content-Type"]) {
      headers["Content-Type"] = "application/json;charset=utf-8";
    }
  }
  return headers;
}
```

## 4.4 在 xhr 函数中使用

我们在`src/xhr.ts`文件中使用上面编写的辅助函数。

```typescript
// src/xhr.ts

import { transformRequest, transformResponse } from "./helpers/data";
import { processHeaders } from "./helpers/headers";

export default function xhr(config: AxiosRequestConfig): AxiosPromise {
  return new Promise((resolve, reject) => {
    const {
      url,
      method = "get",
      data = null,
      headers,
      responseType,
      timeout,
    } = config;

    const request = new XMLHttpRequest();

    if (responseType) {
      request.responseType = responseType;
    }

    if (timeout) {
      request.timeout = timeout;
    }

    request.open(method.toUpperCase(), url, true);

    Object.keys(headers).forEach((name) => {
      if (data === null && name.toLowerCase() === "content-type") {
        delete headers[name];
      } else {
        request.setRequestHeader(name, headers[name]);
      }
    });

    request.onreadystatechange = function handleLoad() {
      if (request.readyState !== 4) return;
      if (request.status === 0) return;

      const responseHeaders = request.getAllResponseHeaders();
      const responseData =
        responseType && responseType !== "text"
          ? request.response
          : request.responseText;
      const response: AxiosResponse = {
        data: transformResponse(responseData),
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request,
      };
      resolve(response);
    };

    request.onerror = function handleError() {
      reject(new Error("Network Error"));
    };

    request.ontimeout = function handleTimeout() {
      reject(new Error(`Timeout of ${timeout} ms exceeded`));
    };

    request.send(transformRequest(data));
  });
}
```

## 4.5 在 Axios 类中使用

我们在`src/core/Axios.ts`文件中使用上面编写的辅助函数。

```typescript
// src/core/Axios.ts

import { transformRequest, transformResponse } from "./helpers/data";
import { processHeaders } from "./helpers/headers";

export default class Axios {
  defaults: AxiosRequestConfig;

  constructor(initConfig: AxiosRequestConfig) {
    this.defaults = initConfig;
  }

  request(config: AxiosRequestConfig): AxiosPromise {
    config = mergeConfig(this.defaults, config);
    config.headers = processHeaders(config.headers, config.data);
    return xhr(config);
  }

  get(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("get", url, config);
  }

  delete(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("delete", url, config);
  }

  head(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("head", url, config);
  }

  options(url: string, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithoutData("options", url, config);
  }

  post(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithData("post", url, data, config);
  }

  put(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithData("put", url, data, config);
  }

  patch(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise {
    return this._requestMethodWithData("patch", url, data, config);
  }

  _requestMethodWithoutData(
    method: string,
    url: string,
    config?: AxiosRequestConfig
  ) {
    return this.request(
      Object.assign(config || {}, {
        method,
        url,
      })
    );
  }

  _requestMethodWithData(
    method: string,
    url: string,
    data?: any,
    config?: AxiosRequestConfig
  ) {
    return this.request(
      Object.assign(config || {}, {
        method,
        url,
        data,
      })
    );
  }
}
```

# 5. 测试

我们编写一个测试例子，来测试我们的代码是否正常工作。

```typescript
// examples/simple/index.ts

import axios from "../../src/index";

axios({
  method: "post",
  url: "/api/handleRequestBody/post",
  data: {
    a: 1,
    b: 2,
  },
});
```

我们打开浏览器，查看网络请求，可以看到请求头中已经自动设置了`Content-Type`字段，并且值为`application/json;charset=utf-8`。

![](~@/axios/05/01.png)

# 6. 遗留问题

我们目前只处理了普通对象的情况，对于其他类型的数据，我们还没有处理。比如`URLSearchParams`、`FormData`、`string`等类型。我们将在下一篇文章中继续完善。

# 7. 总结

在本篇文章中，我们实现了`axios`根据请求数据的类型自动设置`headers`中的`Content-Type`属性。我们首先判断用户传递的`data`是什么类型，然后根据类型来设置`Content-Type`字段。目前只处理了普通对象的情况，对于其他类型的数据，我们将在下一篇文章中继续完善。


2025-08-25 12:09:46,951 - evaluation_logger_Cross-240 - INFO - Complete Result: {'score': 0, 'reason': "The response does not address any part of the user's query about finding a hotel near University College London or booking a taxi to Big Ben."}
2025-08-25 12:09:52,892 - evaluation_logger_Cross-240 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 12:09:52,892 - evaluation_logger_Cross-240 - INFO - Message: Success.
2025-08-25 12:09:52,892 - evaluation_logger_Cross-240 - INFO - Success turn num = 4
2025-08-25 12:09:52,892 - evaluation_logger_Cross-240 - INFO - ----------------------------------------------------------------------------------------------------
