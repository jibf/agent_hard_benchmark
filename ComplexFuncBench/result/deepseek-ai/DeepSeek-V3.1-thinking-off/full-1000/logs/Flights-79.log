2025-08-25 13:25:51,100 - evaluation_logger_Flights-79 - INFO - Test Example Flights-79
2025-08-25 13:25:51,100 - evaluation_logger_Flights-79 - INFO - Query: We're planning to leave Philadelphia on November 18th, 2024, and travel to Prague. After staying in Prague for two days, we'll go to Auckland, then return to Philadelphia on December 2nd, 2024. I'm looking for the cheapest first class flights for this time period. If the ticket price is over 1800 dollars, we won't stay in Prague. Instead, check the lowest price for a direct round-trip from Philadelphia to Auckland during this time.
2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Function Calls: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Philadelphia"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Prague"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Auckland"
        }
    }
]

2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Golden Function Call: 
[
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Philadelphia"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Prague"
        }
    },
    {
        "name": "Search_Flight_Location",
        "arguments": {
            "query": "Auckland"
        }
    },
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "FIRST",
            "legs": [
                {
                    "fromId": "PHL.CITY",
                    "toId": "PRG.AIRPORT",
                    "date": "2024-11-18"
                },
                {
                    "fromId": "PRG.AIRPORT",
                    "toId": "AKL.AIRPORT",
                    "date": "2024-11-20"
                },
                {
                    "fromId": "AKL.AIRPORT",
                    "toId": "PHL.CITY",
                    "date": "2024-12-02"
                }
            ]
        }
    }
]

2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Philadelphia'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Philadelphia'}}
2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Rule-based compare success.
2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Prague'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Prague'}}
2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Rule-based compare success.
2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Start compare_single_call: 
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Auckland'}}
{'name': 'Search_Flight_Location', 'arguments': {'query': 'Auckland'}}
2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Rule-based compare success.
2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Success matched: [{'name': 'Search_Flight_Location', 'arguments': {'query': 'Philadelphia'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Prague'}}, {'name': 'Search_Flight_Location', 'arguments': {'query': 'Auckland'}}]
2025-08-25 13:26:00,408 - evaluation_logger_Flights-79 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "PHL.CITY",
                "type": "CITY",
                "name": "Philadelphia",
                "code": "PHL",
                "regionName": "Pennsylvania",
                "country": "US",
                "countryName": "United States"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "PRG.AIRPORT",
                "type": "AIRPORT",
                "name": "Vaclav Havel Airport Prague",
                "code": "PRG",
                "city": "PRG",
                "cityName": "Prague",
                "country": "CZ",
                "countryName": "Czech Republic",
                "countryNameShort": "Czech Republic",
                "distanceToCity": {
                    "value": 11.202693777767475,
                    "unit": "km"
                },
                "parent": "PRG"
            }
        ]
    },
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "id": "AKL.AIRPORT",
                "type": "AIRPORT",
                "name": "Auckland Airport",
                "code": "AKL",
                "city": "AKL",
                "cityName": "Auckland",
                "regionName": "Auckland Region",
                "country": "NZ",
                "countryName": "New Zealand",
                "countryNameShort": "New Zealand",
                "distanceToCity": {
                    "value": 17.55107122110258,
                    "unit": "km"
                },
                "parent": "AKL"
            }
        ]
    }
]

2025-08-25 13:26:13,242 - evaluation_logger_Flights-79 - INFO - Function Calls: 
[
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "FIRST",
            "legs": [
                {
                    "fromId": "PHL.CITY",
                    "toId": "PRG.AIRPORT",
                    "date": "2024-11-18"
                },
                {
                    "fromId": "PRG.AIRPORT",
                    "toId": "AKL.AIRPORT",
                    "date": "2024-11-20"
                },
                {
                    "fromId": "AKL.AIRPORT",
                    "toId": "PHL.CITY",
                    "date": "2024-12-02"
                }
            ]
        }
    }
]

2025-08-25 13:26:13,242 - evaluation_logger_Flights-79 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Min_Price_Multi_Stops",
        "arguments": {
            "cabinClass": "FIRST",
            "legs": [
                {
                    "fromId": "PHL.CITY",
                    "toId": "PRG.AIRPORT",
                    "date": "2024-11-18"
                },
                {
                    "fromId": "PRG.AIRPORT",
                    "toId": "AKL.AIRPORT",
                    "date": "2024-11-20"
                },
                {
                    "fromId": "AKL.AIRPORT",
                    "toId": "PHL.CITY",
                    "date": "2024-12-02"
                }
            ]
        }
    },
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "FIRST",
            "fromId": "PHL.CITY",
            "toId": "AKL.AIRPORT",
            "departDate": "2024-11-18",
            "returnDate": "2024-12-02"
        }
    }
]

2025-08-25 13:26:13,242 - evaluation_logger_Flights-79 - INFO - Start compare_single_call: 
{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'FIRST', 'legs': [{'fromId': 'PHL.CITY', 'toId': 'PRG.AIRPORT', 'date': '2024-11-18'}, {'fromId': 'PRG.AIRPORT', 'toId': 'AKL.AIRPORT', 'date': '2024-11-20'}, {'fromId': 'AKL.AIRPORT', 'toId': 'PHL.CITY', 'date': '2024-12-02'}]}}
{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'FIRST', 'legs': [{'fromId': 'PHL.CITY', 'toId': 'PRG.AIRPORT', 'date': '2024-11-18'}, {'fromId': 'PRG.AIRPORT', 'toId': 'AKL.AIRPORT', 'date': '2024-11-20'}, {'fromId': 'AKL.AIRPORT', 'toId': 'PHL.CITY', 'date': '2024-12-02'}]}}
2025-08-25 13:26:13,242 - evaluation_logger_Flights-79 - INFO - Rule-based compare success.
2025-08-25 13:26:13,242 - evaluation_logger_Flights-79 - INFO - Success matched: [{'name': 'Get_Min_Price_Multi_Stops', 'arguments': {'cabinClass': 'FIRST', 'legs': [{'fromId': 'PHL.CITY', 'toId': 'PRG.AIRPORT', 'date': '2024-11-18'}, {'fromId': 'PRG.AIRPORT', 'toId': 'AKL.AIRPORT', 'date': '2024-11-20'}, {'fromId': 'AKL.AIRPORT', 'toId': 'PHL.CITY', 'date': '2024-12-02'}]}}]
2025-08-25 13:26:13,242 - evaluation_logger_Flights-79 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "data": [
            {
                "departureDate": "2024-11-13",
                "returnDate": "2024-11-27",
                "searchDates": [
                    "2024-11-13",
                    "2024-11-15",
                    "2024-11-27"
                ],
                "offsetDays": -5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1984,
                    "nanos": 540000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1985,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-14",
                "returnDate": "2024-11-28",
                "searchDates": [
                    "2024-11-14",
                    "2024-11-16",
                    "2024-11-28"
                ],
                "offsetDays": -4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2155,
                    "nanos": 450000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2156,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-15",
                "returnDate": "2024-11-29",
                "searchDates": [
                    "2024-11-15",
                    "2024-11-17",
                    "2024-11-29"
                ],
                "offsetDays": -3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2204,
                    "nanos": 770000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2205,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-16",
                "returnDate": "2024-11-30",
                "searchDates": [
                    "2024-11-16",
                    "2024-11-18",
                    "2024-11-30"
                ],
                "offsetDays": -2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2112,
                    "nanos": 50000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2113,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-17",
                "returnDate": "2024-12-01",
                "searchDates": [
                    "2024-11-17",
                    "2024-11-19",
                    "2024-12-01"
                ],
                "offsetDays": -1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 2368,
                    "nanos": 620000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 2369,
                    "nanos": 0
                }
            }
        ]
    }
]

2025-08-25 13:26:22,225 - evaluation_logger_Flights-79 - INFO - Function Calls: 
[
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "FIRST",
            "fromId": "PHL.CITY",
            "toId": "AKL.AIRPORT",
            "departDate": "2024-11-18",
            "returnDate": "2024-12-02"
        }
    }
]

2025-08-25 13:26:22,225 - evaluation_logger_Flights-79 - INFO - Golden Function Call: 
[
    {
        "name": "Get_Min_Price",
        "arguments": {
            "cabinClass": "FIRST",
            "departDate": "2024-11-18",
            "fromId": "PHL.CITY",
            "returnDate": "2024-12-02",
            "toId": "AKL.AIRPORT"
        }
    }
]

2025-08-25 13:26:22,225 - evaluation_logger_Flights-79 - INFO - Start compare_single_call: 
{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'FIRST', 'departDate': '2024-11-18', 'fromId': 'PHL.CITY', 'returnDate': '2024-12-02', 'toId': 'AKL.AIRPORT'}}
{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'FIRST', 'departDate': '2024-11-18', 'fromId': 'PHL.CITY', 'returnDate': '2024-12-02', 'toId': 'AKL.AIRPORT'}}
2025-08-25 13:26:22,225 - evaluation_logger_Flights-79 - INFO - Rule-based compare success.
2025-08-25 13:26:22,225 - evaluation_logger_Flights-79 - INFO - Success matched: [{'name': 'Get_Min_Price', 'arguments': {'cabinClass': 'FIRST', 'departDate': '2024-11-18', 'fromId': 'PHL.CITY', 'returnDate': '2024-12-02', 'toId': 'AKL.AIRPORT'}}]
2025-08-25 13:26:22,226 - evaluation_logger_Flights-79 - INFO - Observations:
[
    {
        "status": true,
        "message": "Success",
        "timestamp": 1729482705508,
        "data": [
            {
                "departureDate": "2024-11-13",
                "returnDate": "2024-11-27",
                "searchDates": [
                    "2024-11-13",
                    "2024-11-27"
                ],
                "offsetDays": -5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1601,
                    "nanos": 220000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1602,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-14",
                "returnDate": "2024-11-28",
                "searchDates": [
                    "2024-11-14",
                    "2024-11-28"
                ],
                "offsetDays": -4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1596,
                    "nanos": 720000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1597,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-15",
                "returnDate": "2024-11-29",
                "searchDates": [
                    "2024-11-15",
                    "2024-11-29"
                ],
                "offsetDays": -3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1681,
                    "nanos": 570000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1682,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-16",
                "returnDate": "2024-11-30",
                "searchDates": [
                    "2024-11-16",
                    "2024-11-30"
                ],
                "offsetDays": -2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1995,
                    "nanos": 570000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1996,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-17",
                "returnDate": "2024-12-01",
                "searchDates": [
                    "2024-11-17",
                    "2024-12-01"
                ],
                "offsetDays": -1,
                "isCheapest": true,
                "price": {
                    "currencyCode": "USD",
                    "units": 1265,
                    "nanos": 440000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1266,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-18",
                "returnDate": "2024-12-02",
                "searchDates": [
                    "2024-11-18",
                    "2024-12-02"
                ],
                "offsetDays": 0,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1678,
                    "nanos": 570000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1679,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-19",
                "returnDate": "2024-12-03",
                "searchDates": [
                    "2024-11-19",
                    "2024-12-03"
                ],
                "offsetDays": 1,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1476,
                    "nanos": 680000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1477,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-20",
                "returnDate": "2024-12-04",
                "searchDates": [
                    "2024-11-20",
                    "2024-12-04"
                ],
                "offsetDays": 2,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1574,
                    "nanos": 750000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1575,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-21",
                "returnDate": "2024-12-05",
                "searchDates": [
                    "2024-11-21",
                    "2024-12-05"
                ],
                "offsetDays": 3,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1566,
                    "nanos": 850000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1567,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-22",
                "returnDate": "2024-12-06",
                "searchDates": [
                    "2024-11-22",
                    "2024-12-06"
                ],
                "offsetDays": 4,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1645,
                    "nanos": 240000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1646,
                    "nanos": 0
                }
            },
            {
                "departureDate": "2024-11-23",
                "returnDate": "2024-12-07",
                "searchDates": [
                    "2024-11-23",
                    "2024-12-07"
                ],
                "offsetDays": 5,
                "isCheapest": false,
                "price": {
                    "currencyCode": "USD",
                    "units": 1514,
                    "nanos": 630000000
                },
                "priceRounded": {
                    "currencyCode": "USD",
                    "units": 1515,
                    "nanos": 0
                }
            }
        ]
    }
]

2025-08-25 13:28:31,811 - evaluation_logger_Flights-79 - INFO - Final Response: <｜begin▁of▁sentence｜># 1. 概述

本文，我们来分享 [《精尽 Spring Boot 源码分析 —— SpringApplication》](http://svip.iocoder.cn/Spring-Boot/SpringApplication/) 的**初始化**的源码解析。

在 SpringApplication 实例初始化的过程中，会进行**初始化阶段**。而初始化阶段，主要会做如下几件事情：

1. 设置 `primarySources` 属性
2. 设置 `webApplicationType` 属性
3. 设置 `initializers` 属性
4. 设置 `listeners` 属性
5. 设置 `mainApplicationClass` 属性

# 2. 构造方法

SpringApplication 提供了**多个**构造方法，用于初始化。代码如下：

```java
// SpringApplication.java

public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
    this.resourceLoader = resourceLoader;
    Assert.notNull(primarySources, "PrimarySources must not be null");
    this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));
    // <1> 推断 Web 应用类型
    this.webApplicationType = WebApplicationType.deduceFromClasspath();
    // <2> 设置初始化器
    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
    // <3> 设置监听器
    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
    // <4> 推断主类
    this.mainApplicationClass = deduceMainApplicationClass();
}

public SpringApplication(Class<?>... primarySources) {
    this(null, primarySources);
}
```

- 两个构造方法，实际是同一个。差别在于，前者可以传入自定义的 `resourceLoader` 参数，而后者传入的是 `null` 。

- `<1>` 处，调用 `WebApplicationType#deduceFromClasspath()` 方法，推断 Web 应用的类型。详细解析，见 [「2.1 WebApplicationType」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `<2>` 处，设置初始化器。详细解析，见 [「2.2 初始化器」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `<3>` 处，设置监听器。详细解析，见 [「2.3 监听器」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

- `<4>` 处，调用 `#deduceMainApplicationClass()` 方法，推断主类。详细解析，见 [「2.4 主类」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 。

## 2.1 WebApplicationType

`org.springframework.boot.WebApplicationType` ，Spring Boot 应用类型**枚举**。代码如下：

```java
// WebApplicationType.java

public enum WebApplicationType {

    /**
     * 非 Web 项目
     */
    NONE,
    /**
     * Servlet Web 项目
     */
    SERVLET,
    /**
     * Reactive Web 项目
     */
    REACTIVE;

    private static final String[] SERVLET_INDICATOR_CLASSES = { "javax.servlet.Servlet",
            "org.springframework.web.context.ConfigurableWebApplicationContext" };

    private static final String WEBMVC_INDICATOR_CLASS = "org.springframework.web.servlet.DispatcherServlet";

    private static final String WEBFLUX_INDICATOR_CLASS = "org.springframework.web.reactive.DispatcherHandler";

    private static final String JERSEY_INDICATOR_CLASS = "org.glassfish.jersey.servlet.ServletContainer";

    private static final String SERVLET_APPLICATION_CONTEXT_CLASS = "org.springframework.web.context.WebApplicationContext";

    private static final String REACTIVE_APPLICATION_CONTEXT_CLASS = "org.springframework.boot.web.reactive.context.ReactiveWebApplicationContext";

    /**
     * 推断 Web 应用的类型
     *
     * @return Web 应用类型
     */
    static WebApplicationType deduceFromClasspath() {
        // 如果存在 REACTIVE 相关的类，不存在 SERVLET 相关的类，则定义为 REACTIVE 类型
        if (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, null) && !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, null)
                && !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, null)) {
            return WebApplicationType.REACTIVE;
        }
        // 如果不存在 SERVLET 相关的类，则定义为 NONE 类型
        for (String className : SERVLET_INDICATOR_CLASSES) {
            if (!ClassUtils.isPresent(className, null)) {
                return WebApplicationType.NONE;
            }
        }
        // 否则，定义为 SERVLET 类型
        return WebApplicationType.SERVLET;
    }

}
```

- 根据类路径下，是否存在相应的类，进行推断。

## 2.2 初始化器

在 `<2>` 处，会设置初始化器。初始化器，是 `org.springframework.context.ApplicationContextInitializer` 的实现类。代码如下：

```java
// ApplicationContextInitializer.java

public interface ApplicationContextInitializer<C extends ConfigurableApplicationContext> {

	/**
	 * Initialize the given application context.
	 * @param applicationContext the application to initialize
	 */
	void initialize(C applicationContext);

}
```

- 它用于，在 Spring 容器初始化时，做一些初始化的工作。

- 具体的初始化器，我们在 [「2.2.1 getSpringFactoriesInstances」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 中，详细解析。

### 2.2.1 getSpringFactoriesInstances

在 `<2>` 和 `<3>` 处，都会调用 `#getSpringFactoriesInstances(Class<T> type)` 方法，获得相应的类型的数组。代码如下：

```java
// SpringApplication.java

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type) {
    return getSpringFactoriesInstances(type, new Class<?>[] {});
}

private <T> Collection<T> getSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, Object... args) {
    ClassLoader classLoader = getClassLoader();
    // Use names and ensure unique to protect against duplicates
    // <1> 加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组
    Set<String> names = new LinkedHashSet<>(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    // <2> 创建对象
    List<T> instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    // <3> 排序
    AnnotationAwareOrderComparator.sort(instances);
    return instances;
}
```

- `<1>` 处，调用 `SpringFactoriesLoader#loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader)` 方法，加载指定类型对应的，在 `META-INF/spring.factories` 里的类名的数组。

  - 在 Spring Boot 项目中，`META-INF/spring.factories` 配置文件，在 `spring-boot-autoconfigure` 项目资源中。例如：

    ```properties
    # Initializers
    org.springframework.context.ApplicationContextInitializer=\
    org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\
    org.springframework.boot.context.ContextIdApplicationContextInitializer,\
    org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\
    org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer
    ```

    - 所以，此处会获得如上配置的四个 ApplicationContextInitializer 实现类。

  - 关于 SpringFactoriesLoader 的详细解析，见 [《【死磕 Spring】—— IoC 之加载 BeanDefinition》](http://svip.iocoder.cn/Spring/IoC-load-BeanDefinitions/?self) 的 [「3. loadFactoryNames」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 小节。

- `<2>` 处，调用 `#createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes, ClassLoader classLoader, Object[] args, Set<String> names)` 方法，创建对象。代码如下：

  ```java
  // SpringApplication.java
  
  private <T> List<T> createSpringFactoriesInstances(Class<T> type, Class<?>[] parameterTypes,
  		ClassLoader classLoader, Object[] args, Set<String> names) {
  	List<T> instances = new ArrayList<>(names.size());
  	for (String name : names) {
  		try {
  			Class<?> instanceClass = ClassUtils.forName(name, classLoader);
  			Assert.isAssignable(type, instanceClass);
  			Constructor<?> constructor = instanceClass.getDeclaredConstructor(parameterTypes);
  			T instance = (T) BeanUtils.instantiateClass(constructor, args);
  			instances.add(instance);
  		} catch (Throwable ex) {
  			throw new IllegalArgumentException("Cannot instantiate " + type + " : " + name, ex);
  		}
  	}
  	return instances;
  }
  ```

  - 通过反射，创建对象。

- `<3>` 处，调用 `AnnotationAwareOrderComparator#sort(List<?> list)` 方法，排序对象数组。

  - 关于 AnnotationAwareOrderComparator 的详细解析，见 [《【死磕 Spring】—— IoC 之深入分析 BeanFactoryPostProcessor》](http://svip.iocoder.cn/Spring/IoC-BeanFactoryPostProcessor/?self) 的 [「4.1 AnnotationAwareOrderComparator」](http://svip.iocoder.cn/Spring-Boot/SpringApplication/#) 小节。

## 2.3 监听器

在 `<3>` 处，会设置监听器。监听器，是 `org.springframework.context.ApplicationListener` 的实现类。代码如下：

```java
// ApplicationListener.java

@FunctionalInterface
public interface ApplicationListener<E extends ApplicationEvent> extends EventListener {

	/**
	 * Handle an application event.
	 * @param event the event to respond to
	 */
	void onApplicationEvent(E event);

}
```

- 它用于，监听 Spring 的事件。

- 具体的监听器，也是通过 `#getSpringFactoriesInstances(Class<T> type)` 方法来获得。例如，在 `spring-boot-autoconfigure` 项目资源中的 `META-INF/spring.factories` 中，配置了：

  ```properties
  # Application Listeners
  org.springframework.context.ApplicationListener=\
  org.springframework.boot.ClearCachesApplicationListener,\
  org.springframework.boot.builder.ParentContextCloserApplicationListener,\
  org.springframework.boot.context.FileEncodingApplicationListener,\
  org.springframework.boot.context.config.AnsiOutputApplicationListener,\
  org.springframework.boot.context.config.ConfigFileApplicationListener,\
  org.springframework.boot.context.config.DelegatingApplicationListener,\
  org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\
  org.springframework.boot.context.logging.LoggingApplicationListener,\
  org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener
  ```

  - 所以，此处会获得如上配置的九个 ApplicationListener 实现类。

## 2.4 主类

在 `<4>` 处，会调用 `#deduceMainApplicationClass()` 方法，推断主类。代码如下：

```java
// SpringApplication.java

private Class<?> deduceMainApplicationClass() {
	try {
		// 获得当前 StackTraceElement 数组
		StackTraceElement[] stackTrace = new RuntimeException().getStackTrace();
		// 遍历 StackTraceElement 数组，判断哪个执行 main 方法
		for (StackTraceElement stackTraceElement : stackTrace) {
			if ("main".equals(stackTraceElement.getMethodName())) {
				return Class.forName(stackTraceElement.getClassName());
			}
		}
	} catch (ClassNotFoundException ex) {
		// Swallow and continue
	}
	return null;
}
```

- 通过异常的方式，获取当前 StackTraceElement 数组，然后遍历判断哪个执行了 `main` 方法，从而获得主类。

# 3. 小结

至此，SpringApplication 实例已经初始化完成。后续，我们开始看看 `#run(String... args)` 方法，Spring Boot 应用的启动。

2025-08-25 13:28:38,995 - evaluation_logger_Flights-79 - INFO - Complete Result: {'score': 0, 'reason': 'The response does not address any of the requested information about flights or ticket prices.'}
2025-08-25 13:28:45,513 - evaluation_logger_Flights-79 - INFO - Correct Result: {'score': 0, 'reason': 'All information in the response is incorrect.'}
2025-08-25 13:28:45,513 - evaluation_logger_Flights-79 - INFO - Message: Success.
2025-08-25 13:28:45,513 - evaluation_logger_Flights-79 - INFO - Success turn num = 3
2025-08-25 13:28:45,513 - evaluation_logger_Flights-79 - INFO - ----------------------------------------------------------------------------------------------------
