{"id": "java_0", "result": "[GeometryPresentation.createPresentation(controller='mapController', parent='mapArea')]", "input_token_count": 415, "output_token_count": 15, "latency": 6.034846067428589}
{"id": "java_1", "result": "```json\n[\n    {\n        \"name\": \"SQLCompletionAnalyzer.makeProposalsFromObject\",\n        \"parameters\": {\n            \"object\": \"Customers\",\n            \"useShortName\": \"true\",\n            \"params\": \"{\\\"limit\\\": \\\"50\\\", \\\"schemaFilter\\\": \\\"public\\\"}\"\n        }\n    }\n]\n```", "input_token_count": 459, "output_token_count": 65, "latency": 6.668425798416138}
{"id": "java_2", "result": "```json\n[\n    {\n        \"name\": \"FireBirdUtils.getViewSourceWithHeader\",\n        \"parameters\": {\n            \"monitor\": \"dbMonitor\",\n            \"view\": \"EmployeeView\",\n            \"source\": \"SELECT * FROM Employee WHERE status = 'active'\"\n        }\n    }\n]\n```", "input_token_count": 472, "output_token_count": 62, "latency": 6.798168897628784}
{"id": "java_3", "result": "[DB2Tablespace.resolveTablespaceReference(monitor='dbMonitor', dataSource='db2DataSource', reference='USERSPACE1')]", "input_token_count": 482, "output_token_count": 29, "latency": 5.742624044418335}
{"id": "java_4", "result": "The provided function requires a `DB2ViewBase` object representing the DB2 view. However, you have not provided this object. Please provide the `DB2ViewBase` object for the 'EmployeeView' within the schema 'HR'.", "input_token_count": 426, "output_token_count": 49, "latency": 6.828037977218628}
{"id": "java_5", "result": "[PlainTextPresentation.createPresentation(controller='dataController', parent='compositeParent')]", "input_token_count": 438, "output_token_count": 17, "latency": 5.581576824188232}
{"id": "java_6", "result": "[SpreadsheetPresentation.refreshData(refreshMetadata=\"true\", append=\"true\", keepState=\"true\")]", "input_token_count": 445, "output_token_count": 19, "latency": 8.969481945037842}
{"id": "java_7", "result": "[EFSNIOResource.copy(destination='/backup/data.txt', force='true', monitor='progressTracker')]", "input_token_count": 485, "output_token_count": 21, "latency": 8.497594118118286}
{"id": "java_8", "result": "[EFSNIOFile.setContents(source='fileStream', force='true', keepHistory='false', monitor='progressMonitor')]", "input_token_count": 517, "output_token_count": 26, "latency": 6.579339027404785}
{"id": "java_9", "result": "[writeMultiPoint(multiPoint='new MultiPoint(Arrays.asList(new Point(1, 2), new Point(3, 4), new Point(5, 6), new Point(7, 8), new Point(9, 10)))', xyzmMode='XyzmMode.XYZ', buffer='ByteBuffer.allocate(1024)')]", "input_token_count": 538, "output_token_count": 76, "latency": 6.655879259109497}
{"id": "java_10", "result": "[JNIBridge.setLauncherInfo(launcher='/usr/local/bin/dbeaver', name='DBeaverLauncher')]", "input_token_count": 392, "output_token_count": 24, "latency": 8.983904123306274}
{"id": "java_11", "result": "[BasePolicyDataProvider.getRegistryPolicyValue(root='HKEY_LOCAL_MACHINE', property='EnableExtensions')]", "input_token_count": 428, "output_token_count": 21, "latency": 9.066233158111572}
{"id": "java_12", "result": "```json\n[{\"name\": \"ExasolExecutionContext.setCurrentSchema\", \"parameters\": {\"monitor\": \"progressMonitor\", \"schemaName\": \"AnalyticsDB\"}}]\n```", "input_token_count": 414, "output_token_count": 36, "latency": 8.944207191467285}
{"id": "java_13", "result": "[AltibaseGrantee.prepareObjectsStatement(session='JDBC_session', owner='JohnDoe')]", "input_token_count": 422, "output_token_count": 19, "latency": 8.241556882858276}
{"id": "java_14", "result": "```json\n[{\"name\": \"FunGameBase.onFinish\", \"parameters\": {\"layout\": \"gameLayout\", \"success\": \"true\"}}]\n```", "input_token_count": 410, "output_token_count": 32, "latency": 6.921355962753296}
{"id": "java_15", "result": "[Res9patchStreamDecoder.decode(input='imageInputStream', out='imageOutputStream')]", "input_token_count": 430, "output_token_count": 19, "latency": 6.224254131317139}
{"id": "java_16", "result": "```json\n[{\"name\": \"InsnDecoder.invokePolymorphic\", \"parameters\": {\"insn\": \"instructionData\", \"isRange\": \"true\"}}]\n```", "input_token_count": 414, "output_token_count": 35, "latency": 6.214940071105957}
{"id": "java_17", "result": "The function `GenericTypesVisitor.attachGenericTypesInfo` can be used to attach generic type information to a constructor invocation instruction. However, I need the string representations of the `MethodNode` and `ConstructorInsn` instances, specifically `initMethod` and `newConstructorInsn`, to proceed with the function call. Could you please provide these details?", "input_token_count": 428, "output_token_count": 70, "latency": 10.40856122970581}
{"id": "java_18", "result": "[SysRoleController.queryPageRoleCount(pageNo='3', pageSize='20')]", "input_token_count": 423, "output_token_count": 18, "latency": 6.3192572593688965}
{"id": "java_19", "result": "[PersonController.personal(model='webModel', request='userRequest')]", "input_token_count": 427, "output_token_count": 14, "latency": 9.618541717529297}
{"id": "java_20", "result": "```json\n[{\"name\": \"HbaseAdapter.updateConfig\", \"parameters\": {\"fileName\": \"user-mapping.yml\", \"config\": \"newMappingConfig\"}}]\n```", "input_token_count": 423, "output_token_count": 37, "latency": 9.279378890991211}
{"id": "java_21", "result": "```json\n[SessionHandler.exceptionCaught(ctx=\"nettyChannelContext\", e=\"ioExceptionEvent\")]\n```", "input_token_count": 425, "output_token_count": 22, "latency": 8.013612031936646}
{"id": "java_22", "result": "[PmsProductServiceImpl.updateNewStatus(ids=\"[101, 202, 303]\", newStatus=\"2\")]", "input_token_count": 423, "output_token_count": 23, "latency": 8.88481092453003}
{"id": "java_23", "result": "[SmsHomeNewProductServiceImpl.list(productName='LED TV', recommendStatus='1', pageSize='20', pageNum='3')]", "input_token_count": 498, "output_token_count": 29, "latency": 8.844745874404907}
{"id": "java_24", "result": "[PmsProductCategoryController.updateShowStatus(ids='[101, 102, 103]', showStatus='0')]", "input_token_count": 430, "output_token_count": 24, "latency": 8.776018381118774}
{"id": "java_25", "result": "[SmsHomeRecommendSubjectController.updateSort(id='42', sort='5')]", "input_token_count": 400, "output_token_count": 16, "latency": 5.871520042419434}
{"id": "java_26", "result": "[ProxyConnection.prepareCall(sql='CALL totalSales(?)', resultSetType='ResultSet.TYPE_SCROLL_INSENSITIVE', concurrency='ResultSet.CONCUR_READ_ONLY', holdability='ResultSet.CLOSE_CURSORS_AT_COMMIT')]", "input_token_count": 547, "output_token_count": 46, "latency": 6.65036416053772}
{"id": "java_27", "result": "[TwoSum.twoSum(nums=\"[2, 7, 11, 15]\", target=\"9\")]", "input_token_count": 415, "output_token_count": 22, "latency": 8.858428001403809}
{"id": "java_28", "result": "```json\n[{\"name\": \"configStorage.dynamicCredentialsScheduledExecutorService\", \"parameters\": {\"credentialsFile\": \"es_credentials.properties\", \"credentialsRefreshInterval\": \"30\", \"basicCredentials\": \"basicAuthCredentials\"}}]\n```", "input_token_count": 462, "output_token_count": 47, "latency": 9.612736940383911}
{"id": "java_29", "result": "```json\n[propertyTransferredToCollectorBuilder(property='zipkin.collector.activemq.concurrency', value='10', builderExtractor='getConcurrency')]\n```", "input_token_count": 457, "output_token_count": 30, "latency": 9.113547086715698}
{"id": "java_30", "result": "[RedissonAsyncCache.putIfAbsent(key='answer', value='42')]", "input_token_count": 442, "output_token_count": 16, "latency": 8.792774200439453}
{"id": "java_31", "result": "[RedissonRx.getQueue(name='taskQueue', codec='jsonCodec')]", "input_token_count": 395, "output_token_count": 16, "latency": 6.464970111846924}
{"id": "java_32", "result": "[RedissonPermitExpirableSemaphore.tryAcquireAsync(waitTime=\"5\", leaseTime=\"120\", unit=\"SECONDS\")]", "input_token_count": 475, "output_token_count": 24, "latency": 8.854065179824829}
{"id": "java_33", "result": "[RedissonMapCache.putOperationAsync(key='employee:1234', value='John Doe')]", "input_token_count": 411, "output_token_count": 20, "latency": 8.718960762023926}
{"id": "java_34", "result": "```json\n[{\"name\": \"ServiceManager.newTimeout\", \"parameters\": {\"task\": \"cleanupTask\", \"delay\": \"300\", \"unit\": \"TimeUnit.SECONDS\"}}]\n```", "input_token_count": 454, "output_token_count": 39, "latency": 9.177496194839478}
{"id": "java_35", "result": "[RedissonConnection.bitOp(op='BitOperation.AND', destination='user:online:both', keys='[\"user:online:today\", \"user:online:yesterday\"]')]", "input_token_count": 510, "output_token_count": 38, "latency": 6.56696081161499}
{"id": "java_36", "result": "```json\n[{\"name\":\"ObjectMapEntryReplayDecoder.decode\",\"parameters\":{\"parts\":\"['userID', 42, 'username', 'johndoe', 'isActive', true]\",\"state\":\"processingState\"}}]\n```", "input_token_count": 441, "output_token_count": 48, "latency": 6.933681011199951}
{"id": "java_37", "result": "[ConsoleAnnotator.annotate(context='jenkinsBuild', text='buildOutput')]", "input_token_count": 410, "output_token_count": 17, "latency": 6.138874053955078}
{"id": "java_38", "result": "The provided function requires a `filteredSource` parameter in the form of a Java HashMap type string representation. Please provide the `docFields` in the required format so that I can proceed with creating the stubbed source map.", "input_token_count": 386, "output_token_count": 46, "latency": 9.636082172393799}
{"id": "java_39", "result": "[NodeIdConverter.format(event='logEvent', toAppendTo='logBuilder')]", "input_token_count": 416, "output_token_count": 17, "latency": 8.817277193069458}
{"id": "java_40", "result": "[RoutingNodesChangedObserver.shardInitialized(unassignedShard='shardA', initializedShard='shardB')]", "input_token_count": 411, "output_token_count": 23, "latency": 6.148639917373657}
{"id": "java_41", "result": "[SearchHit.declareInnerHitsParseFields(parser=\"searchHitParser\")]", "input_token_count": 360, "output_token_count": 15, "latency": 8.564342021942139}
{"id": "java_42", "result": "[TermQueryBuilderTests.termQuery(mapper='usernameField', value='JohnDoe', caseInsensitive='true')]", "input_token_count": 447, "output_token_count": 23, "latency": 6.171360015869141}
{"id": "java_43", "result": "[SecureMockMaker.createSpy(settings='mockSettings', handler='mockHandler', object='testObject')]", "input_token_count": 458, "output_token_count": 21, "latency": 6.243591785430908}
{"id": "java_44", "result": "[DesAPITest.init(crypt='DESede', mode='CBC', padding='PKCS5Padding')]", "input_token_count": 451, "output_token_count": 22, "latency": 8.801137208938599}
{"id": "java_45", "result": "Please provide the string representation of the `envVariables` map so that I can proceed with the validation.", "input_token_count": 395, "output_token_count": 21, "latency": 6.338029146194458}
{"id": "java_46", "result": "[MethodInvokeTest.checkInjectedInvoker(csm='csmInstance', expected='MyExpectedClass.class')]", "input_token_count": 440, "output_token_count": 21, "latency": 8.958667039871216}
{"id": "java_47", "result": "```json\n[{\"name\": \"LargeHandshakeTest.format\", \"parameters\": {\"name\": \"CERTIFICATE\", \"value\": \"MIIFdTCCBF2gAwIBAgISESG\"}}]\n```", "input_token_count": 434, "output_token_count": 43, "latency": 9.079618215560913}
{"id": "java_48", "result": "[CookieHeaderTest.create(sa='new InetSocketAddress(\"192.168.1.10\", 8080)', sslContext='testSSLContext')]", "input_token_count": 465, "output_token_count": 31, "latency": 6.32292914390564}
{"id": "java_49", "result": "[Http2TestExchangeImpl.sendResponseHeaders(rCode='404', responseLength='1500')]", "input_token_count": 433, "output_token_count": 20, "latency": 5.947646856307983}
{"id": "java_50", "result": "[TransformIndexerStateTests.doDeleteByQuery(deleteByQueryRequest='deleteQueryRequest', responseListener='testListener')]", "input_token_count": 448, "output_token_count": 24, "latency": 6.512033700942993}
{"id": "java_51", "result": "The function `CCRUsageTransportAction.masterOperation` can be used to gather the usage statistics of the CCR feature in Elasticsearch. However, to execute this function, I need the following parameters: `task`, `request`, `state`, and `listener`. Please provide these parameters so that I can proceed with the function call.", "input_token_count": 514, "output_token_count": 65, "latency": 9.64467477798462}
{"id": "java_52", "result": "[SamlObjectSignerTests.getChildren(node='SAMLAssertionNode', node_type='Element.class')]", "input_token_count": 420, "output_token_count": 20, "latency": 9.010709047317505}
{"id": "java_53", "result": "[VotingOnlyNodePlugin.fullMasterWithOlderState(localAcceptedTerm='42', localAcceptedVersion='7')]", "input_token_count": 422, "output_token_count": 22, "latency": 8.927095890045166}
{"id": "java_54", "result": "[AbstractTransportSearchableSnapshotsAction.shardOperation(request='snapshotRequest', shardRouting='shardRouteInfo', task='snapshotTask', listener='operationListener')]", "input_token_count": 522, "output_token_count": 33, "latency": 6.150188684463501}
{"id": "java_55", "result": "```json\n[\n    {\n        \"name\": \"SearchableSnapshotDirectory.create\",\n        \"parameters\": {\n            \"repositories\": \"repositoriesService\",\n            \"cache\": \"cacheService\",\n            \"indexSettings\": \"indexSettingsForLogs\",\n            \"shardPath\": \"/data/nodes/0/indices/logs/5\",\n            \"currentTimeNanosSupplier\": \"currentTimeNanos\",\n            \"threadPool\": \"threadPool\",\n            \"blobStoreCacheService\": \"blobStoreCacheService\",\n            \"sharedBlobCacheService\": \"sharedBlobCacheService\"\n        }\n    }\n]\n```", "input_token_count": 745, "output_token_count": 123, "latency": 7.713993072509766}
{"id": "java_56", "result": "```json\n[{\"name\":\"CCSDuelIT.parseEntity\",\"parameters\":{\"entity\":\"httpResponseEntity\",\"entityParser\":\"responseParser\",\"parserConfig\":\"defaultParserConfig\"}}]\n```", "input_token_count": 471, "output_token_count": 37, "latency": 6.727877855300903}
{"id": "java_57", "result": "```json\n[{\"name\":\"Booleans.parseBooleanLenient\",\"parameters\":{\"value\":\"yes\",\"defaultValue\":\"false\"}}]\n```", "input_token_count": 428, "output_token_count": 28, "latency": 9.083598136901855}
{"id": "java_58", "result": "The given question lacks the parameters required by the function. Specifically, the values for the keys 'name', 'age', and 'email' in the `userProfile` map are not provided. Please provide these values to proceed.", "input_token_count": 498, "output_token_count": 46, "latency": 6.569339752197266}
{"id": "java_59", "result": "[TruncateTranslogAction.execute(terminal='TerminalInterface', shardPath='ShardPath(Paths.get(\"/var/data/elasticsearch/nodes/0/indices/1shard\"))', indexDirectory='FSDirectory.open(Paths.get(\"/var/data/elasticsearch/nodes/0/indices/1shard/index\"))')]", "input_token_count": 542, "output_token_count": 63, "latency": 6.664042949676514}
{"id": "java_60", "result": "[NestedQueryBuilder.doBuild(parentSearchContext='mainSearchContext', innerHitsContext='hitsContext')]", "input_token_count": 448, "output_token_count": 21, "latency": 8.295291900634766}
{"id": "java_61", "result": "[ScoreFunctionBuilders.exponentialDecayFunction(fieldName='timestamp', origin='now', scale='10d', offset='2d', decay='0.5')]", "input_token_count": 553, "output_token_count": 33, "latency": 6.089379787445068}
{"id": "java_62", "result": "[dvRangeQuery(field='temperature', queryType='FLOAT', from='20.5', to='30.0', includeFrom='true', includeTo='false')]", "input_token_count": 581, "output_token_count": 35, "latency": 5.756263971328735}
{"id": "java_63", "result": "[withinQuery(field='age', from='30', to='40', includeFrom='true', includeTo='false')]", "input_token_count": 525, "output_token_count": 25, "latency": 12.799093008041382}
{"id": "java_64", "result": "[DateScriptFieldType.createFieldType(name='timestamp', factory='dateFactory', script='dateScript', meta='{\"format\": \"epoch_millis\"}', onScriptError='FAIL')]", "input_token_count": 543, "output_token_count": 39, "latency": 6.137692213058472}
{"id": "java_65", "result": "```json\n[RootObjectMapper.doXContent(builder=\"xContentBuilderInstance\", params=\"[true, true]\")]\n```", "input_token_count": 440, "output_token_count": 24, "latency": 9.285629987716675}
{"id": "java_66", "result": "[CompositeRuntimeField.createChildRuntimeField(parserContext='mappingParserContext', parent='compositeField1', parentScriptFactory='compositeScriptFactory', onScriptError='onScriptError.IGNORE')]", "input_token_count": 520, "output_token_count": 41, "latency": 9.087060928344727}
{"id": "java_67", "result": "To generate a DMG setup script for the 'PhotoEditor' application, I need additional details about the custom background image and other packaging parameters. Specifically, I need:\n\n1. The path to the custom background image.\n2. Any other specific parameters you want to include, such as images root, background image folder, or other packaging parameters.\n\nPlease provide these details so I can proceed.", "input_token_count": 447, "output_token_count": 78, "latency": 9.97542405128479}
{"id": "java_68", "result": "[MacBaseInstallerBundler.validateAppImageAndBundeler(params=\"{'applicationImagePath': '/Applications/MyApp.app', 'applicationName': 'MyApp'}\")]", "input_token_count": 399, "output_token_count": 34, "latency": 6.12336802482605}
{"id": "java_69", "result": "To align the signs of the BigDecimal elements in the array `durations` from index 2 to index 5, I will use the `DurationImpl.alignSigns` function.\n\n```json\n{\n  \"buf\": \"durations\",\n  \"start\": \"2\",\n  \"end\": \"5\"\n}\n```\n\n[DurationImpl.alignSigns(buf=\"durations\", start=\"2\", end=\"5\")]", "input_token_count": 484, "output_token_count": 84, "latency": 8.454383134841919}
{"id": "java_70", "result": "[XMLNamespaceBinder.endElement(element=\"QName(namespaceURI='http://www.example.com', localPart='item', prefix='ex')\", augs=\"augmentations\")]", "input_token_count": 450, "output_token_count": 34, "latency": 8.317911863327026}
{"id": "java_71", "result": "```json\n[{\"arg_object\": \"resultData\", \"thisCoroutine\": \"5\", \"toCoroutine\": \"10\"}]\n```", "input_token_count": 476, "output_token_count": 28, "latency": 6.224813938140869}
{"id": "java_72", "result": "[ToTextStream.characters(ch='textBuffer', start='5', length='10')]", "input_token_count": 480, "output_token_count": 18, "latency": 8.420928001403809}
{"id": "java_73", "result": "[Encodings.getEncodingInfo(encoding=\"UTF-8\", allowJavaNames=\"true\")]", "input_token_count": 398, "output_token_count": 19, "latency": 6.651255130767822}
{"id": "java_74", "result": "[BaseMarkupSerializer.surrogates(high='55357', low='56832', inContent='true')]", "input_token_count": 458, "output_token_count": 23, "latency": 8.86034893989563}
{"id": "java_75", "result": "[JdkXmlFeatures.getSystemProperty(feature='XML_SECURITY', sysPropertyName='enableXmlSecurityFeature')]", "input_token_count": 418, "output_token_count": 21, "latency": 9.066627025604248}
{"id": "java_76", "result": "[Intro.step(w=\"800\", h=\"600\")]", "input_token_count": 384, "output_token_count": 11, "latency": 6.081827163696289}
{"id": "java_77", "result": "[JndiLoginModule.verifyPassword(encryptedPassword='e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', password='P@ssw0rd!')]", "input_token_count": 428, "output_token_count": 56, "latency": 6.2786338329315186}
{"id": "java_78", "result": "[OptionSpecBuilder.requiredUnless(dependent='quiet', otherDependents='[\"verbose\"]')]", "input_token_count": 416, "output_token_count": 19, "latency": 6.022329807281494}
{"id": "java_79", "result": "[SAXFilterFactoryImpl.resolveEntity(publicid='1234', sysId='http://astro.com/stylesheets/toptemplate')]", "input_token_count": 440, "output_token_count": 25, "latency": 6.330898284912109}
{"id": "java_80", "result": "[RegexConstraint.initIRPattern(category='failOn', ruleIdx='42')]", "input_token_count": 410, "output_token_count": 16, "latency": 6.013163089752197}
{"id": "java_81", "result": "The function `TestObjectGraphAfterGC.doTesting` can be used to perform the garbage collection test as described. However, I need the specific details for the parameters `testcaseData`, `doGC`, and `checker` in string representation to proceed with the function call. Please provide these details.", "input_token_count": 667, "output_token_count": 61, "latency": 9.7793550491333}
{"id": "java_82", "result": "The provided question lacks the specific values for the `args` and `out` parameters required by the `clear001a.runIt` function. Please provide the values for these parameters.", "input_token_count": 452, "output_token_count": 37, "latency": 7.904949903488159}
{"id": "java_83", "result": "[thrcputime002.runIt(argv='-waitTime, 2, -iterations, 500', out='System.out')]", "input_token_count": 480, "output_token_count": 28, "latency": 6.5042338371276855}
{"id": "java_84", "result": "The given question lacks the parameters required by the function. Specifically, the `myRedefClass` instance needs to be provided in a string representation suitable for the `checkInnerFields` function.", "input_token_count": 429, "output_token_count": 39, "latency": 9.541604995727539}
{"id": "java_85", "result": "[classfloadhk005.runIt(argv=\"['/path/to/classes', '60']\", out='logStream')]", "input_token_count": 472, "output_token_count": 23, "latency": 6.411717891693115}
{"id": "java_86", "result": "```json\n[{\"name\": \"argumenttypes001.runThis\", \"parameters\": {\"argv\": \"['-v', '--no-strict']\", \"out\": \"debugOutput\"}}]\n```", "input_token_count": 447, "output_token_count": 39, "latency": 9.650346994400024}
{"id": "java_87", "result": "[suspendpolicy017.settingVMDeathRequest(suspendPolicy='EVENT_THREAD', property='deathEvent001')]", "input_token_count": 418, "output_token_count": 21, "latency": 5.899073839187622}
{"id": "java_88", "result": "[filter_s002.setting22MethodEntryRequest(thread='mainThread', testedClass='com.example.MainClass', suspendPolicy='EventRequest.SUSPEND_ALL', property='testProperty')]", "input_token_count": 515, "output_token_count": 37, "latency": 8.964209079742432}
{"id": "java_89", "result": "```json\n[{\"name\":\"runThis\",\"parameters\":{\"argv\":\"-waitTime, 2, -debuggeeName, TestDebuggee\",\"out\":\"testLogStream\"}}]\n```", "input_token_count": 466, "output_token_count": 38, "latency": 8.573447227478027}
{"id": "java_90", "result": "[sourcepaths002.runIt(args=\"['-v', '-p']\", out=\"System.out\")]", "input_token_count": 439, "output_token_count": 19, "latency": 9.348750114440918}
{"id": "java_91", "result": "[invokemethod007.runIt(args=\"['suspend', 'log']\", out=\"debugLog\")]", "input_token_count": 436, "output_token_count": 22, "latency": 8.956536054611206}
{"id": "java_92", "result": "[ClassFileFinder.findClassFile(name='com.example.MyClass', classPath='/usr/local/classes:/home/user/java/libs')]", "input_token_count": 420, "output_token_count": 26, "latency": 8.78958797454834}
{"id": "java_93", "result": "[AbstractJarAgent.runJarAgent(options='trace log', inst='appInstrumentation')]", "input_token_count": 428, "output_token_count": 17, "latency": 8.736936807632446}
{"id": "java_94", "result": "[NFILibrary.isMemberReadable(symbol='getVersion')]", "input_token_count": 398, "output_token_count": 11, "latency": 8.808274984359741}
{"id": "java_95", "result": "[ExportNodeTest.doGeneric(receiver='ExportInlinedObject1Instance', argument='HelloWorld', node='InlinableNodeInstance', library='NodeLibraryInstance')]", "input_token_count": 519, "output_token_count": 34, "latency": 7.343023061752319}
{"id": "java_96", "result": "[InstrumentableProcessor.createCallConverter(converterMethod='convertValue', frameParameterName='frameVar', returnName='returnValueCode')]", "input_token_count": 481, "output_token_count": 28, "latency": 6.503013849258423}
{"id": "java_97", "result": "[FlatNodeGenFactory.generateIntrospectionInfo(clazz='NodeClass', inlined='false')]", "input_token_count": 415, "output_token_count": 19, "latency": 6.137284755706787}
{"id": "java_98", "result": "[LoopConditionProfile.calculateProbability(trueCountLocal='150', falseCountLocal='50')]", "input_token_count": 407, "output_token_count": 18, "latency": 6.399295806884766}
{"id": "java_99", "result": "```json\n[\n    {\n        \"name\": \"LibraryExport.createDelegate\",\n        \"parameters\": {\n            \"factory\": \"myFactory\",\n            \"delegate\": \"existingDelegate\"\n        }\n    }\n]\n```", "input_token_count": 425, "output_token_count": 43, "latency": 6.574522256851196}
